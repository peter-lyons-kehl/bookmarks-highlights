<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xbel PUBLIC "+//IDN python.org//DTD XML Bookmark Exchange Language 1.0//EN//XML" "http://pyxml.sourceforge.net/topics/dtds/xbel.dtd">
<xbel version="1.0">
<!--- highestId :1958: for Floccus bookmark sync browser extension -->

<folder id="1">
  <title>Algorithms</title>
  <bookmark href="https://github.com/benashford/rust-lazysort" id="11">
    <title>benashford/rust-lazysort: Iterate in a lazily achieved sorted order</title>
  </bookmark>
  <bookmark href="https://github.com/claytonjwong/Algorithms-Illuminated" id="12">
    <title>claytonjwong/Algorithms-Illuminated: 💡algorithmsilluminated.org by Tim Roughgarden</title>
  </bookmark>
  <bookmark href="https://github.com/claytonjwong/Algorithms" id="13">
    <title>claytonjwong/Algorithms: “Remember to look up at the stars and not down at your feet.&quot; -Stephen Hawking</title>
  </bookmark>
  <bookmark href="https://www.algorithmsilluminated.org/" id="14">
    <title>The Algorithms Illuminated Book Series#__#https://www.cambridge.org/highereducation/books/algorithms-illuminated/3985B4112D84FF51DBE6E072463C1350/examination-copy/personal-details&lt;&lt;request an examination copy&gt;&gt;</title>
  </bookmark>
  <bookmark href="https://benashford.github.io/blog/2014/03/22/the-power-of-lazy-sequences/" id="15">
    <title>The power of lazy sequences</title>
  </bookmark>
</folder>
<folder id="2">
  <title>aMain Resources</title>
  <bookmark href="https://project-awesome.org/rust-unofficial/awesome-rust" id="16">
    <title>Awesome Rust | Curated list of awesome lists | Project-Awesome.org#__#&lt;&lt;Property Testing and Fuzzing&gt;&gt;</title>
  </bookmark>
  <bookmark href="https://github.com/awesome-rust-com/awesome-rust" id="17">
    <title>awesome-rust-com/awesome-rust: Awesome Rust#__#&lt;&lt;rust+react web&gt;&gt; &lt;&lt;crate-deps&gt;&gt; &lt;&lt;rustfix&gt;&gt; &lt;&lt;design doc tool&gt;&gt; &lt;&lt;artifact&gt;&gt; &lt;&lt;automatic crate publishing&gt;&gt; &lt;&lt;semantic&gt;&gt; &lt;&lt;fw&gt;&gt; &lt;&lt;workspace productivity&gt;&gt; &lt;&lt;rust github action&gt;&gt; &lt;&lt;rr is a lightweight&gt;&gt; &lt;&lt;recording and replaying execution of applications#green&gt;&gt; &lt;&lt;rust-cross&gt;&gt; &lt;&lt;xargo&gt;&gt; &lt;&lt;hyperfine&gt;&gt; &lt;&lt;nokia/memory-profiler&gt;&gt; &lt;&lt;memory profiler for Linux&gt;&gt; &lt;&lt;deps.rs — Detect outdated or insecure dependencies#green&gt;&gt; &lt;&lt;Rust implementation of QuickCheck#green&gt;&gt; &lt;&lt;tarpaulin&gt;&gt; &lt;&lt;code coverage tool designed for Rust#green&gt;&gt; &lt;&lt;tsync&gt;&gt; &lt;&lt;generate typescript types from rust#green&gt;&gt; &lt;&lt;crossbeam&gt;&gt; &lt;&lt;archery&gt;&gt; &lt;&lt;abstract from Rc/Arc&gt;&gt; &lt;&lt;Data structures@1&gt;&gt; &lt;&lt;Data visualization@1&gt;&gt; &lt;&lt;Resources@1&gt;&gt;</title>
  </bookmark>
  <bookmark href="https://github.com/rust-unofficial/awesome-rust" id="18">
    <title>rust-unofficial/awesome-rust: A curated list of Rust code and resources.</title>
  </bookmark>
  <bookmark href="https://ruststack.org/" id="1934">
    <title>RustStack.Org</title>
  </bookmark>
  <bookmark href="https://separator.floccus.org/?id=419856" id="19">
    <title>-----</title>
  </bookmark>
  <bookmark href="https://rust-unofficial.github.io/patterns/" id="20">
    <title>Introduction - Rust Design Patterns</title>
  </bookmark>
  <bookmark href="https://www.lurklurk.org/effective-rust/intro.html" id="21">
    <title>Introduction - Effective Rust</title>
  </bookmark>
  <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/" id="22">
    <title>Introduction - Rust By Example</title>
  </bookmark>
  <bookmark href="https://practice.rs/why-exercise.html" id="23">
    <title>Rust By Practice - Rust By Practice</title>
  </bookmark>
  <bookmark href="https://www.rustnote.com/rustnote.html" id="24">
    <title>Rustnote - Rustnote</title>
  </bookmark>
  <bookmark href="https://exercism.org/tracks/rust/concepts/fold" id="25">
    <title>Fold in Rust on Exercism</title>
  </bookmark>
  <bookmark href="https://github.com/sger/RustBooks" id="445">
    <title>sger/RustBooks: List of Rust books</title>
  </bookmark>
  <bookmark href="https://marabos.nl/atomics/" id="446">
    <title>Rust Atomics and Locks by Mara Bos</title>
  </bookmark>
  <bookmark href="https://www.libhunt.com/l/rust/trending" id="447">
    <title>Trending Rust Projects | LibHunt</title>
  </bookmark>
  <bookmark href="https://zerotomastery.io/cheatsheets/rust-cheat-sheet/" id="448">
    <title>Rust Cheat Sheet + PDF | Zero To Mastery</title>
  </bookmark>
  <bookmark href="https://rust-lang.github.io/unsafe-code-guidelines/" id="449">
    <title>Introduction - Unsafe Code Guidelines Reference</title>
  </bookmark>
  <bookmark href="https://rustrepo.com/" id="450">
    <title>Discover useful Rust development resources | RustRepo</title>
  </bookmark>
  <bookmark href="https://rustmagazine.org/" id="451">
    <title>Rust Magazine</title>
  </bookmark>
  <bookmark href="https://www.manning.com/books/rust-design-patterns" id="452">
    <title>Rust Design Patterns</title>
  </bookmark>
  <bookmark href="https://rust-lang-nursery.github.io/rust-cookbook/" id="453">
    <title>Table of Contents - Rust Cookbook</title>
  </bookmark>
  <bookmark href="https://internals.rust-lang.org/" id="454">
    <title>Rust Internals#__#&lt;&lt;Log in with GitHub&gt;&gt;</title>
  </bookmark>
  <bookmark href="https://rust-lang.zulipchat.com/login/?next=/" id="1153">
    <title>Log in | Zulip#__#&lt;&lt;with GitHub&gt;&gt;</title>
  </bookmark>
  <bookmark href="https://www.reddit.com/r/rust/comments/1amlro1/new_rust_book_asynchronous_programming_in_rust_is/" id="1154">
    <title>(5) New Rust book: Asynchronous programming in Rust is released 🎉 : rust</title>
  </bookmark>
  <bookmark href="https://blessed.rs/crates" id="1155">
    <title>Crate List - Blessed.rs#__#&lt;&lt;ecosystem&gt;&gt;</title>
  </bookmark>
</folder>
<folder id="3">
  <title>Community</title>
  <folder id="26">
    <title>Conferences, RustConf, UnConf</title>
    <bookmark href="https://discord.com/channels/734893811884621927/1004477078596501554" id="85">
      <title>(133) Discord | #22-unconference | Virtual RustConf</title>
    </bookmark>
  </folder>
  <folder id="27">
    <title>Values, Conduct, Speaking</title>
    <bookmark href="https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Rust.202022.20Annual.20Survey" id="86">
      <title>(56441) #general &gt; Rust 2022 Annual Survey - rust-lang - Zulip</title>
    </bookmark>
    <bookmark href="https://github.com/rust-community/talks" id="87">
      <title>rust-community/talks: Presentations, Proposals, and Requests for talks for the Rust Community</title>
    </bookmark>
    <bookmark href="https://rust-community.github.io/speaking/" id="88">
      <title>Rust Speakers Guide</title>
    </bookmark>
    <bookmark href="https://rust-community.github.io/resources/" id="89">
      <title>Rust Resources</title>
    </bookmark>
  </folder>
  <folder id="28">
    <title>Video</title>
    <bookmark href="https://www.youtube.com/channel/UCaYhcUwRBNscFNUKTjgPFiA" id="90">
      <title>Rust - YouTube - Linz, RustFest, VARIOUS</title>
    </bookmark>
    <bookmark href="https://www.youtube.com/playlist?list=PL85XCvVPmGQhAqjkGfixrAJaiPtStajXt" id="91">
      <title>Rust and Tell Berlin - YouTube - OLD ONLY</title>
    </bookmark>
    <bookmark href="https://live.berline.rs/" id="92">
      <title>Berline.rs Live Stream - CURRENT</title>
    </bookmark>
  </folder>
  <folder id="29">
    <title>www.rust-lang.org/governance</title>
    <bookmark href="https://www.rust-lang.org/governance/teams/lang" id="93">
      <title>Language team - Rust Programming Language</title>
    </bookmark>
  </folder>
  <folder id="30">
    <title>zOther</title>
    <bookmark href="https://docs.google.com/document/d/1fpXsHSESOUDXS9k_3aZiKA0APZrHHIzvpwz4D26qqEs/edit" id="94">
      <title>Buffalo Rust Meetup Collaborative Notes - Google Docs</title>
    </bookmark>
    <bookmark href="https://www.freecodecamp.org/news/best-gitter-channels-on-rust-ad8f5f73b5a2/" id="95">
      <title>Best Gitter channels on: Rust</title>
    </bookmark>
    <bookmark href="https://www.meetup.com/topics/rust/all/" id="96">
      <title>All Rust Meetups - Meetup</title>
    </bookmark>
    <bookmark href="https://github.com/Rust-Wroclaw/rust-wroclaw/tree/master/talk-archive" id="97">
      <title>rust-wroclaw/talk-archive at master · Rust-Wroclaw/rust-wroclaw#__#See also https://www.facebook.com/rustwroclaw/ for summaries.&lt;&lt;talk-archive#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://discordapp.com/channels/442252698964721669/448238009733742612" id="98">
      <title>#beginners</title>
    </bookmark>
    <bookmark href="https://gitlab.com/rust-saar/material" id="99">
      <title>Rust-Saar / Material · GitLab</title>
    </bookmark>
    <bookmark href="https://www.youtube.com/channel/UCfwRugIwAGv8jm_JHiMSJGw" id="100">
      <title>RustLangLA - YouTube</title>
    </bookmark>
    <bookmark href="https://github.com/ehsanmok/van-rust-meetup" id="101">
      <title>ehsanmok/van-rust-meetup</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/c/community/8" id="102">
      <title>Latest community topics - The Rust Programming Language Forum</title>
    </bookmark>
    <bookmark href="https://mob.sh/" id="103">
      <title>Fast git handover with mob | Tool for smooth git handover.#__#&lt;&lt;mobsh-bin#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.remotemobprogramming.org/" id="1004">
      <title>Remote Mob Programming | How we do Remote Mob Programming.</title>
    </bookmark>
    <bookmark href="https://mobusoperandi.zulipchat.com/" id="1005">
      <title>Mobus Operandi - Zulip#__#&lt;&lt;Exercism&gt;&gt; &lt;&lt;don&apos;t merely write just any code#red&gt;&gt; &lt;&lt;passes the tests&gt;&gt; &lt;&lt;best code we can#green&gt;&gt; &lt;&lt;spend several times#green&gt;&gt; &lt;&lt;mob that decides#green&gt;&gt; &lt;&lt;stand aside#green&gt;&gt; &lt;&lt;let the wisdom of the group run#green&gt;&gt; &lt;&lt;can tolerate the occasional triaging newcomer&gt;&gt; &lt;&lt;Until then, I won&apos;t get ahead of myself#green&gt;&gt; &lt;&lt;Participants benefit greatly from explaining#green&gt;&gt; &lt;&lt;Ask questions early#green&gt;&gt; &lt;&lt;as opposed to five minutes into a conversation#red&gt;&gt; &lt;&lt;recap#green&gt;&gt; &lt;&lt;your responsibility to the mob to keep up by letting them know when you&apos;ve lost track#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rust.saarland/" id="1006">
      <title>Rust-Saar</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rfcs/pull/2393" id="1007">
      <title>RFC: Delegation by elahn · Pull Request #2393 · rust-lang/rfcs#__#&lt;&lt;fmt-rfcs#green&gt;&gt; &lt;&lt;What happens when things go wrong?#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-dev-tools/fmt-rfcs" id="1008">
      <title>rust-dev-tools/fmt-rfcs: RFCs for Rust formatting guidelines and changes to Rustfmt</title>
    </bookmark>
    <bookmark href="https://forge.rust-lang.org/platforms/zulip.html" id="1009">
      <title>Zulip - Rust Forge#__#&lt;&lt;github-org/repo#123&gt;&gt; &lt;&lt;#4545 or rust#4545&gt;&gt; &lt;&lt;rust-lang/rust with 40-character long SHA&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rusticus-io" id="1010">
      <title>Rust Community Stuttgart</title>
    </bookmark>
  </folder>
</folder>
<folder id="4">
  <title>Convention</title>
  <folder id="31">
    <title>Idiomatic</title>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch07-04-bringing-paths-into-scope-with-the-use-keyword.html" id="104">
      <title>Bringing Paths Into Scope with the use...#__#&lt;&lt;Idiomatic use#green&gt;&gt; &lt;&lt;use crate::front_of_house::hosting@2#green&gt;&gt; &lt;&lt;called hosting::add_to_waitlist#green&gt;&gt; &lt;&lt;use path all the way out to the add_to_waitlist function#red&gt;&gt; &lt;&lt;Bringing the function’s parent module into scope#green&gt;&gt; &lt;&lt;so we have to specify the parent module#green&gt;&gt; &lt;&lt;alling the function#green&gt;&gt; &lt;&lt;clear that the function isn’t locally defined#green&gt;&gt; &lt;&lt;still minimizing repetition of the full path#green&gt;&gt; &lt;&lt;On the other hand#red&gt;&gt; &lt;&lt;bringing in structs, enums, and other items with use#green&gt;&gt; &lt;&lt;idiomatic to specify the full path#green&gt;&gt; &lt;&lt;use crate::front_of_house::hosting::add_to_waitlist;#red&gt;&gt; &lt;&lt;add_to_waitlist();@6#red&gt;&gt; &lt;&lt;just the convention#green&gt;&gt; &lt;&lt;exception to this idiom is if we’re bringing two items with the same name into scope with use#red&gt;&gt; &lt;&lt;use std::fmt;#green&gt;&gt; &lt;&lt;use std::io;#green&gt;&gt; &lt;&lt;fn function1() -&gt; fmt::Result {#green&gt;&gt; &lt;&lt;fn function2() -&gt; io::Result&lt;()&gt; {#green&gt;&gt; &lt;&lt;Bringing two types with the same name#green&gt;&gt; &lt;&lt;use std::io::Result as IoResult;#green&gt;&gt; &lt;&lt;combine pub and use. This technique is called re-exporting#green&gt;&gt; &lt;&lt;making that item available for others#green&gt;&gt; &lt;&lt;pub use crate::front_of_house::hosting;#green&gt;&gt; &lt;&lt;Re-exporting is useful when the internal structure of your code is different from how programmers calling your code would think about the domain.#green&gt;&gt; &lt;&lt;code with one structure#green&gt;&gt; &lt;&lt;expose a different structure#green&gt;&gt; &lt;&lt;function into scope with use, which is unidiomatic#red&gt;&gt; &lt;&lt;[dependencies]#green&gt;&gt; &lt;&lt;rand = &quot;0.5.5&quot;#green&gt;&gt; &lt;&lt;vertical space in our files#green&gt;&gt; &lt;&lt;specifying the common part of the path, followed by two colons#green&gt;&gt; &lt;&lt;use std::{cmp::Ordering, io};#green&gt;&gt; &lt;&lt;self in the nested path#green&gt;&gt; &lt;&lt;use std::io::{self, Write};#green&gt;&gt; &lt;&lt;*, the glob operator#red&gt;&gt; &lt;&lt;harder to tell what names are in scope and where a name used in your program was defined#red&gt;&gt; &lt;&lt;prelude pattern#green&gt;&gt;&lt;&lt;use self::front_of_house::hosting;#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="32">
    <title>zOther</title>
    <bookmark href="https://github.com/rust-lang/rfcs/blob/master/text/0430-finalizing-naming-conventions.md" id="105">
      <title>rfcs/0430-finalizing-naming-conventions.md at master · rust-lang/rfcs</title>
    </bookmark>
    <bookmark href="https://rust-lang.github.io/api-guidelines/naming.html" id="106">
      <title>Naming - Rust API Guidelines#__#&lt;&lt;UpperCamelCase for &quot;type#green&gt;&gt; &lt;&lt;snake_case for &quot;value-level#green&gt;&gt; &lt;&lt;new or with_more_details#green&gt;&gt; &lt;&lt;from_some_other_type#green&gt;&gt; &lt;&lt;In UpperCamelCase, acronyms and contractions of compound words count as one word#green&gt;&gt; &lt;&lt;Uuid#green&gt;&gt; &lt;&lt;rather than UUID#red&gt;&gt; &lt;&lt;Usize#green&gt;&gt; &lt;&lt;rather than USize#red&gt;&gt; &lt;&lt;Stdin#green&gt;&gt; &lt;&lt;rather than StdIn#red&gt;&gt; &lt;&lt;In snake_case, acronyms and contractions are lower-cased: is_xid_start#green&gt;&gt; &lt;&lt;In snake_case or SCREAMING_SNAKE_CASE, a &quot;word&quot; should never consist of a single letter unless it is the last &quot;word&quot;#green&gt;&gt; &lt;&lt;btree_map#green&gt;&gt; &lt;&lt;rather than b_tree_map#red&gt;&gt; &lt;&lt;but PI_2#green&gt;&gt; &lt;&lt;rather than PI2#red&gt;&gt; &lt;&lt;as_, to_, into_#green&gt;&gt; &lt;&lt;Free#green&gt;&gt; &lt;&lt;Expensive#red&gt;&gt; &lt;&lt;Variable#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/1.0.0/style/style/naming/README.html" id="107">
      <title>Naming conventions#__#&lt;&lt;CamelCase for &quot;type-level&quot; constructs (types and traits)#blue&gt;&gt; &lt;&lt;snake_case for &quot;value-level&quot;#blue&gt;&gt; &lt;&lt;Crates&gt;&gt; &lt;&lt;snake_case (but prefer single word)#green&gt;&gt; &lt;&lt;General constructors&gt;&gt; &lt;&lt;new or with_more_details#green&gt;&gt; &lt;&lt;Conversion constructors&gt;&gt; &lt;&lt;from_some_other_type#green&gt;&gt; &lt;&lt;Static variables&gt;&gt; &lt;&lt;SCREAMING_SNAKE_CASE#red&gt;&gt; &lt;&lt;Constant variables&gt;&gt; &lt;&lt;SCREAMING_SNAKE_CASE@1#red&gt;&gt; &lt;&lt;Type parameters&gt;&gt; &lt;&lt;concise CamelCase, usually single uppercase letter: T#green&gt;&gt; &lt;&lt;Lifetimes&gt;&gt; &lt;&lt;short, lowercase: &apos;a#green&gt;&gt; &lt;&lt;In CamelCase, acronyms count as one word: use Uuid rather than UUID#green&gt;&gt; &lt;&lt;In snake_case, acronyms are lower-cased: is_xid_start#green&gt;&gt; &lt;&lt;In snake_case or SCREAMING_SNAKE_CASE, a &quot;word&quot; should never consist of a single letter unless it is the last &quot;word&quot;#green&gt;&gt; &lt;&lt;have btree_map#green&gt;&gt; &lt;&lt;rather than b_tree_map#red&gt;&gt; &lt;&lt;but PI_2#green&gt;&gt; &lt;&lt;rather than PI2#red&gt;&gt; &lt;&lt;Function names often involve type names&gt;&gt; &lt;&lt;example being conversions like as_slice&gt;&gt; &lt;&lt;convention below#green&gt;&gt; &lt;&lt;&amp;mut [T]&gt;&gt; &lt;&lt;mut_slice#green&gt;&gt; &lt;&lt;&amp;[u8]&gt;&gt; &lt;&lt;bytes#green&gt;&gt; &lt;&lt;*const T&gt;&gt; &lt;&lt;ptr#green&gt;&gt; &lt;&lt;Avoid redundant prefixes#red&gt;&gt; &lt;&lt;Names of items within a module should not be prefixed with that module&apos;s name#red&gt;&gt; &lt;&lt;Library clients can rename on import to avoid clashes.#green&gt;&gt; &lt;&lt;Getter/setter#blue&gt;&gt; &lt;&lt;set_foo(&amp;self, val#green&gt;&gt; &lt;&lt;this convention is about getters/setters on ordinary#green&gt;&gt; &lt;&lt;not on builder#red&gt;&gt; &lt;&lt;Simple boolean predicates should be prefixed with is_#green&gt;&gt; has_&lt;&lt;or another short question word#green&gt;&gt; &lt;&lt;Common exceptions: lt, gt, and other established predicate names#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/api-guidelines/discussions/29" id="108">
      <title>Naming convention for crates · Discussion #29 · rust-lang/api-guidelines#__#&lt;&lt;from the package name with -#green&gt;&gt; &lt;&lt;to _, for library crates#green&gt;&gt; &lt;&lt;shun -rs suffixes and rust- prefixes#red&gt;&gt; &lt;&lt;foo being accompanied by foo-macros and foo-shared crates where necessary#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch19-06-macros.html" id="109">
      <title>Macros - The Rust Programming Language#__#&lt;&lt;declarative macros with macro_rules!&gt;&gt; &lt;&lt;three kinds of procedural macros:&gt;&gt; &lt;&lt;#[derive]&gt;&gt; &lt;&lt;on structs and enums#green&gt;&gt; &lt;&lt;Attribute-like&gt;&gt; &lt;&lt;on any item#green&gt;&gt; &lt;&lt;Function-like&gt;&gt; &lt;&lt;macros are expanded&gt;&gt; &lt;&lt;a macro can, for example, implement a trait#green&gt;&gt; &lt;&lt;#[macro_export]&gt;&gt; &lt;&lt;#[derive(HelloMacro)]&gt;&gt; &lt;&lt;define the HelloMacro trait#green&gt;&gt; &lt;&lt;At the time of this writing, procedural macros need to be in their own crate.#red&gt;&gt; &lt;&lt;for a crate named foo, a custom derive procedural macro crate is called foo_derive#green&gt;&gt; &lt;&lt;convention&gt;&gt; &lt;&lt;we create the procedural macro crate within the directory of our hello_macro crate&gt;&gt; &lt;&lt;two crates will need to be published separately#red&gt;&gt; &lt;&lt;could instead have the hello_macro crate use hello_macro_derive as a dependency#green&gt;&gt; &lt;&lt;re-export the procedural macro code#green&gt;&gt; &lt;&lt;[lib]&gt;&gt; &lt;&lt;proc-macro = true#green&gt;&gt; &lt;&lt;syn and quote crates#green&gt;&gt; &lt;&lt;hello_macro_derive/src/lib.rs&gt;&gt; &lt;&lt;#[proc_macro_derive(HelloMacro)]&gt;&gt; &lt;&lt;syn crate parses Rust code&gt;&gt; &lt;&lt;quote crate turns syn data structures back into Rust&gt;&gt; &lt;&lt;let gen = quote! {&gt;&gt; &lt;&lt;gen.into()&gt;&gt; &lt;&lt;repetition similar to the way regular macros#green&gt;&gt; &lt;&lt;derive only works for structs and enums#red&gt;&gt; &lt;&lt;#[proc_macro_attribute]#green&gt;&gt; &lt;&lt;pub fn route(attr: TokenStream, item: TokenStream) -&gt; TokenStream&gt;&gt; &lt;&lt;#[proc_macro]#green&gt;&gt;&lt;&lt;we’ve structured the project makes it possible for programmers to use hello_macro even if they don’t want the derive functionality#green&gt;&gt; &lt;&lt;stringify!&gt;&gt; &lt;&lt;let ast = syn::parse(input).unwrap();#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch10-01-syntax.html" id="110">
      <title>Generic Data Types - The Rust Programming Language</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/a7pcp2/is_using_a_crateprelude_good_practice/" id="111">
      <title>Is using a crate::prelude::* good practice? : rust#__#&lt;&lt;prelude::* should only be used in cases where you&apos;re trying to provide a DSL#blue&gt;&gt; &lt;&lt;How often do you really need to provide a DSL?#red&gt;&gt; &lt;&lt;crate should be organized in a way that makes wildcard imports unnecessary#green&gt;&gt; &lt;&lt;If you need a prelude, your API is probably too complicated#red&gt;&gt; &lt;&lt;If your prelude contains everything#red&gt;&gt; &lt;&lt;just put everything in the crate root instead.#green&gt;&gt; &lt;&lt;preludes tend to encourage * imports#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.meetup.com/Rust-Linz/events/275406690" id="112">
      <title>Rust Meetup Linz - 6th Edition | Meetup</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch03-03-how-functions-work.html" id="113">
      <title>Functions - The Rust Programming Language</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/generics.html" id="114">
      <title>Generics - Rust By Example</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch03-04-comments.html" id="1011">
      <title>Comments - The Rust Programming Language#__#&lt;&lt;comment on a separate line above the code it’s annotating#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.youtube.com/watch?v=22B_A5LyMec" id="1012">
      <title>Rust Meetup Linz - January 21 - YouTube#__#Rust Doc tips</title>
    </bookmark>
    <bookmark href="https://tor-code.readthedocs.io/en/latest/HACKING/CodingStandardsRust.html" id="1013">
      <title>Rust Coding Standards — Tor codebase documentation documentation</title>
    </bookmark>
  </folder>
</folder>
<folder id="5">
  <title>Design/Patterns</title>
  <folder id="33">
    <title>API</title>
    <bookmark href="https://doc.rust-lang.org/std/option/enum.Option.html" id="115">
      <title>std::option::Option - Rust#__#&lt;&lt;Arguments passed to ok_or are eagerly evaluated#red&gt;&gt; &lt;&lt;if you are passing the result of a function call, it is recommended to use ok_or_else, which is lazily#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/1.0.0/style/ownership/builders.html" id="116">
      <title>The builder pattern#__#&lt;&lt;In some cases, constructing the final T does not require the builder itself to be consumed#green&gt;&gt; &lt;&lt;builder by immutable reference#green&gt;&gt; &lt;&lt;possible because spawning the process does not require ownership of the configuration data#green&gt;&gt; &lt;&lt;Because the terminal spawn method only needs a reference#green&gt;&gt; &lt;&lt;configuration methods take and return a mutable borrow of self#green&gt;&gt; &lt;&lt;By using borrows#green&gt;&gt; No need to re-assign the result (to the same `let mut` - shadowing is not needed).&lt;&lt;conveniently for both one-liner and more complex constructions#green&gt;&gt; &lt;&lt;Sometimes builders must transfer ownership#red&gt;&gt; OR when taking the parameters in by ownership&lt;&lt;when constructing the final type T&gt;&gt; &lt;&lt;take self rather than &amp;self#red&gt;&gt; &lt;&lt;When the terminal methods of the builder require ownership#green&gt;&gt; &lt;&lt;If the other builder methods take/return a mutable borrow#green&gt;&gt; &lt;&lt;complex configuration case will work well#green&gt;&gt; &lt;&lt;but one-liner configuration becomes impossible#red&gt;&gt; &lt;&lt;If the other builder methods take/return an owned self#green&gt;&gt; &lt;&lt;one-liners continue to work#green&gt;&gt; &lt;&lt;but complex configuration is less convenient#red&gt;&gt; &lt;&lt;making easy things easy#green&gt;&gt; &lt;&lt;hard things possible#green&gt;&gt; &lt;&lt;all builder methods for a consuming builder should take and returned an owned self#green&gt;&gt; &lt;&lt;One-liners work as before, because ownership is threaded through#green&gt;&gt; &lt;&lt;Complex configuration, however, is more verbose: it requires re-assigning#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/string/struct.String.html" id="117">
      <title>std::string::String - Rust#__#&lt;&lt;append a char to a String with the push#green&gt;&gt; &lt;&lt;append a &amp;str with the push_str#green&gt;&gt; &lt;&lt;let mut#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/rust-iterable-as-argument/19877/4" id="118">
      <title>Rust Iterable as argument - help - The Rust Programming Language Forum#__#&lt;&lt;IntoIterator it does work, however requires some magic with explicit lifecycles#blue&gt;&gt; use std::hash; /* then: hash::Hash*/&lt;&lt;pub fn get_hashmap_values&lt;&apos;a,&apos;b, K: &apos;b + Eq + Hash, V, II&gt;(map: &amp;&apos;a mut HashMap&lt;K, V&gt;, keys: II) -&gt; Result&lt;Vec&lt;&amp;&apos;a mut V&gt;, String&gt;#green&gt;&gt; &lt;&lt;where II: IntoIterator&lt;Item=&amp;&apos;b K&gt;#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rauljordan.com/rust-concepts-i-wish-i-learned-earlier/" id="119">
      <title>rauljordan::blog#__#&lt;&lt;Bidirectional references#green&gt;&gt; &lt;&lt;RefCell&lt;Weak&lt;Node&gt;&gt; &lt;&lt;RefCell&lt;Vec&lt;Rc&lt;Node&gt;&gt; &gt;&lt;&lt;interior mutability#green&gt;&gt; &lt;&lt;get mut&gt;&gt; &lt;&lt;Phantom data#green&gt;&gt; &lt;&lt;way to tell the compiler that your type does not implement the Send or Sync#green&gt;&gt; &lt;&lt;wrap the following types with PhantomData and use them in your structs&gt;&gt; &lt;&lt;pub type PhantomUnsync = PhantomData&lt;Cell&lt;()&gt;&gt; try for thread local allocation&lt;&lt;pub type PhantomUnsend = PhantomData&lt;MutexGuard&lt;&apos;static, ()&gt;&gt; &lt;&lt;rayon for incremental parallelism&gt;&gt; &lt;&lt;input.par_iter()&gt;&gt; &lt;&lt;Blanket traits&gt;&gt; &lt;&lt;trait Fooer: Copy + Clone + Ord + Bar + Baz + Nyan {}&gt;&gt; &lt;&lt;Avoid _ =&gt;#red&gt;&gt; &lt;&lt;if your matchees are finite and known#green&gt;&gt; &lt;&lt;Match guard#green&gt;&gt; &lt;&lt;Criterion to benchmark#green&gt;&gt; &lt;&lt;soon found out that building graph data structures in Rust is really hard#red&gt;&gt; &lt;&lt;why methods such as Arc::clone exist#blue&gt;&gt; &lt;&lt;inner: Arc&lt;Inner&lt;T&gt;&gt;&gt;&gt; &lt;&lt;self.inner.clone()#red&gt;&gt; &lt;&lt;tail recursion&gt;&gt; &lt;&lt;tail-call optimization&gt;&gt; &lt;&lt;helpful for maintenance#green&gt;&gt; &lt;&lt;if the original writer of the enum adds more variants#red&gt;&gt; &lt;&lt;However, they will force you to have a catch-all `_ =&gt;`#red&gt;&gt; &lt;&lt;if your range cannot be fully encompassed by the guard#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/time-rs/time/issues/375" id="120">
      <title>`format_into()` requires `io::Write`; what about `fmt::Write` in Debug/Display impls? · Issue #375 · time-rs/time#__#&lt;&lt;Display or Debug for your type&gt;&gt; &lt;&lt;provided with std::fmt::Formatter which implements std::fmt::Write#green&gt;&gt; &lt;&lt;std::io::Write which is a different beast, more complex#red&gt;&gt; &lt;&lt;backwards-compatible#red&gt;&gt; &lt;&lt;wait for min_specialization#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rust-lang.github.io/api-guidelines/checklist.html" id="121">
      <title>Checklist - Rust API Guidelines</title>
    </bookmark>
    <bookmark href="https://lucumr.pocoo.org/talks/" id="122">
      <title>Talks | Armin Ronacher&apos;s Thoughts and Writings#__#&lt;&lt;Rust API Design Learnings&gt;&gt; &lt;&lt;recording, PDF&gt;&gt;</title>
    </bookmark>
    <bookmark href="http://mitsuhiko.pocoo.org/RustAPI.pdf" id="123">
      <title>RustAPI - RustAPI.pdf</title>
    </bookmark>
    <bookmark href="https://fredrik.space/posts/rust-erased-trait-parameters/" id="124">
      <title>Type-erasing trait parameters in Rust — Fredrik&apos;s Space#__#&lt;&lt;trait object dyn Trait&gt;&gt; &lt;&lt;object safe&gt;&gt; &lt;&lt;only having methods that have a self&gt;&gt; &lt;&lt;&amp;self, &amp;mut self&gt;&gt; &lt;&lt;self: Box&lt;Self&gt;#green&gt;&gt; &lt;&lt;not having the Self#red&gt;&gt; &lt;&lt;Result&lt;Box&lt;dyn io::Read&gt;&gt;&gt; &lt;&lt;Ok(Box::new(@1&gt;&gt; &lt;&lt;b&quot;default data&quot;.as_slice()#green&gt;&gt; &lt;&lt;all of the type parameters&gt;&gt; &lt;&lt;associated types@3&gt;&gt; &lt;&lt;specified as part of the trait object&gt;&gt; &lt;&lt;trait object must be specified as dyn Service&lt;Request, Response = Response, Future = Future&gt;#green&gt;&gt; &lt;&lt;type Future = Pin&lt;Box&lt;dyn &apos;a + Future&lt;Output = S::Response&gt;&gt;&gt;;&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/error/struct.Request.html" id="1014">
      <title>Request in core::error - Rust#__#&lt;&lt;!Unpin#red&gt;&gt; &lt;&lt;!RefUnwindSafe#red&gt;&gt; &lt;&lt;!Send#red&gt;&gt; &lt;&lt;!Sized#red&gt;&gt; &lt;&lt;!UnwindSafe#red&gt;&gt; &lt;&lt;!Sync&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://stackoverflow.com/questions/59257543/when-is-tail-recursion-guaranteed-in-rust" id="1015">
      <title>When is tail recursion guaranteed in Rust? - Stack Overflow#__#&lt;&lt;if we declare some variable that needs to be destroyed#red&gt;&gt; &lt;&lt;like&gt;&gt; &lt;&lt;a std::Vec#red&gt;&gt; &lt;&lt;will it be destroyed just before the recursive call#green&gt;&gt; &lt;&lt;or after the recursive call returns#red&gt;&gt; &lt;&lt;tailcall crate#green&gt;&gt; &lt;&lt;#[tailcall] annotation#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="34">
    <title>Error Handling</title>
    <bookmark href="https://www.youtube.com/watch?v=sNXngI4ZHoA" id="125">
      <title>Error Handling with Michael Harding - May 13, 2021 - YouTube</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/expressions/operator-expr.html" id="126">
      <title>Operator expressions - The Rust Reference</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/rust-by-example/error/option_unwrap.html" id="127">
      <title>Option &amp; unwrap - Rust By Example#__#&lt;&lt;let&apos;s instead have the compiler point out#blue&gt;&gt; &lt;&lt;test this against the null string (&quot;&quot;)#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch09-02-recoverable-errors-with-result.html" id="128">
      <title>Recoverable Errors with Result - The Rust Programming Language#__#&lt;&lt;use std::io::ErrorKind;#green&gt;&gt; &lt;&lt;Err(error) =&gt; match error.kind() {#green&gt;&gt; &lt;&lt;ErrorKind::NotFound =&gt;#green&gt;&gt; &lt;&lt;match File::create(&quot;hello.txt&quot;) {#green&gt;&gt; &lt;&lt;Ok(fc) =&gt; fc,#green&gt;&gt; &lt;&lt;.unwrap_or_else(|error| {#green&gt;&gt; &lt;&lt;.expect(#green&gt;&gt; &lt;&lt;If we use unwrap in multiple places, it can take more time to figure out exactly which unwrap#red&gt;&gt; &lt;&lt;difference between what the match expression from Listing 9-6 does and what the ? operator#red&gt;&gt; &lt;&lt;error values that have the ? operator called on them go through the from function, defined in the From#green&gt;&gt; &lt;&lt;When the ? operator calls the from function, the error type received is converted into the error type defined in the return type of the current function.#green&gt;&gt; &lt;&lt;As long as each error type implements the from#green&gt;&gt; &lt;&lt;only allowed to use the ? operator in a function that returns Result or Option#red&gt;&gt; &lt;&lt;or another type that implements std::ops::Try#green&gt;&gt; &lt;&lt;in a function that doesn’t return one of these types#red&gt;&gt; &lt;&lt;change the return type of your function to be Result&lt;T, E&gt; if you have no restrictions#green&gt;&gt; &lt;&lt;other technique is to use a match or one of the Result&lt;T, E&gt; methods#green&gt;&gt; &lt;&lt;main function@1#green&gt;&gt; &lt;&lt;valid return type is Result&lt;T, E&gt;#green&gt;&gt; &lt;&lt;fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/hello/print/print_display/testcase_list.md" id="129">
      <title>rust-by-example/testcase_list.md at master · rust-lang/rust-by-example#__#&lt;&lt;fmt::Display for a structure where the elements must each be handled sequentially#red&gt;&gt; &lt;&lt;write! generates a fmt::Result#red&gt;&gt; &lt;&lt;? on write!#green&gt;&gt; &lt;&lt;write!(f, &quot;{}&quot;, value)?;#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html" id="130">
      <title>UnwindSafe in std::panic - Rust#__#&lt;&lt;auto trait#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/vancouver-rs/talks/tree/master/checked-exceptions-and-result" id="131">
      <title>talks/checked-exceptions-and-result at master · vancouver-rs/talks</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch09-03-to-panic-or-not-to-panic.html" id="132">
      <title>To panic! or Not To panic! - The Rust Programming Language#__#&lt;&lt;When code panics, there’s no way to recover.#red&gt;&gt; &lt;&lt;return a Result value, you give the calling code options rather than making the decision for it#green&gt;&gt; &lt;&lt;returning Result is a good default choice#green&gt;&gt; &lt;&lt;robust error-handling code in the example#red&gt;&gt; &lt;&lt;make the example less clear#red&gt;&gt; &lt;&lt;In examples, it’s understood that a call to a method like unwrap that could panic is meant as a placeholder#green&gt;&gt; &lt;&lt;If you can ensure by manually inspecting the code that you’ll never have an Err variant, it’s perfectly acceptable to call unwrap#green&gt;&gt; &lt;&lt;use std::net::IpAddr;#green&gt;&gt; &lt;&lt;let home: IpAddr = &quot;127.0.0.1&quot;.parse().unwrap();#green&gt;&gt; &lt;&lt;panic when it’s possible that your code could end up in a bad state#green&gt;&gt; &lt;&lt;bad state is when some assumption, guarantee, contract, or invariant has been broken#blue&gt;&gt; &lt;&lt;not something that’s expected to happen occasionally#red&gt;&gt; &lt;&lt;Your code after this point needs to rely on not being in this bad state#red&gt;&gt; &lt;&lt;not a good way to encode this information in the types you use#red&gt;&gt; &lt;&lt;passes in values that don’t make sense#red&gt;&gt; &lt;&lt;panic! is often appropriate if you’re calling external code that is out of your control and it returns an invalid state that you have no way of fixing#red&gt;&gt; &lt;&lt;no reasonable way for calling code to recover#red&gt;&gt; &lt;&lt;the calling programmers need to fix the code#red&gt;&gt; &lt;&lt;should be explained in the API documentation for the function#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/beta/unstable-book/language-features/try-blocks.html" id="133">
      <title>try_blocks - The Rust Unstable Book#__#&lt;&lt;let result: Result&lt;i32, ParseIntError&gt; = try {#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch09-01-unrecoverable-errors-with-panic.html" id="134">
      <title>Unrecoverable Errors with panic! - The Rust Programming Language</title>
    </bookmark>
    <bookmark href="https://blog.rust-lang.org/inside-rust/2020/11/23/What-the-error-handling-project-group-is-working-on.html" id="1016">
      <title>What the Error Handling Project Group is Working On | Inside Rust Blog</title>
    </bookmark>
    <bookmark href="https://docs.rs/color-eyre/latest/color_eyre/" id="1017">
      <title>color_eyre - Rust</title>
    </bookmark>
    <bookmark href="https://docs.rs/anyhow/latest/anyhow/" id="1018">
      <title>anyhow - Rust</title>
    </bookmark>
    <bookmark href="https://docs.rs/color-eyre/latest/color_eyre/" id="1019">
      <title>color_eyre - Rust</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/xumagv/announcing_errorstack_v02/" id="1020">
      <title>Announcing error-stack v0.2 : rust</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/10qgksm/media_ann_cargochecktip_add_tips_to_rust_errors/" id="1021">
      <title>(3) [Media] ANN cargo-check-tip: add tips to rust errors. Easily extensible by libraries. : rust#__#&lt;&lt;--explain#green&gt;&gt; &lt;&lt;Tips can be provided by library authors in their Cargo.toml#green&gt;&gt; &lt;&lt;[[package.metadata.tips]]#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.libhunt.com/r/cargo-check-tip" id="1022">
      <title>Cargo-check-tip Alternatives and Similar Projects</title>
    </bookmark>
    <bookmark href="https://mmapped.blog/posts/12-rust-error-handling.html" id="1023">
      <title>Designing error types in Rust</title>
    </bookmark>
    <bookmark href="https://anssi-fr.github.io/rust-guide/04_language.html" id="1024">
      <title>Language generalities - Secure Rust Guidelines#__#&lt;&lt;Error handling&gt;&gt; &lt;&lt;Error + Send + Sync + &apos;static as well as Display#green&gt;&gt; &lt;&lt;Panics&gt;&gt; &lt;&lt;API Guidelines@1&gt;&gt; &lt;&lt;naming conventions&gt;&gt; &lt;&lt;Integer overflows&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="35">
    <title>Examples</title>
    <bookmark href="https://docs.rs/arrow2/latest/arrow2/array/struct.MutablePrimitiveArray.html" id="135">
      <title>MutablePrimitiveArray in arrow2::array - Rust#__#&lt;&lt;equivalent to Vec&lt;Option&lt;T&gt;&gt;&gt;&gt; &lt;&lt;where T is byte-size (e.g. i32)#red&gt;&gt; &lt;&lt;Converting a MutablePrimitiveArray into a PrimitiveArray is O(1)#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="36">
    <title>Modules</title>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/items/modules.html" id="136">
      <title>Modules - The Rust Reference#__#&lt;&lt;path attributes inside inline module blocks, the relative location of the file path depends#red&gt;&gt; &lt;&lt;&quot;mod-rs&quot; source files&gt;&gt; &lt;&lt;root modules (such as lib.rs or main.rs#blue&gt;&gt; &lt;&lt;and modules with files named mod.rs#blue&gt;&gt; &lt;&lt;&quot;non-mod-rs&quot; source files&gt;&gt; &lt;&lt;other module files.#blue&gt;&gt; &lt;&lt;Paths for path attributes inside&gt;&gt; &lt;&lt;a mod-rs file#blue&gt;&gt; &lt;&lt;relative to the directory of the mod-rs&gt;&gt; &lt;&lt;including the inline module components&gt;&gt; &lt;&lt;as directories&gt;&gt; &lt;&lt;For non-mod-rs files&gt;&gt; &lt;&lt;is the same&gt;&gt; &lt;&lt;except#red&gt;&gt; &lt;&lt;path starts with a directory with the name of the non-mod-rs module&gt;&gt; &lt;&lt;#[path = &quot;thread_files&quot;]#blue&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/visibility-and-privacy.html" id="137">
      <title>Visibility and privacy - The Rust Reference#__#&lt;&lt;pub ( in SimplePath )#green&gt;&gt; &lt;&lt;By default, everything in Rust is private&gt;&gt; &lt;&lt;with two exceptions:#blue&gt;&gt; &lt;&lt;Associated items in a pub Trait are public by default#green&gt;&gt; &lt;&lt;Enum variants in a pub enum are also public by default#green&gt;&gt; &lt;&lt;path must be an ancestor module#red&gt;&gt; &lt;&lt;paths for pub(in path) must start with crate, self, or super#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html" id="138">
      <title>Paths for Referring to an Item in the Module Tree - The Rust Programming Language#__#&lt;&lt;absolute path starts from a crate root#green&gt;&gt; &lt;&lt;using a crate name#green&gt;&gt; &lt;&lt;or a literal crate#green&gt;&gt; &lt;&lt;relative path starts from the current module and uses self, super, or an identifier in the current module#green&gt;&gt; &lt;&lt;this example won’t compile just yet#red&gt;&gt; &lt;&lt;a relative path#green&gt;&gt; &lt;&lt;starts with front_of_house, the name of the module defined at the same level of the module tree as eat_at_restaurant#green&gt;&gt; &lt;&lt;whether to use a relative or absolute path#green&gt;&gt; &lt;&lt;should depend on whether you’re more likely to move item definition code separatel#green&gt;&gt; &lt;&lt;preference is to specify absolute paths because it’s more likely to move#green&gt;&gt; &lt;&lt;independently#green&gt;&gt; &lt;&lt;all items (functions, methods, structs, enums, modules, and constants)#green&gt;&gt; &lt;&lt;private by default#green&gt;&gt; &lt;&lt;parent module can’t use the private items inside child#red&gt;&gt; &lt;&lt;child modules can use the items in their ancestor#green&gt;&gt; &lt;&lt;hiding inner implementation details is the default#green&gt;&gt; &lt;&lt;inner code you can change#green&gt;&gt; &lt;&lt;without breaking outer code#red&gt;&gt; &lt;&lt;Adding the pub keyword in front of mod#green&gt;&gt; &lt;&lt;But the contents of hosting are still private#red&gt;&gt; &lt;&lt;making the module public doesn’t make its contents public#green&gt;&gt; &lt;&lt;Relative Paths with super#green&gt;&gt; &lt;&lt;stay in the same relationship to each other and get moved together#green&gt;&gt; &lt;&lt;fewer places to update code#red&gt;&gt; &lt;&lt;Structs and Enums Public#green&gt;&gt; &lt;&lt;extra details#red&gt;&gt; &lt;&lt;pub before a struct definition#green&gt;&gt; &lt;&lt;struct’s fields will still be private#red&gt;&gt; &lt;&lt;toast: &amp;str#green&gt;&gt; &lt;&lt;String::from(toast)#green&gt;&gt; &lt;&lt;struct Breakfast {#green&gt;&gt; &lt;&lt;impl Breakfast {#green&gt;&gt; &lt;&lt;seasonal_fruit:@1#green&gt;&gt; &lt;&lt;because back_of_house::Breakfast has a private field, the struct needs to provide a public associated function that constructs an instance#green&gt;&gt; &lt;&lt;couldn’t create an instance of Breakfast#red&gt;&gt; &lt;&lt;In contrast, if we make an enum public, all of its variants are then public#green&gt;&gt; &lt;&lt;Enums aren’t very useful unless their variants are public#green&gt;&gt; &lt;&lt;use keyword#green&gt;&gt; &lt;&lt;combine pub and use#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.florianreinhard.de/2021-02-27/rust-modules-cheat-sheet/" id="139">
      <title>Rust Modules Cheat Sheet - Florianrein&apos;s Blog</title>
    </bookmark>
  </folder>
  <folder id="37">
    <title>Types</title>
    <folder id="140">
      <title>Alias</title>
      <bookmark href="https://github.com/rust-lang/rfcs/blob/master/text/2515-type_alias_impl_trait.md" id="455">
        <title>rfcs/text/2515-type_alias_impl_trait.md at master · rust-lang/rfcs#__#&lt;&lt;refactoring#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/impl-trait-initiative/" id="456">
        <title>👋 Welcome - Impl trait initiative</title>
      </bookmark>
    </folder>
    <folder id="141">
      <title>Borrow, Cow</title>
      <bookmark href="https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html" id="457">
        <title>Borrow in core::borrow - Rust#__#&lt;&lt;when providing implementations for additional traits, it needs to be considered whether they should behave identically to those of the underlying type#green&gt;&gt; &lt;&lt;In particular Eq, Ord and Hash#red&gt;&gt; &lt;&lt;If generic code merely&gt;&gt; &lt;&lt;work for all types that can provide a reference to related type T&gt;&gt; &lt;&lt;often better to use AsRef&lt;T&gt; as more types can safely#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/maciejhirsz/beef/blob/master/README.md" id="458">
        <title>beef/README.md at master · maciejhirsz/beef</title>
      </bookmark>
    </folder>
    <folder id="142">
      <title>Enums</title>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/items/enumerations.html" id="459">
        <title>Enumerations - The Rust Reference#__#&lt;&lt;discriminant can be obtained with the mem::discriminant#green&gt;&gt; &lt;&lt;If there is no data attached to any of the variants of an enumeration, then the discriminant can be directly chosen and accessed.#green&gt;&gt; &lt;&lt;If the first variant in the declaration is unspecified, then it is set to zero.#red&gt;&gt; &lt;&lt;every other unspecified discriminant, it is set to one higher than the previous variant in the declaration.&gt;&gt; this applies to variants that carry data, too.&lt;&lt;Each enum instance has a discriminant#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/buqgam/enum_variants_as_types/" id="460">
        <title>Enum Variants as types : rust#__#&lt;&lt;enum/sub-type pattern in a fairly large#red&gt;&gt; &lt;&lt;unless you know that almost all of your use cases are limited to functions that naturally have the right variance, where a function that expects an Animal is getting a specific one like Dog#red&gt;&gt; &lt;&lt;dealing with covariant arguments, like needing to map a function (d : Dog) -&gt; T over a Vec&lt;Animal&gt;#red&gt;&gt; &lt;&lt;lose a majority of the compile time analysis benefits#red&gt;&gt; &lt;&lt;crazy amounts of boilerplate#red&gt;&gt; &lt;&lt;line noise from run time conversions#red&gt;&gt; &lt;&lt;partial functions which can fail#red&gt;&gt; &lt;&lt;collections becomes a huge pain#red&gt;&gt; &lt;&lt;save yourself a lot of work#blue&gt;&gt; &lt;&lt;get the same level of safety#blue&gt;&gt; &lt;&lt;just using assertions#green&gt;&gt; &lt;&lt;check the enum&apos;s discriminant at run time#green&gt;&gt; &lt;&lt;don&apos;t need to worry about a bug where you misuse that match expression#blue&gt;&gt; &lt;&lt;struct Dog {}#green&gt;&gt; &lt;&lt;struct Whale {}#green&gt;&gt; &lt;&lt;enum Animal {&gt;&gt; &lt;&lt;Dog(Dog),#green&gt;&gt; &lt;&lt;Whale(Whale),#green&gt;&gt; &lt;&lt;derive_more and enum_dispatch#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gist.github.com/rust-play/8ab962bddc9b03058197c89ec0961709" id="461">
        <title>Code shared from the Rust Playground#__#&lt;&lt;common: usize#green&gt;&gt; &lt;&lt;common: usize,@1#green&gt;&gt; &lt;&lt;Foo(Foo),#green&gt;&gt; &lt;&lt;Bar(Bar),#green&gt;&gt; &lt;&lt;impl Baz {#green&gt;&gt; &lt;&lt;fn common_field(&amp;self)#green&gt;&gt; &lt;&lt;match *self {#green&gt;&gt; &lt;&lt;Baz::Foo(Foo { common, .. }) | Baz::Bar(Bar { common, .. }) =&gt; common#green&gt;&gt; from https://play.rust-lang.org/?gist=7724c7c3a3512533a8440321881f2929&lt;&lt;from the Rust Playground#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/7phgyf/question_about_enum_variants_with_a_common_field/" id="462">
        <title>Question about enum variants with a common field. : rust#__#&lt;&lt;pattern match a single struct#green&gt;&gt; &lt;&lt;match node {&gt;&gt; &lt;&lt;Struct { common, variant: Enum::Variant1(a, b, c) } =&gt; ...#green&gt;&gt; &lt;&lt;Struct { common, variant: Enum::Variant2(a, b, c) } =&gt; ...#green&gt;&gt; &lt;&lt;pattern matching code: https://play.rust-lang.org/?gist=7724c7c3a3512533a8440321881f2929#green&gt;&gt; &lt;&lt;Use a mixture of structs and enums#green&gt;&gt; &lt;&lt;Just like&gt;&gt; &lt;&lt;have many short and sweet functions/methods with one specific, clearly-defined job/purpose#green&gt;&gt; &lt;&lt;rather than a few big monoliths with a lot of complexity and nesting#red&gt;&gt; &lt;&lt;the same should apply to types#green&gt;&gt; &lt;&lt;have many small types with a clear purpose#green&gt;&gt; &lt;&lt;composed into a nice and elegant hierarchy#green&gt;&gt; &lt;&lt;as opposed to big monoliths (as tends to happen with C++/Java classes#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/mem/fn.discriminant.html" id="463">
        <title>discriminant in core::mem - Rust#__#&lt;&lt;This can be used to compare enums that carry data, while disregarding the actual data#green&gt;&gt; &lt;&lt;assert_eq!(mem::discriminant(&amp;Foo::B(1)), mem::discriminant(&amp;Foo::B(2)));#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/std/mem/fn.variant_count.html" id="464">
        <title>variant_count in std::mem - Rust#__#&lt;&lt;number of variants in the enum type#green&gt;&gt; &lt;&lt;Uninhabited variants will be counted.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/31358826/how-do-i-convert-an-enum-reference-to-a-number" id="465">
        <title>rust - How do I convert an enum reference to a number? - Stack Overflow#__#&lt;&lt;*foo as u8 is correct, but you have to implement Copy#green&gt;&gt; &lt;&lt;#[derive(Copy, Clone)]#green&gt;&gt; &lt;&lt;Since your enum will be a very lightweight object you should pass it around by value anyway#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/enum-ordinalize/latest/enum_ordinalize/" id="466">
        <title>enum_ordinalize - Rust#__#&lt;&lt;#[derive(Debug, PartialEq, Eq, Ordinalize)]@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/attributes/type_system.html" id="467">
        <title>Type System - The Rust Reference</title>
      </bookmark>
      <bookmark href="https://medium.com/@aminedirhoussi1/clean-code-horrible-performance-rust-edition-abf794a30e95" id="468">
        <title>Clean Code, Horrible performance Rust edition | by Amine Dirhoussi | Oct, 2023 | Medium</title>
      </bookmark>
    </folder>
    <folder id="143">
      <title>Layout</title>
      <bookmark href="https://doc.rust-lang.org/nightly/core/mem/fn.size_of.html" id="469">
        <title>core::mem::size_of - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/type-layout.html" id="470">
        <title>Type layout - The Rust Reference#__#&lt;&lt;A value of alignment n must only be stored at an address that is a multiple of n#blue&gt;&gt; &lt;&lt;always a power of 2#blue&gt;&gt; &lt;&lt;value can be checked with the align_of_val#green&gt;&gt; &lt;&lt;value can be checked with the size_of_val#green&gt;&gt; &lt;&lt;Sized trait and can be checked with the size_of and align_of#green&gt;&gt; &lt;&lt;Most primitives are generally aligned to their size#green&gt;&gt; &lt;&lt;on x86 u64 and f64 are only aligned to 32 bits#red&gt;&gt; &lt;&lt;Tuples do not have any guarantees about their layout.#red&gt;&gt; &lt;&lt;exception to this is the unit tuple (())#green&gt;&gt; &lt;&lt;guaranteed as a zero-sized#green&gt;&gt; &lt;&lt;possible representations&gt;&gt; &lt;&lt;alignment may be raised or lowered with the align and packed#green&gt;&gt; &lt;&lt;alignment lowered to 2&gt;&gt; &lt;&lt;#[repr(packed(2))]#green&gt;&gt; &lt;&lt;alignment raised to 8&gt;&gt; &lt;&lt;#[repr(C, align(8))]#green&gt;&gt; &lt;&lt;representation does not depend on generic&gt;&gt; &lt;&lt;does not change the layout of the fields themselves#red&gt;&gt; &lt;&lt;a struct with a C representation@1&gt;&gt; &lt;&lt;that contains a struct Inner with the default representation#red&gt;&gt; &lt;&lt;will not change the layout of Inner#red&gt;&gt; &lt;&lt;alignment of the struct is the alignment of the most-aligned field&gt;&gt; &lt;&lt;size of a value is the offset in bytes between successive elements in an array with that item type including alignment padding#red&gt;&gt; &lt;&lt;size of a value is always a multiple of its alignment#red&gt;&gt; &lt;&lt;platform-specific#red&gt;&gt; &lt;&lt;If the current offset is not a multiple of the field&apos;s alignment, then add padding bytes to the current offset#red&gt;&gt; &lt;&lt;Finally, the size of the struct is the current offset rounded up to the nearest multiple of the struct&apos;s alignment.#red&gt;&gt; &lt;&lt;use Layout#green&gt;&gt;&lt;&lt;Dereferencing an unaligned pointer is undefined#red&gt;&gt; &lt;&lt;and it is possible to safely create unaligned pointers to packed field#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/alloc/struct.Layout.html" id="471">
        <title>Layout in std::alloc - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/simd/trait.SimdElement.html" id="472">
        <title>SimdElement in std::simd - Rust#__#&lt;&lt;monomorphize #[repr(simd)#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="144">
      <title>Pin</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/eo7u4o/futures_pinning_101/" id="1957">
        <title>Futures &amp; Pinning 101 : r/rust</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=627522" id="1958">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html" id="473">
        <title>core::marker::Unpin - Rust</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/components-arena" id="474">
        <title>components-arena - crates.io: Rust Package Registry#__#&lt;&lt;Simple library for creating complex domain-specific self-referential data structures.@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/marker/trait.Copy.html" id="475">
        <title>std::marker::Copy - Rust</title>
      </bookmark>
      <bookmark href="https://github.com/FSMaxB/Rust-Community-Stuttgart_Futures-Talk" id="476">
        <title>FSMaxB/Rust-Community-Stuttgart_Futures-Talk: Talk: Rust-Futures - an introduction, held at rust community Stuttgart</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/pin/index.html" id="477">
        <title>core::pin - Rust#__#&lt;&lt;a Future combinator&gt;&gt; &lt;&lt;pinning for the nested futures#green&gt;&gt; &lt;&lt;But if your combinator contains any other data that does not need to be pinned#green&gt;&gt; &lt;&lt;make those fields not structural#green&gt;&gt; &lt;&lt;hence freely access them with a mutable reference#green&gt;&gt; &lt;&lt;even when you just have Pin&lt;&amp;mut Self&gt;&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html" id="478">
        <title>Pin in core::pin - Rust#__#&lt;&lt;impl&lt;P: Deref&lt;Target: Unpin&gt;&gt;#green&gt;&gt; &lt;&lt;let mut closure = move || unsafe {#red&gt;&gt; &lt;&lt;do the pinning in the outer function instead#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/pin/macro.pin.html" id="479">
        <title>pin in core::pin - Rust#__#&lt;&lt;locally#green&gt;&gt; &lt;&lt;Unlike Box::pin#red&gt;&gt; &lt;&lt;not create a new heap allocation#green&gt;&gt; &lt;&lt;As explained below&gt;&gt; &lt;&lt;he element might still end up on the heap#red&gt;&gt; &lt;&lt;“stack”-pinning#green&gt;&gt; &lt;&lt;Outside of async contexts locals do indeed get stored on the stack#green&gt;&gt; &lt;&lt;In async&gt;&gt; &lt;&lt;any locals crossing an .await point are part of the state captured by the Future#blue&gt;&gt; &lt;&lt;That storage can either be on the heap#red&gt;&gt; &lt;&lt;or on the stack&gt;&gt; &lt;&lt;local pinning is a more accurate#blue&gt;&gt; &lt;&lt;pin!(Foo { /* … */ })#green&gt;&gt; &lt;&lt;Manually polling a Future&gt;&gt; &lt;&lt;#![feature(generators, generator_trait)]&gt;&gt; &lt;&lt;fn generator_fn() -&gt; impl Generator&lt;Yield = usize, Return = ()&gt; /* not Unpin */&gt;&gt; &lt;&lt;yield 0;&gt;&gt; &lt;&lt;yield foo.len();&gt;&gt; &lt;&lt;pin!(generator_fn())&gt;&gt; &lt;&lt;generator.as_mut().resume(())&gt;&gt; &lt;&lt;borrowing a local tied to that block&gt;&gt; &lt;&lt;can’t escape#red&gt;&gt; &lt;&lt;unsuitable to pin values when intending to return#red&gt;&gt; &lt;&lt;Instead, the value is expected to be passed around unpinned#green&gt;&gt; &lt;&lt;until the point where it is to be consumed#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/taiki-e/pin-project" id="480">
        <title>taiki-e/pin-project: A crate for safe and ergonomic pin-projection.#__#&lt;&lt;safe@1&gt;&gt; &lt;&lt;ergonomic@1&gt;&gt; &lt;&lt;pin-projection@1&gt;&gt; &lt;&lt;pin-project-lite&gt;&gt; &lt;&lt;lightweight&gt;&gt; &lt;&lt;with declarative macros&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.cloudflare.com/pin-and-unpin-in-rust/" id="481">
        <title>Pin, Unpin, and why Rust needs them</title>
      </bookmark>
      <bookmark href="https://github.com/vancouver-rs/talks/tree/master/pinning" id="482">
        <title>talks/pinning at master · vancouver-rs/talks</title>
      </bookmark>
    </folder>
    <folder id="145">
      <title>References</title>
      <bookmark href="https://docs.rs/same/0.1.0/same/trait.Same.html" id="483">
        <title>same::Same - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/boxed/" id="484">
        <title>std::boxed - Rust</title>
      </bookmark>
      <bookmark href="https://www.joshmcguigan.com/blog/array-initialization-rust/" id="485">
        <title>Methods for Array Initialization in Rust#__#&lt;&lt;MaybeUninit was stabilized#green&gt;&gt; &lt;&lt;MaybeUninit docs#green&gt;&gt; &lt;&lt;std::ptr::write(elem.as_mut_ptr(), vec![42]);#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://notes.iveselov.info/programming/rust-closures-combining-move-and-fn" id="486">
        <title>Rust Closures: Returning `impl Fn` for `move` closures - IV Notes</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/3vchld/how_to_check_if_two_borrowed_objects_are_the_same/" id="487">
        <title>How to check if two borrowed objects are the same : rust#__#&lt;&lt;write a as *const _ == b as *const _ to avoid repeating long type names#green&gt;&gt; &lt;&lt;&amp;T automatically casts to *const T#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/dymc8f/selfreference_struct_how_to/" id="488">
        <title>Self-reference struct, how to? : rust#__#&lt;&lt;Self referential structs are inherently unsafe since they are implicitly invalidated if they are ever moved.#red&gt;&gt; &lt;&lt;In general you almost never need to use Pin or unsafe.#red&gt;&gt; &lt;&lt;Without Pin, a struct cannot own references to the data it owns safely.#green&gt;&gt; &lt;&lt;rental once (example code you may find useful: https://gitlab.com/KonradBorowski/showdown/blob/master/src/message.rs), but that&apos;s all I am able to provide. The crate is sorta tricky#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch15-03-drop.html" id="489">
        <title>Running Code on Cleanup with the Drop Trait - The Rust Programming Language#__#&lt;&lt;dropped in the reverse order of their creation,&gt;&gt; &lt;&lt;Early with std::mem::drop#green&gt;&gt; &lt;&lt;not straightforward to disable the automatic drop#red&gt;&gt; &lt;&lt;clean up a value early#green&gt;&gt; &lt;&lt;example is when using smart pointers that manage locks:#green&gt;&gt; &lt;&lt;Rust doesn’t let you call the Drop trait’s drop method manually#red&gt;&gt; &lt;&lt;is in the prelude#green&gt;&gt; &lt;&lt;drop(c)@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch15-05-interior-mutability.html" id="490">
        <title>RefCell&lt;T&gt; and the Interior Mutability Pattern - The Rust Programming Language#__#&lt;&lt;To mutate data, the pattern uses unsafe#red&gt;&gt; &lt;&lt;Unlike Rc&lt;T&gt;#red&gt;&gt; &lt;&lt;RefCell&lt;T&gt; type represents single ownership&gt;&gt; &lt;&lt;impossible to detect by analyzing the code:#red&gt;&gt; &lt;&lt;Halting Problem#red&gt;&gt; &lt;&lt;Similar to Rc#red&gt;&gt; &lt;&lt;RefCell&lt;T&gt; is only for use in single-threaded#red&gt;&gt; &lt;&lt;compile-time error if you try using it in a multithreaded#red&gt;&gt; &lt;&lt;how to get the functionality of RefCell&lt;T&gt; in a multithreaded program in Chapter 16#green&gt;&gt; &lt;&lt;also Mutex&lt;T&gt;#green&gt;&gt; &lt;&lt;Box&lt;T&gt;, Rc&lt;T&gt;, or RefCell&lt;T&gt;:&gt;&gt; &lt;&lt;Mock Objects&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch15-06-reference-cycles.html" id="491">
        <title>Reference Cycles Can Leak Memory - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://kimundi.github.io/owning-ref-rs/owning_ref/index.html" id="492">
        <title>owning_ref - Rust#__#&lt;&lt;Caching a subslice&gt;&gt; &lt;&lt;Reference counted slices&gt;&gt; &lt;&lt;share ownership of the backing&gt;&gt; &lt;&lt;Atomic reference counted slices&gt;&gt; &lt;&lt;share ownership of the backing@1&gt;&gt; &lt;&lt;Mutable reference&gt;&gt; &lt;&lt;with Box, RefMut, MutexGuard&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html" id="1156">
        <title>AsRef in core::convert - Rust#__#&lt;&lt;Avoid this:#red&gt;&gt; &lt;&lt;Better#green&gt;&gt; &lt;&lt;many smart pointers provide an as_ref implementation which simply returns a reference to the pointed-to#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="146">
      <title>Return Types</title>
      <bookmark href="https://github.com/rust-lang/project-error-handling/blob/master/the-rust-error-book/src/SUMMARY.md" id="493">
        <title>project-error-handling/the-rust-error-book at master · rust-lang/project-error-handling</title>
      </bookmark>
      <bookmark href="https://www.infoq.com/news/2018/05/rust-1.26-existential-types" id="494">
        <title>Rust Has Got Existential Types</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch12-03-improving-error-handling-and-modularity.html" id="495">
        <title>Refactoring to Improve Modularity and Error Handling - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/fn/diverging.html" id="496">
        <title>Diverging functions - Rust By Example</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html" id="497">
        <title>Cow in std::borrow - Rust#__#&lt;&lt;clone the data lazily#green&gt;&gt; &lt;&lt;Cow implements Deref, which means that you can call non-mutating methods directly#green&gt;&gt; &lt;&lt;If mutation is desired, to_mut#green&gt;&gt; &lt;&lt;If you need reference-counting#green&gt;&gt; &lt;&lt;Rc::make_mut and Arc::make_mut can provide clone-on-write#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/multidimensional-array/27919/6" id="498">
        <title>Multidimensional array - help - The Rust Programming Language Forum - Matrix</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/62687455/alternatives-for-using-the-question-mark-operator-inside-a-map-function-closure" id="499">
        <title>rust - Alternatives for using the question mark operator inside a map function closure - Stack Overflow#__#&lt;&lt;calls to map&gt;&gt; &lt;&lt;pipeline feel&gt;&gt; &lt;&lt;clearer&gt;&gt; &lt;&lt;my suggestion&gt;&gt; &lt;&lt;calculation to not be tied up with iterator methods#red&gt;&gt; &lt;&lt;-&gt; Result&lt;(), std::num::ParseIntError&gt;&gt;&gt; &lt;&lt;.map(|l| l.parse::&lt;u32&gt;()?)@1#red&gt;&gt; &lt;&lt;let n = l.parse::&lt;u32&gt;()?;#green&gt;&gt; &lt;&lt;.sum::&lt;Result&lt;u32, _&gt;&gt;()?;#green&gt;&gt; &lt;&lt;removing the ? and using map on the Result&gt;&gt; &lt;&lt;don&apos;t even need the explicit type parameter to sum&gt;&gt; &lt;&lt;l.parse::&lt;u32&gt;().map(|n| {#green&gt;&gt; &lt;&lt;nested closures&gt;&gt; &lt;&lt;extract the math to another function&gt;&gt; &lt;&lt;-&gt; Result&lt;u32, std::num::ParseIntError&gt;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/frb3dr/using_the_question_mark_operator_in_a_block/" id="500">
        <title>Using the question mark `?` operator in a block expression : rust#__#&lt;&lt;let current_ref = move || -&gt; Option&lt;_&gt; {#blue&gt;&gt; &lt;&lt;}();#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/unstable-book/language-features/try-blocks.html" id="501">
        <title>try_blocks - The Rust Unstable Book</title>
      </bookmark>
      <bookmark href="https://docs.rs/try-block/latest/try_block/macro.try_block.html" id="502">
        <title>try_block::try_block - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ops/trait.Try.html" id="1157">
        <title>Try in core::ops - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/nomicon/exotic-sizes.html" id="1158">
        <title>Exotically Sized Types - The Rustonomicon#__#&lt;&lt;the only properly supported way to create a custom DST&gt;&gt; &lt;&lt;generic and performing an unsizing coercion:&gt;&gt; &lt;&lt;let dynamic: &amp;MySuperSliceable&lt;[u8]&gt; = &amp;sized;#green&gt;&gt; &lt;&lt;unsafe code must be careful about the consequence of types with no size#red&gt;&gt; &lt;&lt;references to ZSTs (including empty slices), just like all other references, must be non-null and suitably aligned#red&gt;&gt; &lt;&lt;enum Void {} // No variants = EMPTY#green&gt;&gt; &lt;&lt;cannot even be instantiated&gt;&gt; &lt;&lt;Result&lt;T, Void&gt;#green&gt;&gt; &lt;&lt;infallible&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="147">
      <title>Self referrential</title>
      <bookmark href="https://lib.rs/crates/self_cell" id="503">
        <title>self_cell — Rust library // Lib.rs#__#&lt;&lt;no_std#green&gt;&gt; &lt;&lt;no proc-macros#green&gt;&gt; &lt;&lt;self contained unsafe&gt;&gt; &lt;&lt;stable Rust@2#green&gt;&gt; &lt;&lt;miri tested#green&gt;&gt; &lt;&lt;review from experienced#green&gt;&gt; &lt;&lt;0 dependencies#green&gt;&gt; &lt;&lt;heap#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/selfie" id="504">
        <title>selfie - crates.io: Rust Package Registry#__#&lt;&lt;Macro-free#green&gt;&gt; &lt;&lt;allocation-free@1#green&gt;&gt; &lt;&lt;#![no_std]#green&gt;&gt; &lt;&lt;not use neither proc-macros nor macros#green&gt;&gt; &lt;&lt;IDE-friendly syntax#green&gt;&gt; &lt;&lt;doesn&apos;t get in the way of more complex scenarios#green&gt;&gt; &lt;&lt;small#green&gt;&gt; &lt;&lt;extensively tested under MIRI#green&gt;&gt; &lt;&lt;Referential types can be moved&gt;&gt; &lt;&lt;potentially allocating#red&gt;&gt; &lt;&lt;Some boilerplate needed#green&gt;&gt; &lt;&lt;complexity is pushed directly onto the user#green&gt;&gt; &lt;&lt;Pin-able#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/typed-arena/2.0.1/typed_arena/" id="505">
        <title>typed_arena - Rust#__#&lt;&lt;fast but limited type of allocator&gt;&gt; &lt;&lt;values of a single type&gt;&gt; &lt;&lt;into_vec() to recover ownership of allocated objects&gt;&gt; &lt;&lt;All allocated objects get the same lifetime&gt;&gt; &lt;&lt;safely create cycles between them#green&gt;&gt; &lt;&lt;other: Cell&lt;Option&lt;&amp;&apos;a CycleParticipant&lt;&apos;a&gt;&gt;&gt;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/ouroboros/latest/ouroboros/" id="506">
        <title>ouroboros - Rust</title>
      </bookmark>
    </folder>
    <folder id="148">
      <title>State Machines</title>
      <bookmark href="https://github.com/rustype/typestate-rs/blob/main/articles/sblp21.pdf" id="507">
        <title>typestate-rs/sblp21.pdf at main · rustype/typestate-rs</title>
      </bookmark>
      <bookmark href="https://github.com/mx00s/typestate-rs-examples/blob/main/examples/README.md" id="508">
        <title>typestate-rs-examples/README.md at main · mx00s/typestate-rs-examples</title>
      </bookmark>
      <bookmark href="https://github.com/mx00s/typestate-rs-examples/blob/main/examples/door.rs" id="509">
        <title>typestate-rs-examples/door.rs at main · mx00s/typestate-rs-examples</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/statig" id="510">
        <title>statig - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://docs.google.com/document/d/1JfcFBFRKxOj04ak10gwW-LX9YbfO8L52pIAzk3nxh7c/edit#heading=h.8u62nka8shmc" id="511">
        <title>Ergonomic State Machines - Notes from Rustconf Unconf 2022 - Google Docs</title>
      </bookmark>
      <bookmark href="https://github.com/nitnelave/ProtEnc" id="512">
        <title>nitnelave/ProtEnc: A C++ typestate library#__#&lt;&lt;C++#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="149">
      <title>Wrap/New Type/Coerce</title>
      <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/conversion/from_into.html" id="513">
        <title>From and Into - Rust By Example#__#&lt;&lt;Into trait is simply the reciprocal of the From#green&gt;&gt; &lt;&lt;if you have implemented the From trait for your type, Into will call it when necessary&gt;&gt; &lt;&lt;Using the Into trait will typically require specification of the type to convert into as the compiler is unable to determine this most of the time.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch15-02-deref.html" id="514">
        <title>Treating Smart Pointers Like Regular References with the Deref Trait - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://github.com/Kobzol/rust-delegate/blob/main/README.md" id="515">
        <title>rust-delegate/README.md at main · Kobzol/rust-delegate</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=497025" id="516">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ops/trait.Deref.html" id="517">
        <title>core::ops::Deref - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ops/trait.DerefMut.html" id="518">
        <title>DerefMut in core::ops - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/convert/trait.From.html" id="519">
        <title>From in core::convert - Rust#__#&lt;&lt;always prefer implementing From#green&gt;&gt; &lt;&lt;Only implement Into#red&gt;&gt; &lt;&lt;targeting a version prior to Rust 1.41#red&gt;&gt; &lt;&lt;and converting to a type outside the current crate.#red&gt;&gt; &lt;&lt;over Into#red&gt;&gt; &lt;&lt;Prefer using Into#green&gt;&gt; &lt;&lt;over using From#red&gt;&gt; &lt;&lt;when specifying trait bounds on a generic function.#blue&gt;&gt; &lt;&lt;types that directly implement Into can be used as arguments as well&gt;&gt; &lt;&lt;also very useful when performing error handling&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/convert/trait.Into.html" id="520">
        <title>std::convert::Into - Rust#__#&lt;&lt;avoid implementing Into#red&gt;&gt; &lt;&lt;implement From instead#green&gt;&gt; &lt;&lt;Implementing From automatically provides one with an implementation of Into#green&gt;&gt; &lt;&lt;blanket implementation in the standard library#blue&gt;&gt; &lt;&lt;Prefer using Into#green&gt;&gt; &lt;&lt;over From#red&gt;&gt; &lt;&lt;when specifying trait bounds on a generic#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=311713" id="521">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://lib.rs/crates/ref-cast" id="522">
        <title>ref-cast — Rust library // Lib.rs#__#&lt;&lt;#[repr(transparent)]#green&gt;&gt; &lt;&lt;#[derive(RefCast)]#green&gt;&gt; &lt;&lt;#[repr(transparent)] is required#red&gt;&gt; &lt;&lt;Index trait in Rust&gt;&gt; &lt;&lt;output is forced to be borrowed#red&gt;&gt; &lt;&lt;from the type being indexed&gt;&gt; &lt;&lt;multidimensional array&gt;&gt; &lt;&lt;represented in a flat&gt;&gt; &lt;&lt;but we want to expose an indexing#green&gt;&gt; &lt;&lt;column-major order#green&gt;&gt; &lt;&lt;more intuitive&gt;&gt; &lt;&lt;something like the following&gt;&gt; &lt;&lt;not going to work#red&gt;&gt; &lt;&lt;borrowed from self#green&gt;&gt; &lt;&lt;Column is not a reference#red&gt;&gt; &lt;&lt;#[derive(RefCast)]@1&gt;&gt; &lt;&lt;#[repr(transparent)]@2&gt;&gt; &lt;&lt;struct Strided([Tile]);#green&gt;&gt; &lt;&lt;type Output = Strided;#green&gt;&gt; &lt;&lt;index(&amp;self, x: usize) -&gt; &amp;Self::Output#green&gt;&gt; &lt;&lt;Strided::ref_cast(&amp;self.storage[x..])#green&gt;&gt; &lt;&lt;impl Index&lt;usize&gt; for TileMap@1#green&gt;&gt; &lt;&lt;impl Index&lt;usize&gt; for Strided#green&gt;&gt; &lt;&lt;type Output = Tile;#green&gt;&gt; &lt;&lt;index(&amp;self, y: usize) -&gt; &amp;Self::Output#green&gt;&gt; &lt;&lt;&amp;self.0[y * MAP_WIDTH]#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/ref-cast/latest/ref_cast/attr.ref_cast_custom.html" id="1159">
        <title>ref_cast_custom in ref_cast - Rust</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=664766" id="1160">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/std/primitive.char.html" id="1161">
        <title>char - Rust#__#&lt;&lt;all chars are valid u32s, and can be cast#green&gt;&gt; &lt;&lt;However, the reverse is not true: not all valid u32s are valid chars#red&gt;&gt; &lt;&lt;from_u32() will return None&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/derive_more/latest/derive_more/" id="1162">
        <title>derive_more - Rust#__#&lt;&lt;use derive_more::{Add, Display, From, Into};&gt;&gt; &lt;&lt;enum MyEnum&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/roman-kashitsyn/phantom-newtype" id="1163">
        <title>roman-kashitsyn/phantom-newtype: Lightweight Rust newtypes.#__#https://crates.io/crates/phantom-newtype&lt;&lt;phantom_newtype&gt;&gt; &lt;&lt;without macros#green&gt;&gt; &lt;&lt;not a replacement for the newtype#red&gt;&gt; &lt;&lt;CentUnit here is just a marker#green&gt;&gt; &lt;&lt;never be constructed#red&gt;&gt; &lt;&lt;allows us&gt;&gt; &lt;&lt;forge a new type#green&gt;&gt; &lt;&lt;of amounts#green&gt;&gt; &lt;&lt;not a replacement@1#red&gt;&gt; &lt;&lt;for a powerful units library&gt;&gt; &lt;&lt;Instants&gt;&gt; &lt;&lt;time with respect to some point of reference&gt;&gt; &lt;&lt;year of birth is instant&gt;&gt; &lt;&lt;age is amount#red&gt;&gt; &lt;&lt;use the same#green&gt;&gt; &lt;&lt;marker type#green&gt;&gt; &lt;&lt;type YearAD&gt;&gt; &lt;&lt;Instant&lt;YearUnit#green&gt;&gt; &lt;&lt;Any type can be used as a marker#green&gt;&gt; &lt;&lt;not necessary to always define#red&gt;&gt; &lt;&lt;fresh empty types#red&gt;&gt; &lt;&lt;Tags used in archetypes&gt;&gt; &lt;&lt;useful in generic code#green&gt;&gt; &lt;&lt;EntityType#green&gt;&gt; &lt;&lt;id: Id&lt;EntityType, u64&gt;#green&gt;&gt; &lt;&lt;-&gt; EntityType&gt;&gt; &lt;&lt;little boilerplate#green&gt;&gt; &lt;&lt;Reusable semantics#green&gt;&gt; &lt;&lt;No macros&gt;&gt; &lt;&lt;messing up your namespace#red&gt;&gt; &lt;&lt;Instant&lt;T, R&gt; - Instant&lt;T, R&gt;&gt;&gt; &lt;&lt;Amount&lt;Unit, &lt;R as Sub&gt;::Output&gt;#green&gt;&gt; &lt;&lt;impossible to implement additional traits#red&gt;&gt; &lt;&lt;impossible to customize implementations of traits#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.worthe-it.co.za/blog/2020-10-31-newtype-pattern-in-rust.html" id="1164">
        <title>The Newtype Pattern in Rust#__#&lt;&lt;FromStr#green&gt;&gt; &lt;&lt;implement From&lt;T&gt;&gt;&gt; &lt;&lt;Derive More uses procedural macros&gt;&gt; &lt;&lt;StructOpt uses FromStr to parse command line arguments#green&gt;&gt; &lt;&lt;complicated. Serde has a &quot;transparent&quot; option for Newtypes&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/typeables" id="1165">
        <title>typeables - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/uom" id="1166">
        <title>uom - crates.io: Rust Package Registry#__#&lt;&lt;automatic#green&gt;&gt; &lt;&lt;zero-cost#green&gt;&gt; &lt;&lt;dimensional analysis#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gist.github.com/rust-play/959b519914dfe0b92deace425e497f06" id="1167">
        <title>Code shared from the Rust Playground#__#https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=959b519914dfe0b92deace425e497f06&lt;&lt;Rust Playground&gt;&gt; &lt;&lt;impl From&lt;MyLibErr&gt; for OtherLibErr&gt;&gt; &lt;&lt;fn boo() -&gt; Result&lt;(), MyLibErr&gt;&gt;&gt; &lt;&lt;fn test() -&gt; Result&lt;(), OtherLibErr&gt;&gt;&gt; &lt;&lt;boo()?;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://dev.to/zhanghandong/rust-concept-clarification-deref-vs-asref-vs-borrow-vs-cow-13g6" id="1168">
        <title>Rust Concept Clarification: Deref vs AsRef vs Borrow vs Cow - DEV Community</title>
      </bookmark>
    </folder>
    <folder id="1421">
      <title>zOther</title>
      <bookmark href="https://github.com/rust-lang/rust/issues/32770" id="1539">
        <title>Private enum variants · Issue #32770 · rust-lang/rust#__#&lt;&lt;std::io::ErrorKind enum has this variant:#green&gt;&gt; &lt;&lt;#[unstable#green&gt;&gt; &lt;&lt;#[doc(hidden)]#green&gt;&gt; &lt;&lt;__Nonexhaustive,#green&gt;&gt; &lt;&lt;to force users to have a catch-all _ arm when matching on an ErrorKind#green&gt;&gt; &lt;&lt;so that more variants can be added in the future.#green&gt;&gt; &lt;&lt;future-proofing#green&gt;&gt; &lt;&lt;But to achieve it, ErrorKind abuses the stability mechanism with #[unstable], which can only be used in the standard library#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rfcs/pull/757" id="1540">
        <title>Extensible enums by nikomatsakis · Pull Request #757 · rust-lang/rfcs#__#&lt;&lt;Destructuring outside the module is still possible with a wildcard#green&gt;&gt; &lt;&lt;as this won&apos;t break if a private field is added:#red&gt;&gt; &lt;&lt;let Foo { value: v, .. } = Foo::new();#green&gt;&gt; &lt;&lt;only with the opt-in has the author stated that no private fields will ever be added#red&gt;&gt; &lt;&lt;and is it safe to destructure without the wildcard#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch05-01-defining-structs.html" id="1541">
        <title>Defining and Instantiating Structs - The Rust Programming Language#__#&lt;&lt;syntax .. specifies that the remaining fields#green&gt;&gt; &lt;&lt;black and origin values are different types, because they’re instances of different tuple structs#red&gt;&gt; &lt;&lt;Each struct you define is its own type, even though the fields within the struct have the same types.#red&gt;&gt;&lt;&lt;Creating Instances from Other Instances#green&gt;&gt; &lt;&lt;Struct Update Syntax#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html" id="1542">
        <title>Sized in core::marker - Rust#__#&lt;&lt;?Sized can be used to remove this bound if it’s not appropriate#green&gt;&gt; &lt;&lt;one exception is the implicit Self type of a trait#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://riptutorial.com/rust/example/22917/inheritance-with-traits" id="1543">
        <title>Rust - Inheritance with Traits | rust Tutorial#__#&lt;&lt;implement Speak for Animal:#green&gt;&gt; &lt;&lt;impl&lt;T&gt; Speaks for T where T: Animal {#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/ayvdfa/generic_constructor_for_enum/" id="1544">
        <title>Generic constructor for enum : rust#__#&lt;&lt;pub fn new&lt;F&gt;(constructor: F) -&gt; Self where F: Fn(Option&lt;String&gt;)#green&gt;&gt; &lt;&lt;let a = Z::new(Z::A);#green&gt;&gt; &lt;&lt;let b = Z::new(Z::B);#green&gt;&gt; &lt;&lt;enum constructors are bona fide function pointers#green&gt;&gt; &lt;&lt;problem with this approach is that all the constructors must have the same type#red&gt;&gt; &lt;&lt;implement From&lt;T&gt; for each type#green&gt;&gt; &lt;&lt;could implement the Default#green&gt;&gt; trait without an instance, and its method doesn&apos;t have &amp;self parameter. Also at: https://gist.github.com/rust-play/f8cd566d7baaad4ce9e2c47a70a514f5&lt;&lt;simplify it@1&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/num/struct.NonZeroUsize.html" id="1545">
        <title>std::num::NonZeroUsize - Rust#__#&lt;&lt;memory layout optimization. For example, Option&lt;NonZeroUsize&gt; is the same size as usize#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/hello/print/print_debug.html" id="1546">
        <title>Debug - Rust By Example#__#&lt;&lt;printable with {:?}&gt;&gt; &lt;&lt;&quot;pretty printing&quot; with {:#?}#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/nomicon/send-and-sync.html" id="1547">
        <title>Send and Sync - The Rustonomicon#__#alternative way is with PhantomData - see another bookmark&lt;&lt;unimplement Send and Sync:&gt;&gt; &lt;&lt;#![feature(negative_impls)]#green&gt;&gt; &lt;&lt;impl !Send for SpecialThreadToken {}#green&gt;&gt; &lt;&lt;impl !Sync for SpecialThreadToken {}#green&gt;&gt; &lt;&lt;Only types that are ascribed special meaning by other unsafe code#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://mmapped.blog/posts/15-when-rust-hurts.html" id="1548">
        <title>When Rust hurts#__#&lt;&lt;issues are not defects of the compiler&gt;&gt; &lt;&lt;Rust closures do that named functions cannot&gt;&gt; &lt;&lt;capture only the fields they use&gt;&gt; &lt;&lt;not treat our new type as a strong alias#red&gt;&gt; &lt;&lt;cannot safely transform Vec&lt;Hex&gt; to Vec&lt;Vec&lt;u8&gt;&gt; &lt;&lt;without reallocating the outer vector&gt;&gt; &lt;&lt;with lifetime parameters views&gt;&gt; &lt;&lt;regular output types bundles&gt;&gt; &lt;&lt;lifetime parameter exists to support zero-copy deserialization#green&gt;&gt; &lt;&lt;database with its snapshot#red&gt;&gt; &lt;&lt;“sibling pointers”#red&gt;&gt; &lt;&lt;Arc&lt;Db&gt;&gt; &lt;&lt;moving Arc&lt;Db&gt; will not change the location of the Db&gt;&gt; &lt;&lt;but there is no way to communicate#red&gt;&gt; &lt;&lt;order of its field destruction&gt;&gt; &lt;&lt;boxing when we define recursive&gt;&gt; &lt;&lt;slicing here: `x[..]`&gt;&gt; &lt;&lt;unbox the strings inside of the vector&gt;&gt; &lt;&lt;x.iter().map(|s| s.as_str())&gt;&gt; &lt;&lt;derives&gt;&gt; &lt;&lt;traits we want to use only in tests#red&gt;&gt; &lt;&lt;From and Into#red&gt;&gt; &lt;&lt;xxx-types packages that start small&gt;&gt; &lt;&lt;bottlenecks in the compilation#red&gt;&gt; &lt;&lt;Splitting&gt;&gt; &lt;&lt;daunting&gt;&gt; &lt;&lt;webs of type conversions#red&gt;&gt; &lt;&lt;decomposing&gt;&gt; &lt;&lt;shallow dependencies&gt;&gt; &lt;&lt;re-entrant (and Rust&apos;s locks are not#red&gt;&gt; &lt;&lt;large and live far apart#red&gt;&gt; &lt;&lt;rare execution path#red&gt;&gt; &lt;&lt;actor@1#green&gt;&gt; &lt;&lt;function&apos;s type signature&gt;&gt; &lt;&lt;Asynchronous#red&gt;&gt; &lt;&lt;runtime object in advance#red&gt;&gt; &lt;&lt;macro&gt;&gt; &lt;&lt;Explicitly passing&gt;&gt; &lt;&lt;purple#red&gt;&gt; &lt;&lt;read files, join threads#red&gt;&gt; &lt;&lt;multiple teams sandwich sync and async#red&gt;&gt; &lt;&lt;bug silos#red&gt;&gt; &lt;&lt;waiting for enough system load#red&gt;&gt; &lt;&lt;green threads, such as Haskell and Go,#green&gt;&gt; &lt;&lt;eliminate the proliferation of function colors&gt;&gt; &lt;&lt;Building a concurrent program from independent components#green&gt;&gt; &lt;&lt;lack of implicit conversions#green&gt;&gt; &lt;&lt;holistic approach to error handl#green&gt;&gt; &lt;&lt;accidental complexity, especially when I care little about performance#red&gt;&gt; &lt;&lt;for example, in test#red&gt;&gt; &lt;&lt;but we want our production code to be independent of the proptest package#red&gt;&gt; &lt;&lt;write proptest strategies manual#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/112hmga/blog_post_when_rust_hurts/" id="1802">
        <title>Reddit - Dive into anything#__#&lt;&lt;for strings it makes more sense to define FromStr so you can use the parse() method on str.#blue&gt;&gt; &lt;&lt;if Struct X takes ownership of the string, then cloning#red&gt;&gt; &lt;&lt;costs that Haskell imposes (or takes on itself) to make every function green#red&gt;&gt; &lt;&lt;#[fundamental]#green&gt;&gt; &lt;&lt;for generic types it can help in select cases&gt;&gt; &lt;&lt;frontloading the problems, when they are still relatively easy#blue&gt;&gt; &lt;&lt;bypass the orphan rule#blue&gt;&gt; &lt;&lt;risk that you would impose, likely silently, on your downstream dependencies#red&gt;&gt; &lt;&lt;ecosystem is its strongest selling point#blue&gt;&gt; &lt;&lt;cannot safely transform Vec&lt;Hex&gt; to Vec&lt;Vec&lt;u8&gt;&gt; &lt;&lt;Note that it says safely.&gt;&gt; &lt;&lt;can absolutely do that soundly with unsafe code (if you put #[repr(transparent)] on the definition of Hex)#blue&gt;&gt; &lt;&lt;not being able to do this in full generality is incredibly important#blue&gt;&gt; &lt;&lt;struct Even(u32);#blue&gt;&gt; &lt;&lt;can&apos;t just turn a &amp;mut Even into a &amp;mut u32#red&gt;&gt; &lt;&lt;violate the invariants#red&gt;&gt; &lt;&lt;ref-cast&gt;&gt; &lt;&lt;not use unsafe for that#red&gt;&gt; &lt;&lt;instead define more types#green&gt;&gt; &lt;&lt;Stepanov&apos;s book&gt;&gt; &lt;&lt;elementsofprogramming.com&gt;&gt; &lt;&lt;&quot;&amp;mut self can&apos;t be borrowed more than once&quot;#red&gt;&gt; &lt;&lt;make a static method that takes the mutable components as arguments#blue&gt;&gt; &lt;&lt;Often you don&apos;t need to split the struct itself up, but rather how it&apos;s borrowed#blue&gt;&gt; &lt;&lt;fn bits(&amp;mut self) -&gt; ((&amp;mut i32, &amp;mut i32), &amp;mut i32)#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://guiand.xyz/blog-posts/compile-time-unions.html" id="1803">
        <title>Implementing specialization in Rust by matching marker types#__#&lt;&lt;wrapping an enum#red&gt;&gt; &lt;&lt;hot path&gt;&gt; &lt;&lt;every last branch instruction is a potential performance pitfall#red&gt;&gt; &lt;&lt;Traits would definitely be the idiomatic#green&gt;&gt; &lt;&lt;But using a tymap&gt;&gt; &lt;&lt;enum&apos;s exhaustiveness#green&gt;&gt; &lt;&lt;code monomorphization#green&gt;&gt; &lt;&lt;tymap can be stored in structs&gt;&gt; &lt;&lt;without any type erasure&gt;&gt; &lt;&lt;macros, enums, and a little unsafe&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/Kelerchian/assign/blob/master/README.md" id="1804">
        <title>assign/README.md at master · Kelerchian/assign#__#&lt;&lt;document a sequence of mutations&gt;&gt; &lt;&lt;instance fields&gt;&gt; &lt;&lt;skip defining fields that has default&gt;&gt; &lt;&lt;when a dependency is exposing an non-exhaustive struct#blue&gt;&gt; &lt;&lt;avoiding the risk inserting code#red&gt;&gt; &lt;&lt;between the line that defines a field and the line that defines the other#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-unofficial.github.io/patterns/functional/generics-type-classes.html" id="1805">
        <title>Generics as Type Classes - Rust Design Patterns#__#&lt;&lt;Vec&lt;isize&gt; and Vec&lt;char&gt; are two different types&gt;&gt; &lt;&lt;different types can have different impl blocks&gt;&gt; &lt;&lt;more usable&gt;&gt; &lt;&lt;while remaining safe#green&gt;&gt; &lt;&lt;current struct&gt;&gt; &lt;&lt;leaves the protocol decision until runtime#red&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="38">
    <title>zOther</title>
    <bookmark href="https://github.com/rust-lang/rfcs/issues/943" id="150">
      <title>Wishlist: marker for open-ended enums · Issue #943 · rust-lang/rfcs#__#&lt;&lt;#[non_exhaustive] attribute that can be added to enums to indicate that matches outside the current crate must include a wildcard pattern.#green&gt;&gt; &lt;&lt;We&apos;d remove this restriction for inside the crate#green&gt;&gt; &lt;&lt;if the enum is changed, it&apos;s reasonable for the crate author to update code elsewhere inside the same crate#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://lib.rs/crates/shadow-clone" id="151">
      <title>shadow-clone — Rust library // Lib.rs</title>
    </bookmark>
    <bookmark href="https://gitlab.com/rust-saar/material/-/tree/main/2021_02_09" id="152">
      <title>2021_02_09 · main · Rust-Saar / Material · GitLab</title>
    </bookmark>
    <bookmark href="https://cheats.rs/" id="153">
      <title>Rust Language Cheat Sheet#__#&lt;&lt;const X: T = T();#green&gt;&gt; &lt;&lt;S { ..s }#green&gt;&gt; &lt;&lt;esp. useful with Default.#green&gt;&gt; &lt;&lt;S { 0: x }#green&gt;&gt; &lt;&lt;(x,)#green&gt;&gt; &lt;&lt;Single-element tuple#green&gt;&gt; &lt;&lt;a..b@1#green&gt;&gt; &lt;&lt;Right-exclusive range#green&gt;&gt; &lt;&lt;a..=b#green&gt;&gt; &lt;&lt;Inclusive range#green&gt;&gt; &lt;&lt;let ref r = s;#green&gt;&gt; &lt;&lt;Equivalent to let r = &amp;s.#green&gt;&gt; &lt;&lt;const fn f() {}#green&gt;&gt; &lt;&lt;Constant fn usable at compile time#green&gt;&gt; &lt;&lt;async fn f() -&gt; S {}#green&gt;&gt; &lt;&lt;f return an impl Future&lt;Output=S&gt;#green&gt;&gt; &lt;&lt;move |x| x + y#green&gt;&gt; &lt;&lt;Closure taking ownership#green&gt;&gt; &lt;&lt;return || true#green&gt;&gt; &lt;&lt;Closures sometimes look like logical ORs (here: return a closure).#green&gt;&gt; &lt;&lt;S&lt;T&gt; where u8: R&lt;T&gt;#green&gt;&gt; &lt;&lt;*r = s;#green&gt;&gt; &lt;&lt;move or copy s to target memory#green&gt;&gt; &lt;&lt;s = *r;#red&gt;&gt; &lt;&lt;Won&apos;t work 🛑 if *r is not Copy#red&gt;&gt; &lt;&lt;fn f() where Self: R;#green&gt;&gt; &lt;&lt;In trait T {}, make f accessible only on types known to also impl R.#green&gt;&gt; &lt;&lt;Esp. useful w. default methods#green&gt;&gt; &lt;&lt;#[code]&gt;&gt; &lt;&lt;#[cold]#green&gt;&gt; &lt;&lt;#[must_use = &quot;msg&quot;]#green&gt;&gt; &lt;&lt;#[doc(hidden)]#green&gt;&gt; &lt;&lt;#[cfg(debug_assertions)]&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://createlang.rs/" id="154">
      <title>Introduction - Create Your Own Programming Language with Rust</title>
    </bookmark>
    <bookmark href="https://github.com/rust-unofficial/patterns/blob/main/anti_patterns/deref.md" id="155">
      <title>patterns/deref.md at main · rust-unofficial/patterns#__#&lt;&lt;Abuse the Deref trait to emulate inheritance#red&gt;&gt; &lt;&lt;reuse methods#red&gt;&gt; &lt;&lt;surprising idiom#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=906080" id="156">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://rust-unofficial.github.io/patterns/anti_patterns/deref.html" id="157">
      <title>Deref Polymorphism - Rust Design Patterns</title>
    </bookmark>
    <bookmark href="https://rust-unofficial.github.io/patterns/anti_patterns/index.html" id="158">
      <title>Anti-patterns - Rust Design Patterns</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=4954" id="159">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/pacak/schemes" id="1025">
      <title>pacak/schemes: Recursion schemes in Rust</title>
    </bookmark>
    <bookmark href="https://maartenfokkinga.github.io/utwente/mmf91m.pdf" id="1026">
      <title>fpca.dvi - mmf91m.pdf</title>
    </bookmark>
    <bookmark href="https://geeklaunch.io/blog/rust-pro-tips-collection/" id="1027">
      <title>Rust Pro Tips (collection) - GeekLaunch#__#&lt;&lt;slice from a reference&gt;&gt; &lt;&lt;std::array::from_ref&gt;&gt; &lt;&lt;[workspace.dependencies]@1&gt;&gt; &lt;&lt;```compile_fail,E0308&gt;&gt; &lt;&lt;a public trait requires the implementation of a private trait&gt;&gt; &lt;&lt;HashMaps can be built from iterators of key-value tuples&gt;&gt; &lt;&lt;Only reads? Fn + FnMut + FnOnce&gt;&gt; &lt;&lt;No captures at all? Function pointer coercion, too&gt;&gt; &lt;&lt;#[should_panic = &quot;&gt;&gt; &lt;&lt;substring&gt;&gt; &lt;&lt;if let User { age: a @ ..=35, .. } = u&gt;&gt; &lt;&lt;longer names for lifetimes&gt;&gt; &lt;&lt;generic parameters&gt;&gt; &lt;&lt;Clippy lints in a workspace&gt;&gt; &lt;&lt;.cargo/config.toml&gt;&gt; &lt;&lt;[target.&apos;cfg(all())&apos;]&gt;&gt; &lt;&lt;rustflags = [&gt;&gt; &lt;&lt;&quot;-Wclippy::large_digit_groups&quot;,&gt;&gt; &lt;&lt;Backticks are optional&gt;&gt; &lt;&lt;pub(self&gt;&gt; &lt;&lt;pub(in &lt;path&gt;)&gt;&gt; &lt;&lt;Reuse code in build.rs&gt;&gt; &lt;&lt;#[path = &quot;./src/parse.rs&quot;]&gt;&gt; &lt;&lt;mod parse;&gt;&gt; &lt;&lt;Feature flags work in build.rs too&gt;&gt; &lt;&lt;#[cfg(feature = &quot;parser&quot;)]&gt;&gt; &lt;&lt;Additional trait bounds per-function&gt;&gt; &lt;&lt;trait MyTrait&lt;T: Debug&gt; {&gt;&gt; &lt;&lt;fn print(&amp;self) where T: Display {&gt;&gt; &lt;&lt;traits or impl blocks&gt;&gt; &lt;&lt;impl AsRef&lt;[u32]&gt;&gt;&gt;</title>
    </bookmark>
  </folder>
</folder>
<folder id="6">
  <title>Fast Dev</title>
  <folder id="39">
    <title>Cargo, Depl., Release Manag., CI/CD, Devops</title>
    <folder id="160">
      <title>cargo-release</title>
      <bookmark href="https://github.com/oxidecomputer/dropshot/blob/main/dropshot_endpoint/release.toml" id="523">
        <title>dropshot/release.toml at main · oxidecomputer/dropshot#__#&lt;&lt;Overrides the cargo-release config file from the root&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/crate/cargo-release/latest" id="524">
        <title>cargo-release 0.20.5 - Docs.rs</title>
      </bookmark>
      <bookmark href="https://github.com/crate-ci/cargo-release/blob/master/docs/reference.md" id="525">
        <title>cargo-release/reference.md at master · crate-ci/cargo-release</title>
      </bookmark>
      <bookmark href="https://github.com/crate-ci/cargo-release/blob/master/docs/faq.md" id="526">
        <title>cargo-release/faq.md at master · crate-ci/cargo-release</title>
      </bookmark>
      <bookmark href="https://github.com/oxidecomputer/dropshot/blob/main/release.toml" id="527">
        <title>dropshot/release.toml at main · oxidecomputer/dropshot</title>
      </bookmark>
    </folder>
    <folder id="161">
      <title>Conditional Compilation</title>
      <bookmark href="https://web.mit.edu/rust-lang_v1.25/arch/amd64_ubuntu1404/share/doc/rust/html/book/first-edition/conditional-compilation.html" id="528">
        <title>Conditional Compilation - The Rust Programming Language#__#Book&lt;&lt;Effective Rust&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/conditional-compilation.html" id="529">
        <title>Conditional compilation - The Rust Reference#__#&lt;&lt;path = &quot;linux.rs&quot;)]#green&gt;&gt; &lt;&lt;mod os;#green&gt;&gt; &lt;&lt;module will either be found at linux.rs#green&gt;&gt; &lt;&lt;cfg_attr can expand to another#green&gt;&gt; &lt;&lt;#[cfg_attr(target_os = &quot;linux&quot;, cfg_attr(feature = &quot;multithreaded&quot;, some_other_attribute))]#green&gt;&gt; &lt;&lt;equivalent to #[cfg_attr(all(target_os = &quot;linux&quot;, feature =&quot;multithreaded&quot;), some_other_attribute)]&gt;&gt; &lt;&lt;debug_assertions#green&gt;&gt; &lt;&lt;target_pointer_width#green&gt;&gt; &lt;&lt;target_env#red&gt;&gt; &lt;&lt;only defined as not the empty-string when actually needed for disambiguation&gt;&gt; &lt;&lt;on many GNU platforms, this value will be empty#red&gt;&gt; &lt;&lt;similar to the fourth element of the platform&apos;s target triple&gt;&gt; &lt;&lt;embedded ABIs such as gnueabihf will simply define target_env as &quot;gnu&quot;#red&gt;&gt; &lt;&lt;target_family&gt;&gt; &lt;&lt;unix and windows@1&gt;&gt; &lt;&lt;Keys are not unique#red&gt;&gt; &lt;&lt;feature = &quot;std&quot; and feature = &quot;serde&quot; can be set at the same time#red&gt;&gt; &lt;&lt;more values may be added in the future.#green&gt;&gt; &lt;&lt;panic strategy#blue&gt;&gt; &lt;&lt;#[cfg(panic = &quot;unwind&quot;)]#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/cfg-if/latest/cfg_if/" id="530">
        <title>cfg_if - Rust</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/rustversion" id="531">
        <title>dtolnay/rustversion: Conditional compilation according to rustc compiler version#__#&lt;&lt;rustversion::stable&gt;&gt; &lt;&lt;that stable release and any later&gt;&gt; &lt;&lt;including beta and nightly&gt;&gt; &lt;&lt;that nightly and all newer&gt;&gt; &lt;&lt;rustversion::attr(selector, attribute)&gt;&gt; &lt;&lt;repr(packed)&gt;&gt; &lt;&lt;const impls&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/environment-variables.html" id="532">
        <title>Environment Variables - The Cargo Book#__#&lt;&lt;minimum Rust version supported by the package#green&gt;&gt; &lt;&lt;not the current Rust version#red&gt;&gt; &lt;&lt;Only set for binaries or binary examples&gt;&gt; &lt;&lt;if the package being built is primary#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust/pull/115416" id="533">
        <title>Add the `cfg_match!` macro by c410-f3r · Pull Request #115416 · rust-lang/rust</title>
      </bookmark>
    </folder>
    <folder id="162">
      <title>Continuous Integration</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/r5munx/checking_unused_dependencies_in_a_rust_project/" id="534">
        <title>Checking Unused Dependencies in a Rust Project with Github Actions : rust#__#limited alternative&lt;&lt;#![deny(unused_crate_dependencies)]&gt;&gt; &lt;&lt;action to cache the installed crates#green&gt;&gt; &lt;&lt;not recompile them every time: https://github.com/baptiste0928/cargo-install#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rustup/concepts/profiles.html" id="535">
        <title>Profiles - The rustup book#__#&lt;&lt;in CI#green&gt;&gt;&lt;&lt;rustfmt, and clippy#green&gt;&gt; &lt;&lt;complete profile#red&gt;&gt; &lt;&lt;never be used#red&gt;&gt; &lt;&lt;rustup set profile minimal#green&gt;&gt; &lt;&lt;when installing rustup#green&gt;&gt; &lt;&lt;--profile=&lt;name&gt;#green&gt;&gt; &lt;&lt;rustup component add&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/guide/continuous-integration.html" id="536">
        <title>Continuous Integration - The Cargo Book</title>
      </bookmark>
      <bookmark href="https://bors.tech/" id="537">
        <title>Strict Mode for your Continuous Testing | bors-ng</title>
      </bookmark>
      <bookmark href="https://github.com/Swatinem/rust-cache" id="538">
        <title>Swatinem/rust-cache: A GitHub Action that implements smart caching for rust/cargo projects#__#&lt;&lt;most effective for repositories with a Cargo.lock#green&gt;&gt; &lt;&lt;Library repositories with only a Cargo.toml file have limited benefits#red&gt;&gt; &lt;&lt;Usage with Stable Rust is most effective#green&gt;&gt; &lt;&lt;Using it with Nightly Rust is less effective#red&gt;&gt; &lt;&lt;throw away the cache every day#red&gt;&gt; &lt;&lt;more effective if the dependency / own code ratio is higher#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/pid70f/blog_post_fast_rust_builds/" id="539">
        <title>Blog Post: Fast Rust Builds : rust#__#&lt;&lt;miniserde was 400% faster#green&gt;&gt; &lt;&lt;cargo-sweep can do this kind of garbage collection#green&gt;&gt; &lt;&lt;on Linux#green&gt;&gt; &lt;&lt;Bazel&apos;s rules_rust tools#green&gt;&gt; &lt;&lt;If two separate crates share a dependency, bazel would automatically build the dependency once#green&gt;&gt; &lt;&lt;true for .rs source#green&gt;&gt; &lt;&lt;tracks dependencies for everything from text files#green&gt;&gt; &lt;&lt;Cargo is not going to be the optimal strategy for anything but very small crates#red&gt;&gt; &lt;&lt;easier to enforce the same toolchain across machines so you can actually use a cache#green&gt;&gt; &lt;&lt;on big Rust-only projects, Bazel does seem to parallelize better, to the tune of 30-40%#green&gt;&gt; &lt;&lt;Moving all integration tests to a single package#green&gt;&gt; &lt;&lt;kills compile times at work is native dependencies#red&gt;&gt; &lt;&lt;TensorFlow Lite#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/matklad/cargo-xtask/" id="540">
        <title>matklad/cargo-xtask</title>
      </bookmark>
      <bookmark href="https://github.com/pbzweihander/markdown-toc" id="541">
        <title>pbzweihander/markdown-toc: Table of Contents generator for Markdown. Written in Rust.</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/cargo-run-bin" id="542">
        <title>cargo-run-bin - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://gist.github.com/LukeMathWalker/5ae1107432ce283310c3e601fac915f3" id="543">
        <title>GitHub Actions - Rust setup</title>
      </bookmark>
      <bookmark href="https://www.lpalmieri.com/posts/2020-06-06-zero-to-production-1-setup-toolchain-ides-ci/" id="1169">
        <title>Setup - Toolchain, IDEs, CI | A learning journal</title>
      </bookmark>
      <bookmark href="https://github.com/mindbeam/unbase" id="1170">
        <title>mindbeam/unbase#__#&lt;&lt;.travis.yml&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.lpalmieri.com/posts/2020-11-01-zero-to-production-5-how-to-deploy-a-rust-application/" id="1171">
        <title>Continuous Deployment For Rust Applications | A learning journal#__#&lt;&lt;temporarily disable Trusted Sources to run the migrations from your local#red&gt;&gt; &lt;&lt;easy to use&gt;&gt; &lt;&lt;fairly established&gt;&gt; &lt;&lt;November 2020&gt;&gt; DB: 1GB, 512MB RAM - $7/month&lt;&lt;Digital Ocean, in particular their newly launched App Platform&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/actions-rs/toolchain" id="1172">
        <title>actions-rs/toolchain: 🛠️ GitHub Action for `rustup` commands#__#&lt;&lt;supports toolchain files,&gt;&gt; &lt;&lt;to use toolchain file, you need to remove the input from the workflow file&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/jondot/xtaskops" id="1173">
        <title>jondot/xtaskops: Goodies for working with the xtask concept in Rust</title>
      </bookmark>
      <bookmark href="https://github.com/rusty-ferris-club/rust-starter" id="1174">
        <title>rusty-ferris-club/rust-starter: Rust starter project for building CLI and libraries, with great CI</title>
      </bookmark>
      <bookmark href="https://github.com/andrewbaxter/terrars" id="1175">
        <title>andrewbaxter/terrars: Terraform in Rust</title>
      </bookmark>
    </folder>
    <folder id="163">
      <title>coverage</title>
      <bookmark href="https://doc.rust-lang.org/nightly/rustc/instrument-coverage.html" id="544">
        <title>Instrumentation-based Code Coverage - The rustc book</title>
      </bookmark>
      <bookmark href="https://github.com/taiki-e/cargo-llvm-cov" id="545">
        <title>taiki-e/cargo-llvm-cov: Cargo subcommand to easily use LLVM source-based code coverage (-C instrument-coverage).</title>
      </bookmark>
      <bookmark href="https://github.com/xd009642/tarpaulin" id="546">
        <title>xd009642/tarpaulin: A code coverage tool for Rust projects</title>
      </bookmark>
      <bookmark href="https://github.com/mozilla/cargo-vet?search=1" id="547">
        <title>cargo-vet/ at main · mozilla/cargo-vet</title>
      </bookmark>
    </folder>
    <folder id="164">
      <title>Features &amp; config</title>
      <bookmark href="https://github.com/dtolnay/semver-trick" id="548">
        <title>dtolnay/semver-trick: How to avoid complicated coordinated upgrades</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/specifying-dependencies.html" id="549">
        <title>Specifying Dependencies - The Cargo Book#__#&lt;&lt;not have any operators in it, it is interpreted the same way as if we had specified &quot;^0.1.12&quot;&gt;&gt; &lt;&lt;^0      :=  &gt;=0.0.0, &lt;1.0.0#green&gt;&gt; &lt;&lt;different from SemVer&gt;&gt; &lt;&lt;0.0.x is not considered compatible with any other version#red&gt;&gt; &lt;&lt;^1.2.3  :=  &gt;=1.2.3, &lt;2.0.0#green&gt;&gt; &lt;&lt;^1      :=  &gt;=1.0.0, &lt;2.0.0#red&gt;&gt; &lt;&lt;~1.2.3  := &gt;=1.2.3, &lt;1.3.0#red&gt;&gt; &lt;&lt;not allow bare *#red&gt;&gt; &lt;&lt;Multiple requirements#green&gt;&gt; &lt;&lt;registry other than crates.io, first the registry must be configured in a .cargo/config.toml#red&gt;&gt; &lt;&lt;can combine the git key with the rev, tag, or branch#green&gt;&gt; &lt;&lt;path dependencies which are typically sub-crates that live within one repository#blue&gt;&gt; &lt;&lt;hello_utils = { path = &quot;hello_utils&quot; }#green&gt;&gt; &lt;&lt;dependencies specified with only a path are not permitted on crates.io#red&gt;&gt; &lt;&lt;specify both a registry version and a git or path location#green&gt;&gt; &lt;&lt;split up a library into multiple packages within the same workspace#green&gt;&gt; &lt;&lt;similar to specifying an override&gt;&gt; &lt;&lt;[target.&apos;cfg(target_arch = &quot;x86&quot;)&apos;.dependencies]#green&gt;&gt; &lt;&lt;not, any, and all operators#green&gt;&gt; &lt;&lt;cfg targets are available on your platform, run rustc --print=cfg#green&gt;&gt; &lt;&lt;for another platform, such as 64-bit Windows, run rustc --print=cfg --target=x86_64-pc-windows-msvc#green&gt;&gt; &lt;&lt;cannot use [target.&apos;cfg(feature = &quot;fancy-feature&quot;)&apos;.dependencies] to add dependencies based on optional features#red&gt;&gt; &lt;&lt;[dependencies]@7#green&gt;&gt; &lt;&lt;foo = { version = &quot;1.0&quot;, optional = true }#green&gt;&gt; &lt;&lt;[features]@1#green&gt;&gt; &lt;&lt;fancy-feature = [&quot;foo&quot;, &quot;bar&quot;]#green&gt;&gt; &lt;&lt;same applies to cfg(debug_assertions), cfg(test) and cfg(proc_macro)#red&gt;&gt; &lt;&lt;not work as expected and will always have the default value#red&gt;&gt; &lt;&lt;returned by rustc --print=cfg#blue&gt;&gt; &lt;&lt;[dev-dependencies]@1#blue&gt;&gt; &lt;&lt;multiple versions of a crate#green&gt;&gt; &lt;&lt;optional dependency#green&gt;&gt; &lt;&lt;bar = { version = &quot;0.1&quot;, package = &apos;foo&apos;, optional = true }#green&gt;&gt; &lt;&lt;depending on the crate foo from crates.io#green&gt;&gt; &lt;&lt;but your crate has a bar feature#green&gt;&gt; &lt;&lt;instead of a foo feature#red&gt;&gt; &lt;&lt;= 1.2.3#red&gt;&gt; &lt;&lt;[target.i686-unknown-linux-gnu.dependencies]#green&gt;&gt; &lt;&lt;build-dependencies&gt;&gt; &lt;&lt;[dependencies.awesome]&gt;&gt; &lt;&lt;no way to add dependencies based on these configuration values#red&gt;&gt; &lt;&lt;names of features take after the name of the dependency#blue&gt;&gt; &lt;&lt;not the package name#red&gt;&gt; &lt;&lt;when renamed#red&gt;&gt; &lt;&lt;traverses the file tree#green&gt;&gt; &lt;&lt;find Cargo.toml file for the requested crate#green&gt;&gt; &lt;&lt;regardless of where in the file tree#green&gt;&gt; &lt;&lt;While SemVer says there is no compatibility before 1.0.0#red&gt;&gt; &lt;&lt;Cargo considers 0.x.y to be compatible with 0.x.z, where y ≥ z and x &gt; 0#green&gt;&gt; &lt;&lt;Caret requirements are the default&gt;&gt; &lt;&lt;Leaving off the caret is a simplified equivalent syntax to using caret#blue&gt;&gt; &lt;&lt;version key does not affect which commit#green&gt;&gt; &lt;&lt;when Cargo retrieves the git dependency#green&gt;&gt; &lt;&lt;but Cargo checks the version information in the dependency’s Cargo.toml file against the version key#red&gt;&gt; &lt;&lt;raises an error if the check fails#red&gt;&gt; &lt;&lt;crates.io does not allow packages to be published with dependencies on code published outside of crates.io itself#red&gt;&gt; &lt;&lt;(dev-dependencies are ignored)#green&gt;&gt; &lt;&lt;except for dev-dependencies#green&gt;&gt; &lt;&lt;default-features = false#green&gt;&gt; &lt;&lt;features = [&quot;secure-password&quot;, &quot;civet&quot;]#green&gt;&gt; &lt;&lt;inherited from a workspace#green&gt;&gt; &lt;&lt;with workspace = true#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/features.html" id="550">
        <title>Features - The Cargo Book#__#&lt;&lt;cargo tree -e features&gt;&gt; &lt;&lt;cargo tree -f &quot;{p} {f}&quot;: This is a more#green&gt;&gt; &lt;&lt;cargo tree -e features -i foo#green&gt;&gt; &lt;&lt;invert the tree, showing how features flow into the given package &quot;foo&quot;#green&gt;&gt; &lt;&lt;Features can list other features&gt;&gt; &lt;&lt;ico = [&quot;bmp&quot;, &quot;png&quot;]&gt;&gt; &lt;&lt;dep: syntax is only available starting with Rust 1.60#red&gt;&gt; &lt;&lt;Previous versions can only use the implicit feature name#green&gt;&gt; &lt;&lt;optional = true&gt;&gt; &lt;&lt;By default, this optional dependency implicitly defines a feature&gt;&gt; &lt;&lt;features = [&gt;&gt; &lt;&lt;default-features = false@3&gt;&gt; &lt;&lt;If another dependency includes flate2 without specifying default-features = false#red&gt;&gt; &lt;&lt;then the default features will be enabled#red&gt;&gt; &lt;&lt;Features of dependencies@1#green&gt;&gt; &lt;&lt;&quot;package-name/feature-name&quot;#green&gt;&gt; &lt;&lt;? syntax is only available starting with Rust 1.60#red&gt;&gt; &lt;&lt;serde = [&quot;dep:serde&quot;, &quot;rgb?/serde&quot;]#green&gt;&gt; &lt;&lt;Dev-dependencies do not activate feature#green&gt;&gt; &lt;&lt;unless building a target that needs them#green&gt;&gt; &lt;&lt;tests or examples&gt;&gt; &lt;&lt;avoids unifying features in a few situations&gt;&gt; &lt;&lt;can add a ? as in &quot;package-name?/feature-name&quot;#green&gt;&gt; &lt;&lt;only enable the given feature if something else enables the optional dependency&gt;&gt; &lt;&lt;gif = [&quot;dep:gif&quot;]&gt;&gt; &lt;&lt;If you specify the optional dependency with the dep: prefix anywhere in the [features] table&gt;&gt; &lt;&lt;that disables the implicit feature#red&gt;&gt; &lt;&lt;&quot;rayon&quot; feature of jpeg-decoder&gt;&gt; &lt;&lt;parallel = [&quot;jpeg-decoder/rayon&quot;]#green&gt;&gt; &lt;&lt;&quot;package-name/feature-name&quot; syntax will also enable package-name if it is an optional dependency&gt;&gt; &lt;&lt;Often this is not what you want.#red&gt;&gt; &lt;&lt;compile_error!(#red&gt;&gt; &lt;&lt;using the version &quot;2&quot; resolver#red&gt;&gt; &lt;&lt;increase build times#red&gt;&gt; &lt;&lt;docs.rs can use metadata in Cargo.toml to control which features are enabled when the documentation&gt;&gt; &lt;&lt;See docs.rs metadata#green&gt;&gt; &lt;&lt;New crates or versions published on crates.io are now limited to a maximum of 300 features.#red&gt;&gt; &lt;&lt;Exceptions are granted on a case-by-case basis.#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.rust-lang.org/2023/10/26/broken-badges-and-23k-keywords.html" id="551">
        <title>A tale of broken badges and 23,000 features | Rust Blog#__#&lt;&lt;lot of features… almost 23,000#red&gt;&gt; &lt;&lt;WebAssembly bundle stays small#green&gt;&gt; &lt;&lt;on 2023-10-16 the crates.io team deployed a change&gt;&gt; &lt;&lt;limiting the number of features a crate can have to 300#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/resolver.html" id="552">
        <title>Dependency Resolution - The Cargo Book#__#&lt;&lt;If multiple packages have a common dependency with semver-incompatible versions, then Cargo will allow this, but will build two separate copies of the dependency#green&gt;&gt; &lt;&lt;Multiple versions within the same compatibility range#red&gt;&gt; &lt;&lt;will result in a resolver error if it is constrained to two different versions within a compatibility range#red&gt;&gt; semver trick&lt;&lt;In short, when a library wants to publish a SemVer-breaking release, publish the new release, and also publish a point release of the previous version that reexports the types from the newer version.#green&gt;&gt; &lt;&lt;incompatibilities usually manifest as a compile-time#green&gt;&gt; &lt;&lt;but sometimes they will only appear as a runtime#red&gt;&gt; &lt;&lt;Cargo will avoid automatically using pre-releases unless explicitly#red&gt;&gt; &lt;&lt;if 1.0.0-alpha of package foo is published, then a requirement of foo = &quot;1.0&quot; will not match#red&gt;&gt; &lt;&lt;&quot;newer&quot; pre-releases to be used automatically.#green&gt;&gt; &lt;&lt;1.0.0-alpha.4#green&gt;&gt; &lt;&lt;multiple packages in a workspace#red&gt;&gt; &lt;&lt;features of the dependencies of all of those packages are unified#red&gt;&gt; &lt;&lt;to avoid that unification for different workspace members, you will need to build them via separate cargo invocations#green&gt;&gt; &lt;&lt;resolver will skip over versions of packages that are missing required features#green&gt;&gt; &lt;&lt;if a feature is removed from a new release, then packages that require that feature will be stuck on the older#green&gt;&gt; &lt;&lt;[dev-dependencies]#green&gt;&gt; &lt;&lt;serde = {version = &quot;1.0&quot;, default-features = false}#green&gt;&gt; &lt;&lt;links field is used to ensure only one copy of a native library#blue&gt;&gt; &lt;&lt;update from the older release to the newer&gt;&gt; &lt;&lt;also applies to versions with leading zeros#red&gt;&gt; &lt;&lt;left-most#green&gt;&gt; &lt;&lt;non-zero#red&gt;&gt; &lt;&lt;0.1.0 and 0.2.0 are not#red&gt;&gt; &lt;&lt;0.0.1 and 0.0.2 are not#red&gt;&gt; &lt;&lt;Caret#green&gt;&gt; &lt;&lt;1.2.3 or ^1.2.3#green&gt;&gt; &lt;&lt;Any SemVer-compatible&gt;&gt; &lt;&lt;of at least the given value&gt;&gt; &lt;&lt;=0.4.11#red&gt;&gt; semver trick&lt;&lt;semver t&gt;&gt; &lt;&lt;cargo tree@2&gt;&gt; &lt;&lt;identify duplicate&gt;&gt; &lt;&lt;test or example#green&gt;&gt; &lt;&lt;0.0.x versions can be used for packages that are permanently unstable#red&gt;&gt; &lt;&lt;if a package depends on version ^1 of regex with the perf feature&gt;&gt; &lt;&lt;the oldest version it can select is 1.3.0#green&gt;&gt; &lt;&lt;because versions prior to that did not contain the perf feature#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/cargo-targets.html" id="553">
        <title>Cargo Targets - The Cargo Book#__#&lt;&lt;[lib], [[bin]], [[example]], [[test]], and [[bench]] sections in Cargo.toml&gt;&gt; &lt;&lt;test = true            # Is tested by default.&gt;&gt; &lt;&lt;examples dir#green&gt;&gt; &lt;&lt;Examples can use the public API&gt;&gt; &lt;&lt;examples are executable binaries (with a main()&gt;&gt; &lt;&lt;cargo run command with the --example &lt;example-name&gt;&gt;&gt; &lt;&lt;if you have #[test] functions in the example#red&gt;&gt; &lt;&lt;benches dir#green&gt;&gt; &lt;&lt;library, binary, example, test, and benchmark targets&gt;&gt; &lt;&lt;N/A for lib#red&gt;&gt; &lt;&lt;more than one [[bin]] section#green&gt;&gt; &lt;&lt;can only specify one library#red&gt;&gt; &lt;&lt;[lib] is a normal&gt;&gt; &lt;&lt;[lib]&gt;&gt; &lt;&lt;default binary filename is src/main.rs#red&gt;&gt; &lt;&lt;Additional binaries are stored in the src/bin/#red&gt;&gt; &lt;&lt;[[bin]]#green&gt;&gt; &lt;&lt;test = false&gt;&gt; &lt;&lt;bench = false@1&gt;&gt; &lt;&lt;required-features = [&quot;frobnicate&quot;]#green&gt;&gt; &lt;&lt;also containing #[test]&gt;&gt; &lt;&lt;harness field&gt;&gt; &lt;&lt;serially&gt;&gt; &lt;&lt;parallel@1&gt;&gt;&lt;&lt;CARGO_BIN_EXE_#blue&gt;&gt; &lt;&lt;default binary (src/main.rs), this defaults to the name of the package#red&gt;&gt; &lt;&lt;auto-discovery&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/unstable-book/language-features/doc-cfg.html" id="554">
        <title>doc_cfg - The Rust Unstable Book</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/27840394/how-can-a-rust-program-access-metadata-from-its-cargo-package" id="555">
        <title>How can a Rust program access metadata from its Cargo package? - Stack Overflow#__#&lt;&lt;const VERSION: &amp;str = env!(&quot;CARGO_PKG_VERSION&quot;);&gt;&gt; &lt;&lt;even without Cargo, you can use option_env!()&gt;&gt; &lt;&lt;const VERSION: Option&lt;&amp;str&gt; = option_env!(&quot;CARGO_PKG_VERSION&quot;);&gt;&gt; &lt;&lt;will not resolve to subcrate&apos;s metadata for workspace members#red&gt;&gt; &lt;&lt;build-time#red&gt;&gt; &lt;&lt;in build.rs#red&gt;&gt; &lt;&lt;cargo_metadata&gt;&gt; &lt;&lt;let path = std::env::var(&quot;CARGO_MANIFEST_DIR&quot;).unwrap();&gt;&gt; &lt;&lt;let meta = MetadataCommand::new()&gt;&gt; &lt;&lt;.manifest_path(&quot;./Cargo.toml&quot;)&gt;&gt; &lt;&lt;.current_dir(&amp;path)&gt;&gt; &lt;&lt;root.metadata[&quot;my&quot;][&quot;option&quot;].as_str().unwrap()&gt;&gt; &lt;&lt;let root = meta.root_package().unwrap();&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/crate-metadata/latest/crate_metadata/" id="556">
        <title>crate_metadata - Rust#__#&lt;&lt;caller crate with other packages that in workspace&gt;&gt; &lt;&lt;Caller crate means crate that currently building#blue&gt;&gt; &lt;&lt;for caller crate.&gt;&gt; &lt;&lt;Without other packages if it’s in a workspace.#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/built" id="557">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;dependencies&gt;&gt; &lt;&lt;dependencies of dependencies#green&gt;&gt; &lt;&lt;their versions cargo ultimately chose#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/tugger-rust-toolchain/0.13.0/tugger_rust_toolchain/fn.fetch_channel_manifest.html" id="1176">
        <title>fetch_channel_manifest in tugger_rust_toolchain - Rust#__#&lt;&lt;toolchain manifest for a named channel&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://slint-ui.com/blog/rust-adding-default-cargo-feature.html" id="1177">
        <title>Rust: Adding default cargo features without breaking Semantic Versioning — Slint Blog#__#&lt;&lt;add a mandatory feature&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/frewsxcv/cargo-all-features" id="1178">
        <title>frewsxcv/cargo-all-features: A Cargo subcommand to build and test all feature flag combinations.</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=308567" id="1179">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/build-scripts.html" id="1180">
        <title>Build Scripts - The Cargo Book#__#&lt;&lt;cc` crate to build a C file&gt;&gt; &lt;&lt;statically link&gt;&gt; &lt;&lt;cargo:rerun-if-changed=src/hello.c&gt;&gt; &lt;&lt;In addition to environment variables&gt;&gt; &lt;&lt;build script’s current directory#green&gt;&gt; &lt;&lt;source directory of the build script’s package&gt;&gt; &lt;&lt;to see the output directly in your terminal&gt;&gt; &lt;&lt;Cargo as “very verbose” with the -vv&gt;&gt; &lt;&lt;only happens when the build script is run&gt;&gt; &lt;&lt;cargo:rerun-if-env-changed=#green&gt;&gt; &lt;&lt;cc crate may enable the optional parallel feature&gt;&gt; &lt;&lt;jobserver protocol to&gt;&gt; &lt;&lt;build multiple C files&gt;&gt; &lt;&lt;only allows the -l and -L flags#red&gt;&gt; &lt;&lt;not affect Cargo’s dependency resolution#red&gt;&gt; &lt;&lt;env! macro&gt;&gt; &lt;&lt;build.rs&gt;&gt; &lt;&lt;cannot be used to enable an optional dependency#red&gt;&gt; &lt;&lt;or enable other Cargo features#red&gt;&gt; &lt;&lt;order of cargo:: instructions printed by the build script&gt;&gt; &lt;&lt;may affect the order of arguments that cargo passes to rustc#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/build-script-examples.html" id="1181">
        <title>Build Script Examples - The Cargo Book</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=151756" id="1182">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://slint.dev/blog/rust-adding-default-cargo-feature" id="1183">
        <title>Rust: Adding default cargo features without breaking Semantic Versioning — Slint Blog</title>
      </bookmark>
    </folder>
    <folder id="165">
      <title>release manag.</title>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/semver.html" id="558">
        <title>SemVer Compatibility - The Cargo Book#__#&lt;&lt;This guide@1&gt;&gt; &lt;&lt;terms “major” and “minor”#blue&gt;&gt; &lt;&lt;assuming this relates to a “1.0.0” release or later#red&gt;&gt; &lt;&lt;“0.y.z” can treat changes in “y” as a major&gt;&gt; &lt;&lt;“z” as a minor&gt;&gt; &lt;&lt;“0.0.z” releases are always major&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.dbrgn.ch/2015/12/1/rust-crates-keep-a-changelog/" id="559">
        <title>Rustaceans: Please Keep a Changelog! - blog.dbrgn.ch#__#&lt;&lt;git tag vX.Y.Z&gt;&gt; &lt;&lt;git push --tags&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://bytecodealliance.github.io/lucet/versioning_releasing.html" id="560">
        <title>Versioning and releasing to crates.io - Lucet#__#&lt;&lt;new versions of the Lucet crates all at once&gt;&gt; &lt;&lt;semver is project-wide#green&gt;&gt; &lt;&lt;rather than per-crate#red&gt;&gt; &lt;&lt;public interface&gt;&gt; &lt;&lt;internal consumption&gt;&gt; &lt;&lt;a breaking change does not inherently require a semver major#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://jstrong.dev/posts/2023/publishing-crates-a-justfile-workflow/" id="561">
        <title>Publishing Rust Crates: a Justfile Workflow - jstrong.dev#__#&lt;&lt;Two tools&gt;&gt; &lt;&lt;cargo&gt;&gt; &lt;&lt;just (&quot;just a command runner&quot;&gt;&gt; &lt;&lt;similarly to make&gt;&gt; &lt;&lt;without the weird syntax of Makefiles#red&gt;&gt; &lt;&lt;doesn&apos;t perform logic on which things need to be compiled based on file metadata#red&gt;&gt; &lt;&lt;nicer to use#green&gt;&gt; &lt;&lt;repeatable commands#green&gt;&gt; &lt;&lt;specify environment variables and other context in a justfile#green&gt;&gt; &lt;&lt;However, it&apos;s also necessary to be able to run unexpected, ad-hoc&gt;&gt; &lt;&lt;cargo will re-compile everything whenever it is invoked with a different environment#red&gt;&gt; &lt;&lt;vs. performing its normal incremental#green&gt;&gt; &lt;&lt;Sqlx&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://fasterthanli.me/articles/my-ideal-rust-workflow#advice-start" id="562">
        <title>My ideal Rust workflow</title>
      </bookmark>
      <bookmark href="https://news.ycombinator.com/item?id=29010327" id="563">
        <title>My ideal Rust workflow | Hacker News</title>
      </bookmark>
      <bookmark href="https://github.com/obi1kenobi/cargo-semver-checks" id="564">
        <title>obi1kenobi/cargo-semver-checks: Scan your Rust crate for semver violations.#__#&lt;&lt;By default, cargo-semver-checks uses crates.io to look up the previous version&gt;&gt; &lt;&lt;--baseline-root &lt;MANIFEST_ROOT&gt;&gt;&gt; &lt;&lt;Directory containing baseline&gt;&gt; &lt;&lt;all features&gt;&gt; &lt;&lt;except#red&gt;&gt; &lt;&lt;unstable, nightly, bench, no_std#red&gt;&gt; &lt;&lt;prefix _, unstable-, or unstable_#red&gt;&gt; &lt;&lt;--all-features&gt;&gt; &lt;&lt;--default-features&gt;&gt; &lt;&lt;--only-explicit-features&gt;&gt; &lt;&lt;one-by-one&gt;&gt; &lt;&lt;--features&gt;&gt; &lt;&lt;--baseline-features&gt;&gt; &lt;&lt;--current-features&gt;&gt; &lt;&lt;rate of change is fairly low#green&gt;&gt; &lt;&lt;MSRV bumps&gt;&gt; &lt;&lt;not considered major#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://predr.ag/blog/some-rust-breaking-changes-do-not-require-major-version/" id="565">
        <title>Some Rust breaking changes don&apos;t require a major version</title>
      </bookmark>
      <bookmark href="https://predr.ag/blog/toward-fearless-cargo-update/" id="566">
        <title>Toward fearless cargo update#__#&lt;&lt;isn&apos;t entirely fearless yet: cargo update#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/guppy-rs/guppy" id="567">
        <title>guppy-rs/guppy: Track and query Cargo dependency graphs.#__#&lt;&lt;determinator: figure out what packages changed between two revisions&gt;&gt; &lt;&lt;cargo-hakari: a command-line tool to manage workspace-hack packages&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="166">
      <title>zOther</title>
      <bookmark href="https://github.com/matthiaskrgr/cargo-cache/blob/master/README.md" id="568">
        <title>cargo-cache/README.md at master · matthiaskrgr/cargo-cache · GitHub#__#&lt;&lt;cache pruning#green&gt;&gt; &lt;&lt;--dry-run&gt;&gt; &lt;&lt;cargo cache clean-unref#green&gt;&gt; &lt;&lt;cargo cache&gt;&gt; &lt;&lt;--autoclean#green&gt;&gt; &lt;&lt;--remove-dir#green&gt;&gt; &lt;&lt;: all#green&gt;&gt; &lt;&lt;--fsck#green&gt;&gt; &lt;&lt;Fsck git#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/holmgr/cargo-sweep" id="569">
        <title>holmgr/cargo-sweep: A cargo subcommand for cleaning up unused build files generated by Cargo#__#&lt;&lt;Limited target size so that CI caches#green&gt;&gt; &lt;&lt;clean all build files not made by the currently installed (by rustup) nightly compiler:#green&gt;&gt; &lt;&lt;cargo sweep --toolchains=&quot;nightly&quot;#green&gt;&gt; &lt;&lt;useful if you checked that your library works on stable, but mostly develop on nightly.#green&gt;&gt; &lt;&lt;clean all build files not made by any of the currently installed (by rustup) compilers:#green&gt;&gt; &lt;&lt;useful if you just updated your compilers with a rustup update#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/18g1rg6/cargo_cache_cleaning_rust_blog/" id="570">
        <title>(7) Cargo cache cleaning | Rust Blog : rust#__#&lt;&lt;moving all the deletion work to a separately spawned detached process&gt;&gt; &lt;&lt;any kind of LRU-based algorithm is not going to handle certain usage patterns appropriately#red&gt;&gt; &lt;&lt;Rather than an LRU#red&gt;&gt; &lt;&lt;a roots-based gc#green&gt;&gt; &lt;&lt;tracks what projects are currently on the system&gt;&gt; &lt;&lt;skeptical if that&apos;s feasible#red&gt;&gt; &lt;&lt;git branches#red&gt;&gt; &lt;&lt;We&apos;ll need to track roots to auto-cleanup cargo script target-dirs#green&gt;&gt; &lt;&lt;pin roots which would make it a hybrid#green&gt;&gt; &lt;&lt;don&apos;t think automatic cleanup is the only (or best)#red&gt;&gt; &lt;&lt;a variety of valid ways to frame this#blue&gt;&gt; &lt;&lt;root problem here is that users are unaware#red&gt;&gt; &lt;&lt;I&apos;m struggling a bit to put into words#blue&gt;&gt; &lt;&lt;analogy to#green&gt;&gt; &lt;&lt;Just because I haven&apos;t used a branch in while, and just because I can always pull it from an online repo again, doesn&apos;t mean that it&apos;s appropriate for git to assume I don&apos;t need it anymore and delete it.#red&gt;&gt; &lt;&lt;reasonably expect&gt;&gt; &lt;&lt;difficult to track down#red&gt;&gt; &lt;&lt;cause and effect are potentially quite distant in time#red&gt;&gt; &lt;&lt;if the cleanup is at least loud#green&gt;&gt; &lt;&lt;prominent message&gt;&gt; &lt;&lt;when it does the automatic cleanup&gt;&gt; &lt;&lt;that things that used to build locally may not anymore&gt;&gt; &lt;&lt;But if cargo is going to be loud anyway&gt;&gt; &lt;&lt;instead be loud by simply informing the user when the cache is large&gt;&gt; &lt;&lt;giving simple instructions&gt;&gt; &lt;&lt;cache invalidation is famously difficult#red&gt;&gt; &lt;&lt;making cleanup discoverable&gt;&gt; &lt;&lt;also indicate when nothing was cleaned&gt;&gt; &lt;&lt;once a day&gt;&gt; &lt;&lt;early indication&gt;&gt; &lt;&lt;feature ensures that the user is informed&gt;&gt; &lt;&lt;can opt out&gt;&gt; &lt;&lt;cargo clean gc has a --dry-run&gt;&gt; &lt;&lt;--verbose&gt;&gt; &lt;&lt;--offline or --frozen&gt;&gt; &lt;&lt;doesn&apos;t sound like that would help in the case of being on a plane#red&gt;&gt; &lt;&lt;would&apos;ve cleared everything days or weeks before#red&gt;&gt; &lt;&lt;atime also falls apart in CI caches#red&gt;&gt; &lt;&lt;timestamps you&apos;d have to scan the entire registry every day#red&gt;&gt; &lt;&lt;Even on a fast filesystem, the database is likely much faster&gt;&gt; &lt;&lt;Especially if you&apos;ve got an index&gt;&gt; &lt;&lt;relatime optimization for linux filesystems&gt;&gt; &lt;&lt;sqlite&apos;s frequent use of sync()#red&gt;&gt; &lt;&lt;trade accuracy&gt;&gt; &lt;&lt;reduced writes&gt;&gt; &lt;&lt;rusqlite&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=906080" id="571">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/alopatindev/cargo-limit" id="572">
        <title>alopatindev/cargo-limit: Cargo with less noise: warnings are skipped until errors are fixed, Neovim integration, etc.#__#&lt;&lt;warnings are skipped by default until errors are fixed#green&gt;&gt; &lt;&lt;especially useful in combination with cargo-watch#green&gt;&gt; &lt;&lt;cargo lbench#green&gt;&gt; &lt;&lt;cargo lbuild#green&gt;&gt; &lt;&lt;cargo lcheck#green&gt;&gt; &lt;&lt;cargo lclippy#green&gt;&gt; &lt;&lt;cargo lrun#green&gt;&gt; &lt;&lt;cargo ltest#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/cargo/commands/cargo-tree.html" id="573">
        <title>cargo tree - The Cargo Book#__#&lt;&lt;cargo tree -e features#green&gt;&gt; &lt;&lt;When using -e features it can be helpful to use -i flag to show how the features flow into a package#green&gt;&gt; &lt;&lt;-i spec#green&gt;&gt; &lt;&lt;--invert spec#green&gt;&gt; &lt;&lt;reverse dependencies for the given package#green&gt;&gt; &lt;&lt;by default it will only display the package&apos;s reverse dependencies inside the tree of the workspace member in the current directory#red&gt;&gt; &lt;&lt;--workspace flag can be used to extend it#green&gt;&gt; &lt;&lt;-p flag can be used to display the package&apos;s reverse dependencies only with the subtree of the package given to -p#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://medium.com/@ericdreichert/how-to-print-during-rust-tests-619bdc7ccebc" id="574">
        <title>How to print during Rust tests.. This is more a note for me than… | by Eric Opines | Medium</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch07-02-defining-modules-to-control-scope-and-privacy.html" id="575">
        <title>Defining Modules to Control Scope and Privacy - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch07-01-packages-and-crates.html" id="576">
        <title>Packages and Crates - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/guide/creating-a-new-project.html" id="577">
        <title>Creating a New Package - The Cargo Book</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html" id="1184">
        <title>Managing Growing Projects with Packages, Crates, and Modules - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch01-03-hello-cargo.html" id="1185">
        <title>Hello, Cargo! - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://github.com/Canop/bacon" id="1186">
        <title>Canop/bacon: background rust code check</title>
      </bookmark>
      <bookmark href="https://stephencoakley.com/2019/04/24/how-rust-solved-dependency-hell" id="1187">
        <title>How Rust Solved Dependency Hell - Stephen Coakley</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/commands/cargo-install.html" id="1188">
        <title>cargo install - The Cargo Book</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch07-05-separating-modules-into-different-files.html" id="1189">
        <title>Separating Modules into Different Files - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/guide/project-layout.html" id="1190">
        <title>Package Layout - The Cargo Book#__#&lt;&lt;default library file is src/lib.rs#green&gt;&gt; &lt;&lt;default executable file is src/main.rs#green&gt;&gt; &lt;&lt;Other executables can be placed in src/bin/#green&gt;&gt; &lt;&lt;Benchmarks go in the benches#green&gt;&gt; &lt;&lt;Examples go in the examples#green&gt;&gt; &lt;&lt;Integration tests go in the tests#green&gt;&gt; &lt;&lt;name of the executable will be the directory name.#green&gt;&gt; &lt;&lt;If a binary, example, bench, or integration test#green&gt;&gt; &lt;&lt;of multiple source#green&gt;&gt; &lt;&lt;place a main.rs file along with the extra modules#green&gt;&gt; &lt;&lt;within a subdirectory#green&gt;&gt; &lt;&lt;of the src/bin, examples, benches, or tests directory#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/pkgid-spec.html" id="1191">
        <title>Package ID Specifications - The Cargo Book#__#&lt;&lt;fully qualified, such as https://github.com/rust-lang/crates.io-index#regex:1.4.3#blue&gt;&gt; &lt;&lt;abbreviated, such as regex#green&gt;&gt; &lt;&lt;If there is ambiguity, additional qualifiers#green&gt;&gt; &lt;&lt;if there are two versions#green&gt;&gt; &lt;&lt;regex:1.4.3@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://llogiq.github.io/2016/07/05/travis.html" id="1192">
        <title>Shave Some Time From Your Travis Builds — Llogiq on stuff#__#&lt;&lt;cache: cargo in your .travis.yml#green&gt;&gt; &lt;&lt;If you want to benchmark#green&gt;&gt; &lt;&lt;don’t need a debug build#red&gt;&gt; &lt;&lt;cargo test --release#green&gt;&gt; &lt;&lt;Know what compiler/cargo flags change build behavior#green&gt;&gt; &lt;&lt;For example, -C debug-assertions=on enables debug assertions#green&gt;&gt; &lt;&lt;even on release#red&gt;&gt; &lt;&lt;cargo * --verbose (where * is any of the other commands, usually build, test or doc)#green&gt;&gt; &lt;&lt;then use cargo rustc -- .. to add the same flags#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/killercup/cargo-edit" id="1193">
        <title>killercup/cargo-edit: A utility for managing cargo dependencies from the command line.</title>
      </bookmark>
      <bookmark href="https://github.com/dbrgn/shtcx-rs/blob/master/.cargo/config" id="1338">
        <title>shtcx-rs/config at master · dbrgn/shtcx-rs#__#&lt;&lt;.cargo/config#green&gt;&gt; &lt;&lt;[target.arm-unknown-linux-musleabihf]&gt;&gt; &lt;&lt;linker = &quot;arm-linux-gnueabihf-musl-gcc&quot;&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/config.html" id="1339">
        <title>Configuration - The Cargo Book#__#&lt;&lt;$CARGO_HOME/credentials.toml&gt;&gt; &lt;&lt;.toml extension@1#green&gt;&gt; &lt;&lt;is the preferred#green&gt;&gt; &lt;&lt;not read config files from crates within the workspace#red&gt;&gt; &lt;&lt;local configuration for a particular package#blue&gt;&gt; &lt;&lt;in the current directory#red&gt;&gt; &lt;&lt;all parent directories#red&gt;&gt; &lt;&lt;or example, Cargo were invoked in /projects/foo/bar/baz#red&gt;&gt; &lt;&lt;If a key is specified in multiple config files, the values will get merged#red&gt;&gt; &lt;&lt;Numbers, strings, and booleans will use the value in the deeper config directory taking precedence#green&gt;&gt; &lt;&lt;Arrays will be joined#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/manifest.html" id="1340">
        <title>The Manifest Format - The Cargo Book#__#&lt;&lt;readme&gt;&gt; &lt;&lt;cannot be changed or removed in already-published versions#red&gt;&gt; &lt;&lt;cannot include semver operators or pre-release#red&gt;&gt; &lt;&lt;crates.io/category_slugs#green&gt;&gt; &lt;&lt;maximum of 64 characters#red&gt;&gt; &lt;&lt;Semantic Version&gt;&gt; &lt;&lt;After 1.0.0@1&gt;&gt; &lt;&lt;don’t add#red&gt;&gt; &lt;&lt;new public API#red&gt;&gt; &lt;&lt;patch-level#red&gt;&gt; &lt;&lt;increment the minor@1#green&gt;&gt; &lt;&lt;if you add any new pub#green&gt;&gt; &lt;&lt;three numeric parts#green&gt;&gt; &lt;&lt;1.0.0@3#green&gt;&gt; &lt;&lt;rather than 1.0#red&gt;&gt; compatibility&lt;&lt;SemVer compatib#green&gt;&gt; &lt;&lt;affect all targets/crates in the package, including test suites, benchmarks@1#red&gt;&gt; &lt;&lt;if the package contains a binary#red&gt;&gt; &lt;&lt;example target,#red&gt;&gt; &lt;&lt;setting include will override an exclude#red&gt;&gt; &lt;&lt;to have exclusions to a set of include files, use the ! operator#green&gt;&gt; &lt;&lt;[lints.rust]&gt;&gt; &lt;&lt;[lints.clippy]&gt;&gt; &lt;&lt;defaults to 0.0.0#red&gt;&gt; &lt;&lt;maximum of 5 keywords#red&gt;&gt; &lt;&lt;maximum of 5 categories#red&gt;&gt; &lt;&lt;rust-version&gt;&gt; &lt;&lt;pre-release identifiers such as -nightly will be ignored while checking the Rust version#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/overriding-dependencies.html" id="1341">
        <title>Overriding Dependencies - The Cargo Book</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/63149502/cant-use-z-macro-backtrace-unstable-option-with-cargo" id="1342">
        <title>rust - Can&apos;t use `-Z macro-backtrace` unstable option with `cargo` - Stack Overflow#__#&lt;&lt;-Z macro-backtrace is a rustc flag#red&gt;&gt; &lt;&lt;cargo +nightly rustc -- -Z macro-backtrace#green&gt;&gt; &lt;&lt;+nightly in the command line is optional if you already switched to the nightly#green&gt;&gt; &lt;&lt;Alternatively, you can set the RUSTFLAGS#green&gt;&gt; &lt;&lt;export RUSTFLAGS=&quot;-Z macro-backtrace&quot;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/cargo-udeps" id="1343">
        <title>cargo-udeps - crates.io: Rust Package Registry#__#&lt;&lt;cargo +nightly udeps#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/10r0qe6/release_engineering_is_exhausting_so_heres/" id="1344">
        <title>Reddit - Dive into anything</title>
      </bookmark>
      <bookmark href="https://developerweek2023.sched.com/event/1G14p/virtual-pro-talk-comparing-rust-with-go-java-and-python-in-aws-lambdas" id="1345">
        <title>DeveloperWeek 2023: [Virtual] PRO TALK: Comparing Rust with...#__#&lt;&lt;AWS Lambdas&gt;&gt; &lt;&lt;Rust&apos;s cold-start time is the lowest#green&gt;&gt; &lt;&lt;Lambda SnapStart&gt;&gt; &lt;&lt;languages like Java&gt;&gt; &lt;&lt;many limitations#red&gt;&gt; &lt;&lt;multi-threaded#green&gt;&gt; &lt;&lt;CPU-intensive#green&gt;&gt; &lt;&lt;Rust wins,#green&gt;&gt; &lt;&lt;Network bandwidth to S3 increases as you increase memory#blue&gt;&gt; &lt;&lt;plateaus at 90 MBps when memory allocated is between 512MB and 1024MB#blue&gt;&gt; &lt;&lt;Cliff Crosland, CEO, Co-founder,  Scanner.dev&gt;&gt; &lt;&lt;Wednesday, February 22&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/taiki-e/cargo-hack" id="1346">
        <title>taiki-e/cargo-hack: Cargo subcommand to provide various options useful for testing and continuous integration.#__#&lt;&lt;each feature@1&gt;&gt; &lt;&lt;every combination&gt;&gt; &lt;&lt;use with --no-dev-deps#green&gt;&gt; &lt;&lt;--feature-powerset --no-dev-deps&gt;&gt; &lt;&lt;more efficient than checking all feature combinations in other ways&gt;&gt; &lt;&lt;When using this flag results in a very large number#red&gt;&gt; &lt;&lt;--depth option#green&gt;&gt; &lt;&lt;multiple groups&gt;&gt; &lt;&lt;option multiple times&gt;&gt; &lt;&lt;--group-features a,b --group-features c,d&gt;&gt; &lt;&lt;rustup run &lt;toolchain&gt; cargo#green&gt;&gt; &lt;&lt;instead of cargo +&lt;toolchain&gt;#red&gt;&gt; &lt;&lt;rust-version field in Cargo.toml@1&gt;&gt; &lt;&lt;-no-dev-deps flag removes dev-dependencies from real manifest while cargo-hack is running#red&gt;&gt; &lt;&lt;restores it when finished&gt;&gt; &lt;&lt;Unlike cargo#red&gt;&gt; &lt;&lt;can also be applied to sub-crates#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gitlab.com/rust-test-binary/test-binary/" id="1347">
        <title>Rust Test Binary / Rust Test Binary · GitLab#__#&lt;&lt;integration tests@1&gt;&gt; &lt;&lt;mock&gt;&gt; &lt;&lt;binaries eg. under src/bin&gt;&gt; &lt;&lt;or listed under [[bin]]&gt;&gt; &lt;&lt;share dependencies with your entire crate!#red&gt;&gt; &lt;&lt;Example binaries (under examples/ or [[example]])&gt;&gt; &lt;&lt;might deliberately malfunction&gt;&gt; &lt;&lt;binaries as workspace crates requires publishing every one#red&gt;&gt; &lt;&lt;testbins@1&gt;&gt; &lt;&lt;not going to be a workspace#red&gt;&gt; &lt;&lt;put an empty [workspace] section in the Cargo.toml for these test binaries#green&gt;&gt; &lt;&lt;not to look in parent directories.#red&gt;&gt; &lt;&lt;in the child project&gt;&gt; &lt;&lt;relative to your real project&apos;s manifest&gt;&gt; &lt;&lt;profiles&gt;&gt; &lt;&lt;features&gt;&gt; &lt;&lt;builder API&gt;&gt; &lt;&lt;Minimum supported Rust version: 1.57&gt;&gt; &lt;&lt;Crate binaries&gt;&gt; &lt;&lt;share dependencies with your entire crate!#red&gt;&gt; &lt;&lt;examples/ or [[example]]&gt;&gt; &lt;&lt;use [dev-dependencies]&gt;&gt; &lt;&lt;But they have no equivalent environment variable#red&gt;&gt; &lt;&lt;might not be built by the time your test#red&gt;&gt; &lt;&lt;might deliberately malfunction#red&gt;&gt; &lt;&lt;binaries as workspace crates#red&gt;&gt; &lt;&lt;publishing every one#red&gt;&gt; &lt;&lt;aren&apos;t binaries listed in your actual project&apos;s manifest#red&gt;&gt; &lt;&lt;testbins@1#green&gt;&gt; &lt;&lt;not going to be a workspace#red&gt;&gt; &lt;&lt;in their own Cargo packages#green&gt;&gt; &lt;&lt;put an empty [workspace] section in the Cargo.toml for these#green&gt;&gt; &lt;&lt;binaries,#green&gt;&gt; &lt;&lt;Cargo knows not to look in parent#red&gt;&gt; &lt;&lt;binary name&gt;&gt; &lt;&lt;in the child project#green&gt;&gt; &lt;&lt;if you changed directory to the nested project&gt;&gt; &lt;&lt;you&apos;d run cargo build --bin test-something#green&gt;&gt; &lt;&lt;also has to be the name of the subdirectory#green&gt;&gt; &lt;&lt;test-something&gt;&gt; &lt;&lt;extra binary manifest&gt;&gt; &lt;&lt;name = &quot;test-something&quot;#red&gt;&gt; &lt;&lt;main.rs  (extra binary#red&gt;&gt; &lt;&lt;── testbins&gt;&gt; &lt;&lt;directory relative to your real project&apos;s manifest#green&gt;&gt; &lt;&lt;containing this test binary project&gt;&gt; &lt;&lt;&quot;test-something&quot;@1&gt;&gt; &lt;&lt;&quot;testbins&quot;&gt;&gt; &lt;&lt;path is not resolved to an absolute#red&gt;&gt; &lt;&lt;in the current process&apos; working directory, it will be valid#green&gt;&gt; &lt;&lt;do not change the working directory#red&gt;&gt; &lt;&lt;Minimum supported Rust version: 1.57#red&gt;&gt; &lt;&lt;MIT license&gt;&gt; by &quot;detly&quot; = Jason Heeris, creator of Caloop Subprocess (easy, but NOT for high performance)&lt;&lt;Project ID&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/test-binary/latest/test_binary/macro.build_test_binary_once.html" id="1422">
        <title>build_test_binary_once in test_binary - Rust#__#&lt;&lt;no quotes on binary_name&gt;&gt; &lt;&lt;generate a function path_to_binary_name()&gt;&gt; &lt;&lt;Unlike build_test_binary()#red&gt;&gt; &lt;&lt;the generated function will only build the binary once#green&gt;&gt; &lt;&lt;binary name must be a valid identifier#green&gt;&gt; &lt;&lt;not have dashes#red&gt;&gt; &lt;&lt;extra features#red&gt;&gt; &lt;&lt;non-default profile#red&gt;&gt; &lt;&lt;go back to using the builder#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/test-binary/latest/test_binary/struct.TestBinary.html" id="1423">
        <title>TestBinary in test_binary - Rust#__#&lt;&lt;cross-platform way by using PathBuf::from_iter#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/cargo/issues/5657" id="1424">
        <title>Dependencies resolution with `--minimal-versions` · Issue #5657 · rust-lang/cargo#__#resolve the dependencies (in Cargo.lock) to the MINIMUM SemVer version that will satisfy the requirements (instead of the greatest version)&lt;&lt;-Z minimal-versions&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://fy.blackhats.net.au/blog/2021-02-16-against-packaging-rust-crates/" id="1425">
        <title>Firstyear&apos;s blog-a-log#__#&lt;&lt;Against Packaging Rust Crates&gt;&gt; &lt;&lt;as libraries&gt;&gt; &lt;&lt;applications as self contained units#green&gt;&gt; &lt;&lt;not supporting the libraries that make them up#red&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="40">
    <title>CLI</title>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch12-01-accepting-command-line-arguments.html" id="167">
      <title>Accepting Command Line Arguments - The Rust Programming Language#__#&lt;&lt;use std::env;#green&gt;&gt; &lt;&lt;let args: Vec&lt;String&gt; = env::args().collect();#green&gt;&gt; &lt;&lt;std::env::args will panic if any argument contains invalid Unicode#red&gt;&gt; &lt;&lt;If your program needs to accept arguments containing invalid Unicode, use std::env::args_os instead#green&gt;&gt; &lt;&lt;OsString values instead of String#green&gt;&gt; &lt;&lt;OsString values differ per platform#red&gt;&gt; &lt;&lt;more complex to work with than String#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/clap-rs/clap/issues/376" id="168">
      <title>Auto generate bash completions · Issue #376 · clap-rs/clap#__#&lt;&lt;Completion mode would take a partial command line and offer a list of completions&gt;&gt; &lt;&lt;benefit is that the program can use runtime information to complete values for some args, eg drawing values out of a database#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/jwodder/patharg" id="169">
      <title>jwodder/patharg: Treat &quot;-&quot; (hyphen/dash) arguments as stdin/stdout</title>
    </bookmark>
    <bookmark href="https://ratatui.rs/" id="170">
      <title>Ratatui | Ratatui</title>
    </bookmark>
  </folder>
  <folder id="41">
    <title>Clippy &amp; Lints</title>
    <bookmark href="https://rust-lang.github.io/rustup/concepts/components.html" id="171">
      <title>Components - The rustup book#__#&lt;&lt;rust-src#green&gt;&gt; &lt;&lt;build-std feature#green&gt;&gt; &lt;&lt;to rebuild the standard library locally#green&gt;&gt; &lt;&lt;rls — RLS is a language server that provides support for editors and IDEs#green&gt;&gt; &lt;&lt;rust-analysis — Metadata about the standard library, used by tools like RLS#green&gt;&gt; &lt;&lt;rustc-dev#green&gt;&gt; &lt;&lt;compiler as a library#green&gt;&gt; &lt;&lt;development of tools that link to the compiler#green&gt;&gt; &lt;&lt;modifications to Clippy#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://blog.trailofbits.com/2021/11/09/write-rust-lints-without-forking-clippy/" id="172">
      <title>Write Rust lints without forking Clippy | Trail of Bits Blog#__#&lt;&lt;Rust linter’s core component, called a “driver&gt;&gt; &lt;&lt;which clippy-driver&gt;&gt; &lt;&lt;so forking Clippy#red&gt;&gt; &lt;&lt;own copies of the two binaries#red&gt;&gt; &lt;&lt;hassle to ensure that they can be found#red&gt;&gt; &lt;&lt;Lints compiled together must use the same version of those API#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-clippy" id="173">
      <title>rust-lang/rust-clippy: A bunch of lints to catch common mistakes and improve your Rust code. Book: https://doc.rust-lang.org/clippy/#__#&lt;&lt;in projects that do not use cargo@1#red&gt;&gt; &lt;&lt;run clippy-driver with the same arguments you use for rustc#green&gt;&gt; &lt;&lt;for running Clippy only#green&gt;&gt; &lt;&lt;not be used as a general replacement for rustc#red&gt;&gt; &lt;&lt;cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...#blue&gt;&gt; &lt;&lt;clippy.toml or .clippy.toml&gt;&gt; &lt;&lt;#![deny(clippy::all)], #![deny(clippy::pedantic)]&gt;&gt; &lt;&lt;configurations that are a list type with default values such as disallowed-names, you can use the unique value &quot;..&quot; to extend the default&gt;&gt; &lt;&lt;clippy.toml or .clippy.toml cannot be used to allow/deny lints#red&gt;&gt; &lt;&lt;msrv =&gt;&gt; &lt;&lt;Alternatively, the rust-version field in the Cargo.toml&gt;&gt; &lt;&lt;#![clippy::msrv = &quot;1.30.0&quot;]&gt;&gt; &lt;&lt;can also omit the patch version when specifying the MSRV, so msrv = 1.30 is equivalent to msrv = 1.30.0&gt;&gt; &lt;&lt;Note: custom_inner_attributes is an unstable feature, so it has to be enabled explicitly#green&gt;&gt; &lt;&lt;Lints that recognize this configuration option#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/rustc/lints/listing/allowed-by-default.html" id="174">
      <title>Allowed-by-default Lints - The rustc book</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/clippy/lint_configuration.html" id="175">
      <title>Lint Configuration - Clippy Documentation</title>
    </bookmark>
    <bookmark href="https://github.com/ericseppanen/cargo-cranky" id="176">
      <title>ericseppanen/cargo-cranky: An easy to configure wrapper for Rust&apos;s clippy#__#&lt;&lt;Cranky.toml&gt;&gt; &lt;&lt;specify Rust lints for my entire Cargo workspace#green&gt;&gt; &lt;&lt;specify non-clippy lints#green&gt;&gt; &lt;&lt;vscode@1#green&gt;&gt; &lt;&lt;&quot;rust-analyzer.check.command&quot;: &quot;cranky&quot;&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/dtolnay/trybuild/blob/master/.clippy.toml" id="177">
      <title>trybuild/.clippy.toml at master · dtolnay/trybuild · GitHub#__#msrv = &quot;1.45.0&quot;&lt;&lt;.clippy.toml&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/a4wblu/how_to_configure_clippy_to_be_as_annoying_as/" id="178">
      <title>Reddit - Dive into anything#__#&lt;&lt;clippy::all&gt;&gt; &lt;&lt;clippy::pedantic&gt;&gt; &lt;&lt;clippy::restriction&gt;&gt; &lt;&lt;clippy::nursery&gt;&gt; &lt;&lt;clippy::correctness&gt;&gt; &lt;&lt;clippy::complexity&gt;&gt; &lt;&lt;clippy::perf&gt;&gt; &lt;&lt;clippy::cargo&gt;&gt; &lt;&lt;% can overflow#red&gt;&gt; &lt;&lt;x86 is buggy#red&gt;&gt; &lt;&lt;cannot be fixed now due to backwards compatibility#red&gt;&gt; &lt;&lt;float_arithmetic#red&gt;&gt; &lt;&lt;in kernel code it can be problematic#red&gt;&gt; &lt;&lt;complicates context switches#red&gt;&gt; &lt;&lt;Cargo lints#green&gt;&gt; &lt;&lt;about Cargo.toml file#green&gt;&gt; &lt;&lt;forbid@1#green&gt;&gt; &lt;&lt;is like deny#blue&gt;&gt; &lt;&lt;but you cannot allow as an easy way out#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/clippy/" id="179">
      <title>Introduction - Clippy Documentation</title>
    </bookmark>
    <bookmark href="https://docs.rs/crate/diff-report-rs/latest" id="180">
      <title>diff-report-rs 0.1.0 - Docs.rs#__#&lt;&lt;cargo clippy --message-format=json-diagnostic-rendered-ansi#green&gt;&gt; &lt;&lt;| diff-report-rs $GITHUB_BASE_REF...$GITHUB_HEAD_REF $GITHUB_HEAD_REF#green&gt;&gt; &lt;&lt;useful in the GitHub actions triggered by a pull request#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/rustc/lints/listing/warn-by-default.html" id="1028">
      <title>Warn-by-default Lints - The rustc book#__#&lt;&lt;std::mem::needs_drop instead#green&gt;&gt; &lt;&lt;lint group&gt;&gt; &lt;&lt;constants in patterns#red&gt;&gt; &lt;&lt;not have PartialEq derived#red&gt;&gt; &lt;&lt;runtime execution of PartialEq#red&gt;&gt; &lt;&lt;can report that two constants are not equal even if they are bit-equivalent#red&gt;&gt; &lt;&lt;auto traits, e.g. Send, Sync and Unpin&gt;&gt; &lt;&lt;#[naked]&gt;&gt; &lt;&lt;rustc --check-cfg &apos;names()&apos;#green&gt;&gt; &lt;&lt;whenever an unknown condition name or value#red&gt;&gt; &lt;&lt;detects lint trigger expectations that have not been fulfilled#green&gt;&gt; &lt;&lt;#![feature(lint_reasons)]&gt;&gt; &lt;&lt;#[expect(unused_variables)]&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/rustc/lints/listing/deny-by-default.html" id="1029">
      <title>Deny-by-default Lints - The rustc book#__#&lt;&lt;crate_type =#red&gt;&gt; &lt;&lt;crate_name =#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/nh337j/write_rust_lints_without_forking_clippy/" id="1030">
      <title>(4) Write Rust lints without forking Clippy : rust#__#&lt;&lt;rustc has its own internal lint&gt;&gt; &lt;&lt;HashMap and HashSet with the faster FxHasher#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/rustc/lints/levels.html" id="1031">
      <title>Lint Levels - The rustc book#__#&lt;&lt;&apos;force-warn&apos;&gt;&gt; &lt;&lt;guaranteed to warn#green&gt;&gt; &lt;&lt;no more, no less#red&gt;&gt; &lt;&lt;even if the overall lint level is capped#red&gt;&gt; &lt;&lt;cap-lints#red&gt;&gt; &lt;&lt;&apos;forbid&apos;&gt;&gt; &lt;&lt;However, lint levels may still be capped with --cap-lints#blue&gt;&gt; &lt;&lt;rustc --cap-lints warn will make lints set to &apos;forbid&apos; just warn#red&gt;&gt; &lt;&lt;rustc lib.rs --crate-type=lib#blue&gt;&gt; &lt;&lt;order of these command line arguments is taken into account&gt;&gt; &lt;&lt;-D unused-variables -A unused-variables&gt;&gt; &lt;&lt;no way to set a lint to force-warn using an attribute#red&gt;&gt; &lt;&lt;used heavily by Cargo; it will pass --cap-lints allow#blue&gt;&gt; &lt;&lt;when compiling your dependencies#green&gt;&gt; &lt;&lt;so that if they have any warnings, they do not pollute the output of your build#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/clippy/configuration.html" id="1032">
      <title>Configuration - Clippy Documentation#__#&lt;&lt;clippy.toml or .clippy.toml&gt;&gt; &lt;&lt;table of config&gt;&gt; configurable lint&lt;&lt;configurable l&gt;&gt; &lt;&lt;with default values&gt;&gt; &lt;&lt;can use the unique value &quot;..&quot;#green&gt;&gt; &lt;&lt;extend the default#green&gt;&gt; &lt;&lt;disallowed-names = [&quot;bar&quot;, &quot;..&quot;]# -&gt; [&quot;bar&quot;, &quot;foo&quot;, &quot;baz&quot;, &quot;quux&quot;]&gt;&gt; &lt;&lt;MSRV&gt;&gt; &lt;&lt;MSRV can also be specified as an attribute#green&gt;&gt; &lt;&lt;#![clippy::msrv = &quot;1.30.0&quot;]#green&gt;&gt; &lt;&lt;can also omit the patch version when specifying the MSRV#green&gt;&gt; &lt;&lt;msrv = 1.30 is equivalent to msrv = 1.30.0#green&gt;&gt; &lt;&lt;#![feature(custom_inner_attributes)]&gt;&gt; &lt;&lt;custom_inner_attributes is an unstable feature#red&gt;&gt; msrv option&lt;&lt;Lints that recognize this&gt;&gt; &lt;&lt;feature = &quot;cargo-clippy&quot;&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/clippy/development/infrastructure/sync.html" id="1033">
      <title>Syncing changes between Clippy and rust-lang/rust - Clippy Documentation#__#&lt;&lt;every feature in Clippy is available for 2 weeks in nightly#green&gt;&gt; &lt;&lt;before it can get to beta&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/attributes/diagnostics.html#the-must_use-attribute" id="1034">
      <title>Diagnostics - The Rust Reference</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/cargo/issues/12115" id="1035">
      <title>Tracking Issue for `[lints]` table RFC 3389 · Issue #12115 · rust-lang/cargo#__#&lt;&lt;[lints] table to Cargo.toml&gt;&gt; &lt;&lt;doc.rust-lang.org/nightly/cargo/reference/unstable.html#lints&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/attributes/diagnostics.html" id="1036">
      <title>Diagnostics - The Rust Reference#__#&lt;&lt;on a function in a trait implementation, the attribute does nothing#red&gt;&gt; &lt;&lt;Trivial no-op expressions containing the value will not violate the lint#red&gt;&gt; &lt;&lt;idiomatic to use a let statement with a pattern of _ when a must-used value is purposely discarded#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="42">
    <title>crate (lib)</title>
    <bookmark href="https://jondot.medium.com/12-killer-rust-libraries-you-should-know-c60bab07624f" id="181">
      <title>12 Killer Rust Libraries You Should Try | by Dotan Nahum | Medium#__#&lt;&lt;Reqwest follows the gold standard for HTTP client&gt;&gt; &lt;&lt;slog is a very complete logging suite&gt;&gt; &lt;&lt;plugins such as term for terminal output&gt;&gt; &lt;&lt;json for JSON output&gt;&gt; &lt;&lt;log which aims to be part of standard Rust#green&gt;&gt; &lt;&lt;simpler alternative#green&gt;&gt; &lt;&lt;hyper is a fast HTTP#green&gt;&gt; &lt;&lt;in almost every high level library#green&gt;&gt; &lt;&lt;what doesn’t use hyper?&gt;&gt; &lt;&lt;Actix tries to be simpler#green&gt;&gt; &lt;&lt;it delivers#green&gt;&gt; &lt;&lt;more highlevel#green&gt;&gt; &lt;&lt;for service purposes#green&gt;&gt; &lt;&lt;more mature#green&gt;&gt; &lt;&lt;default to using Actix#green&gt;&gt; &lt;&lt;over Hyper, unless I need to build something low level&gt;&gt; &lt;&lt;jemalloc — one of the fastest#green&gt;&gt; &lt;&lt;memory allocator&gt;&gt; &lt;&lt;faster than the default OSX allocator&gt;&gt; &lt;&lt;adds some weight to your binaries (around 700kb#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md" id="182">
      <title>rfcs/text/1270-deprecation.md at master · rust-lang/rfcs#__#&lt;&lt;Cargo builds#red&gt;&gt; &lt;&lt;warnings on dependencies get silenced#red&gt;&gt; &lt;&lt;Let&apos;s say&gt;&gt; &lt;&lt;llogiq crate that depends on foobar which uses a deprecated item of serde#red&gt;&gt; &lt;&lt;never get the warning#red&gt;&gt; &lt;&lt;unless I try to build foobar directly#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/attributes/codegen.html" id="183">
      <title>Code generation - The Rust Reference#__#&lt;&lt;track_caller attribute&gt;&gt; &lt;&lt;any function with &quot;Rust&quot; ABI&gt;&gt; &lt;&lt;When applied to functions and methods in trait declarations#blue&gt;&gt; &lt;&lt;attribute applies to all implementations#green&gt;&gt; &lt;&lt;If the trait provides a default implementation with the attribute#blue&gt;&gt; &lt;&lt;also applies to override implementations#green&gt;&gt; &lt;&lt;Location of the “topmost” tracked call#blue&gt;&gt; &lt;&lt;that led to f’s invocation#green&gt;&gt; &lt;&lt;std::panic::Location::caller()&gt;&gt; &lt;&lt;coercing a function with #[track_caller] to a function pointer#red&gt;&gt; &lt;&lt;creates a shim#red&gt;&gt; &lt;&lt;A common example of this coercion#red&gt;&gt; &lt;&lt;creation of a trait object#red&gt;&gt; &lt;&lt;losing actual caller information across virtual calls#red&gt;&gt; &lt;&lt;implicit parameter#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://gist.github.com/vi/6620975b737a1caecf607e88cf6b7fea" id="1932">
      <title>List of crates that improves or experiments with Rust, but may be hard to find#__#&lt;&lt;mostly) crates that are internal to Rust#green&gt;&gt; &lt;&lt;not ones for making Rust deal with &quot;external world&quot;#red&gt;&gt; &lt;&lt;bindings, file formats, protocols#red&gt;&gt; &lt;&lt;not easy to find by conventional means&gt;&gt; &lt;&lt;no algorithm name, format or protocol to search for#red&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="43">
    <title>crates.io</title>
    <bookmark href="https://github.com/deps-rs/deps.rs" id="184">
      <title>deps-rs/deps.rs: Keep your dependencies up-to-date#__#&lt;&lt;at a glance if any of your dependencies are out of date&gt;&gt; &lt;&lt;insecure&gt;&gt; &lt;&lt;For security&gt;&gt; &lt;&lt;we query the RustSec Security Advisory Database.&gt;&gt; &lt;&lt;crates.io: https://deps.rs/crate/&lt;NAME&gt;&gt;&gt; &lt;&lt;Github, Gitlab, Bitbucket, SourceHut, Codeberg, or Gitea: https://deps.rs/repo/&lt;HOSTER&gt;/&lt;USER&gt;/&lt;REPO&gt; (where &lt;HOSTER&gt; is either github, gitlab, bitbucket, sourcehut, codeberg, or gitea/&lt;DOMAIN&gt;)&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/16nuc9w/kellnr_the_crate_registry_goes_open_source/" id="185">
      <title>(5) The Rust Programming Language#__#&lt;&lt;n source&gt;&gt; &lt;&lt;crate registry&gt;&gt; &lt;&lt;open source&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/cargo/commands/cargo-package.html" id="186">
      <title>cargo package - The Cargo Book#__#&lt;&lt;path_in_vcs will be set to a repo-relative path#green&gt;&gt; &lt;&lt;packages in subdirectories of the version control repository#green&gt;&gt; &lt;&lt;manifest file (based on the current working directory if --manifest-path is not given)#blue&gt;&gt; &lt;&lt;root of a workspace then the workspaces default members#blue&gt;&gt; &lt;&lt;workspace.default-members key in the root manifest&gt;&gt; &lt;&lt;If this is not set, a virtual workspace will include all workspace members (equivalent to passing --workspace)&gt;&gt; &lt;&lt;non-virtual workspace will include only the root crate itself#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch14-03-cargo-workspaces.html" id="187">
      <title>Cargo Workspaces - The Rust Programming Language#__#&lt;&lt;If you publish the crates in the workspace to crates.io&gt;&gt; &lt;&lt;each crate@3#red&gt;&gt; &lt;&lt;workspace@33#red&gt;&gt; &lt;&lt;need to be published separately#red&gt;&gt; &lt;&lt;Cargo doesn’t assume that crates in a workspace will depend on each other&gt;&gt; &lt;&lt;we need to be explicit about the dependency#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/oxidecomputer/dropshot/blob/main/dropshot/README-crates.io.md" id="188">
      <title>dropshot/README-crates.io.md at main · oxidecomputer/dropshot</title>
    </bookmark>
    <bookmark href="https://law.stackexchange.com/questions/6081/can-i-bundle-mit-licensed-components-in-a-apache-2-0-licensed-project" id="189">
      <title>licensing - Can I bundle MIT licensed components in a Apache 2.0 licensed project? - Law Stack Exchange</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/publishing.html" id="190">
      <title>Publishing on crates.io - The Cargo Book#__#&lt;&lt;add or remove owners, including the owner that made them an owner#red&gt;&gt; &lt;&lt;While they have permission to publish or yank versions&gt;&gt; &lt;&lt;not have the ability to add or remove owners&gt;&gt; &lt;&lt;In order to invite a team as an owner one must be a member of that team.#red&gt;&gt; &lt;&lt;to query team membership on your behalf, we now require the read:org scope&gt;&gt; &lt;&lt;may also see this error if you ever try to publish a crate that you don’t own at all, but otherwise happens to have a team.&gt;&gt; &lt;&lt;organization may be actively denying third party access#red&gt;&gt; &lt;&lt;crates.io currently has a 10MB size limit on the .crate#red&gt;&gt; &lt;&lt;check the size of the .crate file#green&gt;&gt; &lt;&lt;ensure you didn&apos;t accidentally package up large assets#red&gt;&gt; &lt;&lt;check which files#green&gt;&gt; &lt;&lt;cargo package --list#green&gt;&gt; &lt;&lt;automatically ignore files ignored by your version control system#green&gt;&gt; &lt;&lt;specify an extra set of files to ignore#green&gt;&gt; &lt;&lt;[package]#green&gt;&gt; &lt;&lt;exclude = [#green&gt;&gt; &lt;&lt;If you’d rather explicitly list the files to include#green&gt;&gt; &lt;&lt;include key, which if set, overrides the exclude#green&gt;&gt; &lt;&lt;include = [#green&gt;&gt; &lt;&lt;cargo yank --version 1.0.1&gt;&gt; &lt;&lt;“named” owner, with full rights&gt;&gt; &lt;&lt;“team” owner, with restricted right#red&gt;&gt; &lt;&lt;cargo publish --dry-run&gt;&gt; &lt;&lt;press the “Remove Restrictions”#green&gt;&gt; &lt;&lt;syntax for teams is currently github:org:team&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/crates-build-env/pkgs/container/crates-build-env%2Flinux-micro" id="191">
      <title>Package crates-build-env/linux-micro#__#&lt;&lt;If your crate fails to build#red&gt;&gt; &lt;&lt;Crater@1#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=183571" id="192">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/epage/epage.github.io/blob/source/blog/blog/how-to-maintain-100-packages-without-going-insane.md" id="193">
      <title>epage.github.io/blog/blog/how-to-maintain-100-packages-without-going-insane.md at source · epage/epage.github.io</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=286489" id="1037">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/orgs/kata-containers/packages?repo_name=kata-containers" id="1038">
      <title>Packages · Kata Containers</title>
    </bookmark>
    <bookmark href="https://github.com/kata-containers/kata-containers" id="1039">
      <title>kata-containers/kata-containers: Kata Containers is an open source project and community working to build a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs. https://katacontainers.io/#__#&lt;&lt;Packages&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=389716" id="1040">
      <title>-----</title>
    </bookmark>
  </folder>
  <folder id="44">
    <title>crates.io - Data Mining</title>
    <bookmark href="https://crates.io/data-access" id="194">
      <title>crates.io: Rust Package Registry#__#&lt;&lt;sparse index&gt;&gt; &lt;&lt;index.crates.io&gt;&gt; &lt;&lt;extremely efficient&gt;&gt; &lt;&lt;single&gt;&gt; &lt;&lt;small number of crates&gt;&gt; &lt;&lt;No rate limits&gt;&gt; &lt;&lt;rust-lang/crates.io-index&gt;&gt; &lt;&lt;more efficient&gt;&gt; &lt;&lt;most or all crates&gt;&gt; &lt;&lt;GitHub&apos;s Acceptable Use&gt;&gt; &lt;&lt;crates.io API@1&gt;&gt; &lt;&lt;1 request per second#red&gt;&gt; &lt;&lt;user-agent header that identifies your application&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/cargo/reference/registry-index.html" id="1939">
      <title>Registry Index - The Cargo Book#__#&lt;&lt;.crate file&gt;&gt; &lt;&lt;Packages with 1 character names&gt;&gt; &lt;&lt;directory named 1&gt;&gt; &lt;&lt;2 character names&gt;&gt; &lt;&lt;3 character names&gt;&gt; &lt;&lt;3/{first-character}&gt;&gt; &lt;&lt;max 64#red&gt;&gt; &lt;&lt;ignoring SemVer build metadata#red&gt;&gt; &lt;&lt;not contain two entries with a version 1.0.7 and 1.0.7+extra#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/dtolnay/get-all-crates/blob/master/README.md" id="195">
      <title>get-all-crates/README.md at master · dtolnay/get-all-crates</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=50936" id="196">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://lib.rs/about" id="197">
      <title>About // Lib.rs#__#&lt;&lt;categorizes crates#red&gt;&gt; &lt;&lt;adds missing keywords#red&gt;&gt; &lt;&lt;which crates require nightly&gt;&gt; &lt;&lt;reverse dependencies&gt;&gt; &lt;&lt;version fragmentation&gt;&gt; &lt;&lt;size&gt;&gt; &lt;&lt;with its dependencies&gt;&gt; &lt;&lt;cargo-vet&gt;&gt; &lt;&lt;cargo-crev&gt;&gt; &lt;&lt;co-authors based on git history&gt;&gt; &lt;&lt;Sorting crates just by their download#red&gt;&gt; &lt;&lt;old crates and incumbents#red&gt;&gt; &lt;&lt;a dependency of a popular crate ride on its popularity#red&gt;&gt; &lt;&lt;documentation@1&gt;&gt; &lt;&lt;examples&gt;&gt; &lt;&lt;length&gt;&gt; &lt;&lt;quality@4&gt;&gt; &lt;&lt;README@1&gt;&gt; &lt;&lt;Stability&gt;&gt; &lt;&lt;release history&gt;&gt; &lt;&lt;breaking versions#red&gt;&gt; &lt;&lt;patch versions&gt;&gt; &lt;&lt;nightly features#red&gt;&gt; &lt;&lt;tests&gt;&gt; &lt;&lt;CI@1&gt;&gt; &lt;&lt;comments&gt;&gt; &lt;&lt;crate&apos;s metadata&gt;&gt; &lt;&lt;Number of authors&gt;&gt; &lt;&lt;contributors&gt;&gt; &lt;&lt;unique dependencies&gt;&gt; &lt;&lt;actively maintained&gt;&gt; &lt;&lt;non-0.x release&gt;&gt; &lt;&lt;Reputation of maintainers&gt;&gt; &lt;&lt;blocklists#red&gt;&gt; &lt;&lt;half of users&gt;&gt; &lt;&lt;only warns about crates that are really lagging behind#green&gt;&gt; &lt;&lt;cryptocurrencies#red&gt;&gt; &lt;&lt;ban accounts that primarily exist to squat#red&gt;&gt; &lt;&lt;0.0.0-reserved#green&gt;&gt; &lt;&lt;a way to contact you that will work long-term&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://gitlab.com/lib.rs" id="198">
      <title>lib.rs · GitLab</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=322915" id="199">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/meilisearch/demos/tree/main/src/finding-crates" id="200">
      <title>demos/src/finding-crates at main · meilisearch/demos</title>
    </bookmark>
    <bookmark href="https://github.com/meilisearch/demo-finding-crates" id="201">
      <title>meilisearch/demo-finding-crates: Expose all crates from crates.io with MeiliSearch#__#&lt;&lt;archived#red&gt;&gt; &lt;&lt;now hosted at&gt;&gt; &lt;&lt;github.com/meilisearch/demos/tree/main/src/finding-crates#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=36675" id="202">
      <title>-----</title>
    </bookmark>
  </folder>
  <folder id="45">
    <title>crates.io - dead/yanked</title>
    <bookmark href="https://internals.rust-lang.org/t/about-release-dead-code-crates/16350" id="203">
      <title>About release dead code crates - Rust Internals</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/crates.io/issues/1058" id="204">
      <title>Crates who have yanked all their versions should only return name, owners, and that it&apos;s yanked · Issue #1058 · rust-lang/crates.io</title>
    </bookmark>
    <bookmark href="https://arxiv.org/pdf/2201.11821.pdf" id="205">
      <title>2201.11821.pdf</title>
    </bookmark>
    <bookmark href="https://crates.io/policies" id="206">
      <title>crates.io: Rust Package Registry#__#&lt;&lt;can leave it open for transferring ownership&gt;&gt; &lt;&lt;message in the README#green&gt;&gt; &lt;&lt;I consent to the transfer of this crate to the first person who asks help@crates.io for it.#green&gt;&gt; &lt;&lt;not have any policies to define &apos;squatting&apos;#blue&gt;&gt; &lt;&lt;will not hand over ownership of a package for that reason#blue&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="46">
    <title>database/SQL</title>
    <bookmark href="https://github.com/SeaQL" id="207">
      <title>SeaQL</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/18lxb2n/introducing_native_db_a_fast_multiplatform/" id="208">
      <title>(7) Introducing Native DB: A fast, multi-platform embedded database for Rust 🦀 : rust#__#&lt;&lt;wrapper around redb&gt;&gt; &lt;&lt;by default supports two custom types provided by the uuid and chrono crates for time&gt;&gt; &lt;&lt;and uuid&gt;&gt; &lt;&lt;you can implement the InnerKeyValue trait for your own types&gt;&gt; &lt;&lt;to use any other libraries that manage time&gt;&gt; &lt;&lt;let r = db.r_transaction().unwrap();&gt;&gt; &lt;&lt;.scan()&gt;&gt; &lt;&lt;.secondary(ItemKey::timestamp)&gt;&gt; &lt;&lt;.range(now.timestamp.clone()..)&gt;&gt; &lt;&lt;Sled is a lower level of abstraction#blue&gt;&gt; &lt;&lt;possible that the main time consumption may be due to the serializer&gt;&gt; &lt;&lt;with native_model, which has almost no overhead native_model/performance#green&gt;&gt; &lt;&lt;bincode or postcard#green&gt;&gt; &lt;&lt;wouldn&apos;t be surprised if it turns out to be more performant than SQLite#green&gt;&gt; &lt;&lt;FFI lmdb crate that firefox fixed&gt;&gt; &lt;&lt;was a huge problem with soundness#red&gt;&gt; &lt;&lt;SIGSEGV every month or so (and I gave up on it)... because it&apos;s written with C#red&gt;&gt; &lt;&lt;key-value database redb, similar to LMDB#blue&gt;&gt; &lt;&lt;SQLite is a relational database, allowing for complex queries#blue&gt;&gt; &lt;&lt;Native DB is more akin to an key-value&gt;&gt; &lt;&lt;with index&gt;&gt; &lt;&lt;SQLite boasts a wealth of features related to maintenance&gt;&gt; &lt;&lt;Native DB lacks#red&gt;&gt; &lt;&lt;SQLite does not have event subscription#red&gt;&gt; &lt;&lt;but for a single connection&gt;&gt; &lt;&lt;whereas Native DB does#green&gt;&gt; &lt;&lt;SQLite, you need to map your program&apos;s data in Rust to an SQL schema#red&gt;&gt; &lt;&lt;Native DB does this automatically#green&gt;&gt; &lt;&lt;no need to map your Rust types to the clusterfucked hellscape that relational databases call &quot;types&quot;#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/spacejam/sled" id="209">
      <title>spacejam/sled: the champagne of beta embedded databases</title>
    </bookmark>
  </folder>
  <folder id="47">
    <title>debug, test</title>
    <folder id="210">
      <title>Debug</title>
      <bookmark href="https://separator.floccus.org/?id=851162" id="578">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/educe" id="579">
        <title>educe - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/scope/raii.html" id="580">
        <title>RAII - Rust By Example#__#&lt;&lt;whenever an object goes out of scope, its destructor is called and its owned resources are freed#green&gt;&gt; &lt;&lt;check for memory errors using valgrind#green&gt;&gt; &lt;&lt;destructor in Rust is provided through the Drop trait#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rickyhan.com/jekyll/update/2019/12/22/convert-to-async-rust.html" id="581">
        <title>How to Detect Accidental Blocking Code... - performance async</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch05-02-example-structs.html" id="582">
        <title>An Example Program Using Structs - The Rust Programming Language#__#&lt;&lt;parameters are related, but that’s not expressed anywhere#red&gt;&gt; &lt;&lt;readable and more manageable to group#green&gt;&gt; &lt;&lt;{:#?} for pretty-print#green&gt;&gt; &lt;&lt;to read; in those cases, we can use {:#?} instead of {:?}#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/google/evcxr" id="583">
        <title>google/evcxr#__#&lt;&lt;evcxr_jupyter - A Jupyter Kernel#green&gt;&gt; &lt;&lt;evcxr_repl - A Rust REPL#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://medium.com/@adityapadhi36/debugging-rust-applications-in-vscode-4d17ac0e2711" id="584">
        <title>Develop &amp; Debug Rust applications in...#__#&lt;&lt;run cargo build after every successful code change#green&gt;&gt; &lt;&lt;debug point is not reachable#red&gt;&gt; &lt;&lt;stdin() doesn’t work with debugger#red&gt;&gt; &lt;&lt;make an extra entry in the lauch.json#green&gt;&gt; &lt;&lt;“terminal”: “integrated”#green&gt;&gt; Use &quot;rust-analyzer&quot; instead. When (possibly after a VS Code restart) &quot;rust-analyzer&quot; shows a popup about downloading &quot;language server version....&quot; - donwload it. Still use &quot;rust-lang&quot; extension, too.&lt;&lt;rls (rust language server)#red&gt;&gt; &lt;&lt;CodeLLDB@1#green&gt;&gt; &lt;&lt;Enter this config#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/39204908/how-to-check-release-debug-builds-using-cfg-in-rust" id="585">
        <title>debugging - How to check release / debug builds using cfg in Rust? - Stack Overflow#__#&lt;&lt;#[cfg(debug_assertions)]#green&gt;&gt; &lt;&lt;fn example() {#green&gt;&gt; &lt;&lt;#[cfg(not(debug_assertions))]#green&gt;&gt; &lt;&lt;fn example() {@1#green&gt;&gt; &lt;&lt;if cfg!(debug_assertions) {#green&gt;&gt; &lt;&lt;alternative, slightly more complicated way, is to use #[cfg(feature = &quot;debug&quot;)] and create a build script that enables a &quot;debug&quot; feature for your crate#green&gt;&gt;&lt;&lt;this doesn&apos;t work in build scripts#red&gt;&gt; &lt;&lt;if it&apos;s #[cfg(debug_assertions)] instead of#red&gt;&gt; &lt;&lt;#[cfg(debug_assertions)] {...}#green&gt;&gt; &lt;&lt;error[E0658]: attributes on expressions are experimental#red&gt;&gt; &lt;&lt;error: removing an expression is not supported in this position#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/fmt/index.html" id="586">
        <title>std::fmt - Rust#__#&lt;&lt;{:?}&gt;&gt; &lt;&lt;&quot;{:04}&quot;, 42&gt;&gt; &lt;&lt;{:#?}&gt;&gt; &lt;&lt;format string {2} {1} {0}, however, would format arguments in reverse&gt;&gt; &lt;&lt;&quot;{a} {c} {b}&quot;, a=&quot;a&quot;, b=&apos;b&apos;, c=3&gt;&gt; &lt;&lt;not valid to put positional parameters (those without names) after arguments that have names.#red&gt;&gt; &lt;&lt;not valid to provide named parameters that are unused#red&gt;&gt; &lt;&lt;{:5}&gt;&gt; &lt;&lt;&quot;Hello {:1$}!&quot;, &quot;x&quot;, 5&gt;&gt; &lt;&lt;&quot;Hello {1:0$}!&quot;, 5, &quot;x&quot;&gt;&gt; &lt;&lt;&quot;Hello {:width$}!&quot;, &quot;x&quot;, width = 5&gt;&gt; &lt;&lt;let width = 5;#green&gt;&gt; &lt;&lt;&quot;Hello {:width$}!&quot;, &quot;x&quot;@1#green&gt;&gt; &lt;&lt;minimum width&gt;&gt; &lt;&lt;types to be formatted via {:x}#green&gt;&gt; &lt;&lt;{:&lt;5}#green&gt;&gt; &lt;&lt;to_string method. This will use the Display#green&gt;&gt; &lt;&lt;If no format is specified (as in {} or {:6}), then the format trait used is the Display#green&gt;&gt; &lt;&lt;this formatting ignores#red&gt;&gt; &lt;&lt;various flags#red&gt;&gt; &lt;&lt;3 fractional digits#green&gt;&gt; &lt;&lt;significantly different#red&gt;&gt; &lt;&lt;value=4&gt;&gt; &lt;&lt;{people}&gt;&gt; &lt;&lt;leading zeros&gt;&gt; &lt;&lt;intermingling the two types of positional specifiers#red&gt;&gt; &lt;&lt;“next argument” specifier can be thought of as an iterator over the argument&gt;&gt; &lt;&lt;internal iterator over the argument has not been advanced by the time the first {}&gt;&gt; &lt;&lt;parameters that explicitly name their argument do not affect parameters that do not name&gt;&gt; &lt;&lt;may refer to the same argument more than once&gt;&gt; &lt;&lt;Fill/Alignment&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/uw-pluverse/perses" id="587">
        <title>uw-pluverse/perses: Language-agnostic program reducer.</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rustc-dev-guide/issues/443" id="1194">
        <title>Explain how to use gdb to debug the compiler · Issue #443 · rust-lang/rustc-dev-guide</title>
      </bookmark>
      <bookmark href="https://jason-williams.co.uk/posts/debugging-rust-in-vscode/" id="1195">
        <title>Jason Williams - Debugging Rust in VSCode</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/attributes/debugger.html#the-debugger_visualizer-attribute" id="1196">
        <title>Debugger - The Rust Reference</title>
      </bookmark>
    </folder>
    <folder id="211">
      <title>Debug - FireDBG</title>
      <bookmark href="https://github.com/SeaQL/FireDBG.for.Rust/blob/main/README.md" id="588">
        <title>FireDBG.for.Rust/README.md at main · SeaQL/FireDBG.for.Rust</title>
      </bookmark>
      <bookmark href="https://github.com/SeaQL/.github/blob/master/CONTRIBUTING.md" id="589">
        <title>.github/CONTRIBUTING.md at master · SeaQL/.github</title>
      </bookmark>
      <bookmark href="https://firedbg.sea-ql.org/blog/2023-12-12-introducing-firedbg/" id="590">
        <title>Introducing FireDBG for Rust | FireDBG - 🔥 Time Travel Visual Debugger for Rust</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=633900" id="591">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/SeaQL/FireDBG.for.Rust/blob/main/INSTALL.md" id="592">
        <title>FireDBG.for.Rust/INSTALL.md at main · SeaQL/FireDBG.for.Rust</title>
      </bookmark>
      <bookmark href="https://firedbg.sea-ql.org/blog/2024-01-31-visual-dynamic-program/" id="593">
        <title>Visualizing Dynamic Programming - Part 1 | FireDBG - 🔥 Time Travel Visual Debugger for Rust#__#&lt;&lt;video Mastering Dynamic Programming#green&gt;&gt; &lt;&lt;This tutorial is based off that&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=161134" id="594">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://rr-project.org/" id="595">
        <title>rr: lightweight recording &amp; deterministic debugging#__#&lt;&lt;replacing — well, enhancing — gdb&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/SeaQL/FireDBG.for.Rust/discussions" id="1952">
        <title>SeaQL/FireDBG.for.Rust · Discussions · GitHub</title>
      </bookmark>
    </folder>
    <folder id="212">
      <title>MIRI</title>
      <bookmark href="https://github.com/rust-lang/miri" id="596">
        <title>rust-lang/miri: An interpreter for Rust&apos;s mid-level intermediate representation#__#&lt;&lt;If the program relies on unspecified details of how data is laid out, it will still run fine in Miri#green&gt;&gt; &lt;&lt;but might break (including causing UB) on different compiler versions#red&gt;&gt; &lt;&lt;when it depends, for example, on where exactly in memory allocations end up#red&gt;&gt; &lt;&lt;exact interleaving of concurrent threads#red&gt;&gt; &lt;&lt;can alleviate this to some extent by running Miri with different values for -Zmiri-seed#green&gt;&gt; &lt;&lt;platform-independent#red&gt;&gt; &lt;&lt;the program has no access to most platform-specific APIs or FFI#red&gt;&gt; &lt;&lt;few APIs have been implemented (such as printing to stdout)#green&gt;&gt; &lt;&lt;currently does not support SIMD or networking#red&gt;&gt; &lt;&lt;Threading support is not finished yet#red&gt;&gt; &lt;&lt;weak memory effects are not emulated#red&gt;&gt; &lt;&lt;cargo clean#green&gt;&gt; &lt;&lt;cargo miri test#green&gt;&gt; &lt;&lt;cargo miri run#green&gt;&gt; &lt;&lt;same flags as cargo run/test#green&gt;&gt; &lt;&lt;#[cfg_attr(miri, ignore)]#green&gt;&gt; &lt;&lt;big-endian@1#red&gt;&gt; &lt;&lt;on CI#red&gt;&gt; &lt;&lt;RUST_BACKTRACE=1 MIRIFLAGS=&quot;-Zmiri-disable-isolation&quot;#green&gt;&gt; &lt;&lt;-Zmiri-disable-validation@1#green&gt;&gt; &lt;&lt;Miri can miss bugs@1#red&gt;&gt; &lt;&lt;-Zmiri-disable-stacked-borrows@1#green&gt;&gt; &lt;&lt;Miri run faster, but#green&gt;&gt; &lt;&lt;aliasing violations#red&gt;&gt; &lt;&lt;help to make Miri run faster#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://pramode.in/2020/11/08/miri-detect-ub-rust/" id="597">
        <title>Detecting undefined behaviour in Rust code using Miri#__#&lt;&lt;rustup +nightly component add miri#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md" id="598">
        <title>rfcs/1211-mir.md at master · rust-lang/rfcs · GitHub</title>
      </bookmark>
      <bookmark href="https://rustc-dev-guide.rust-lang.org/mir/index.html" id="599">
        <title>The MIR (Mid-level IR) - Rust Compiler Development Guide#__#&lt;&lt;radically simplified form of Rust&gt;&gt; &lt;&lt;for certain flow-sensitive safety checks&gt;&gt; &lt;&lt;notably the borrow checker&gt;&gt; &lt;&lt;also for optimization&gt;&gt; &lt;&lt;code generation&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="213">
      <title>Mockall</title>
      <bookmark href="https://asomers.github.io/mock_shootout/" id="600">
        <title>Rust Mock Shootout! | Comparison of several Rust mocking libraries#__#&lt;&lt;Mockall#green&gt;&gt; &lt;&lt;most ergonomic#green&gt;&gt; &lt;&lt;no unsafe code#red&gt;&gt; &lt;&lt;Validating call sequences#green&gt;&gt; &lt;&lt;Mockers and Mockall have full support for validating the sequences of multiple#green&gt;&gt; &lt;&lt;objects’ methods.#green&gt;&gt; &lt;&lt;However, Simulacrum’s sequence syntax is more elegant#red&gt;&gt; &lt;&lt;Mock-it and Simulacrum proved surprisingly#green&gt;&gt; &lt;&lt;versatile#green&gt;&gt; &lt;&lt;low-level access into the#green&gt;&gt; &lt;&lt;library itself.#green&gt;&gt; &lt;&lt;Mockall and Mockers are probably the easiest#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/mockall/latest/mockall/" id="601">
        <title>mockall - Rust#__#&lt;&lt;easiest is to use#[automock]&gt;&gt; &lt;&lt;most traits&gt;&gt; &lt;&lt;or structs that only have a single impl block&gt;&gt; &lt;&lt;things it can’t handle, there is mock!&gt;&gt; &lt;&lt;“Mock” prepended&gt;&gt; &lt;&lt;.return_const&gt;&gt; &lt;&lt;.returning@1&gt;&gt; &lt;&lt;constants that aren’t Clone#red&gt;&gt; &lt;&lt;returned with the return_once#green&gt;&gt; &lt;&lt;return_once can also be used for computing the return value with an FnOnce&gt;&gt; &lt;&lt;also triggering side effects&gt;&gt; &lt;&lt;Mock objects are always Send&gt;&gt; &lt;&lt;to use a return type that isn’t, you can use the return_const_st, returning_st, or return_once_st&gt;&gt; &lt;&lt;to match arguments that are not Send, you can use the withf_st&gt;&gt; &lt;&lt;expectations may have argument matchers&gt;&gt; &lt;&lt;A matcher is anything that implements the Predicate&gt;&gt; &lt;&lt;.with(eq(42))#green&gt;&gt; &lt;&lt;.withf(#green&gt;&gt; &lt;&lt;expectations set on a given method are evaluated in FIFO&gt;&gt; &lt;&lt;first matching expectation is used&gt;&gt; &lt;&lt;common pattern&gt;&gt; &lt;&lt;multiple expectations&gt;&gt; &lt;&lt;order of decreasing specificity#green&gt;&gt; &lt;&lt;last expectation can provide a default or fallback&gt;&gt; &lt;&lt;By default, every expectation is allowed to be called an unlimited number of times&gt;&gt; &lt;&lt;also never#green&gt;&gt; &lt;&lt;By default expectations may be matched in any order.&gt;&gt; &lt;&lt;Any expectations may be added to the same sequence.#green&gt;&gt; &lt;&lt;don’t even need to come from the same object#green&gt;&gt; &lt;&lt;.in_sequence(&amp;mut seq)#green&gt;&gt; &lt;&lt;validate all expectations mid-test, throw them away#green&gt;&gt; &lt;&lt;add new ones&gt;&gt; &lt;&lt;checkpoint method. When called, it will immediately validate all methods’ expectations#green&gt;&gt; &lt;&lt;Afterwards, those expectations will be cleared&gt;&gt; &lt;&lt;you can add new expectations#green&gt;&gt; &lt;&lt;keep testing#green&gt;&gt; &lt;&lt;one catch: the matcher Predicate will take reference arguments by value#red&gt;&gt; &lt;&lt;not by reference#red&gt;&gt; &lt;&lt;also use reference return values&gt;&gt; &lt;&lt;restriction:#red&gt;&gt; &lt;&lt;lifetime of the returned reference must be either the same as the lifetime of the mock object#red&gt;&gt; &lt;&lt;or &apos;static#red&gt;&gt; &lt;&lt;alter import paths during test#green&gt;&gt; &lt;&lt;#[automock] works for structs that have a single impl block&gt;&gt; &lt;&lt;#[double]#green&gt;&gt; &lt;&lt;structs with more than one impl#red&gt;&gt; &lt;&lt;or that have unsupported #[derive(X)] attributes, e.g. Clone#red&gt;&gt; &lt;&lt;all generic parameters must be &apos;static#red&gt;&gt; &lt;&lt;generic lifetime parameters are not allowed#red&gt;&gt; &lt;&lt;impl Thing {&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/mockall_double/latest/mockall_double/attr.double.html" id="602">
        <title>double in mockall_double - Rust#__#&lt;&lt;to replace a type, it must come from a separate module#red&gt;&gt; &lt;&lt;place it into a submodule#green&gt;&gt; &lt;&lt;deeply nested paths&gt;&gt; &lt;&lt;grouped imports&gt;&gt; &lt;&lt;type aliases&gt;&gt; &lt;&lt;renamed imports&gt;&gt; &lt;&lt;With renamed imports, it isn’t even necessary to declare a submodule.#green&gt;&gt; &lt;&lt;#[double] can also import entire mocked modules#green&gt;&gt; &lt;&lt;In this case the naming convention is different.#red&gt;&gt; &lt;&lt;will replace “xxx” with “mock_xxx”#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/mockall_double/latest/mockall_double/index.html" id="603">
        <title>mockall_double - Rust#__#&lt;&lt;defined in its own crate&gt;&gt; &lt;&lt;so that the bulk of Mockall can remain a dev-dependency#green&gt;&gt; &lt;&lt;instead of a regular dependency#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/asomers/mockall" id="604">
        <title>asomers/mockall: A powerful mock object library for Rust#__#&lt;&lt;[dev-dependencies]&gt;&gt; &lt;&lt;#[cfg(test)]&gt;&gt; &lt;&lt;#[cfg_attr(test, automock)]&gt;&gt; &lt;&lt;Mockall also uses proc macros, and copies many of Mockers&apos; features&gt;&gt; &lt;&lt;conventions&gt;&gt; &lt;&lt;also takes inspiration from Simulacrum&gt;&gt; &lt;&lt;not built in a day#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/mockall/latest/mockall/macro.mock.html" id="605">
        <title>mock in mockall - Rust#__#&lt;&lt;0 or more methods of the structure&gt;&gt; &lt;&lt;written without bodies#red&gt;&gt; &lt;&lt;enclosed in a {} block#green&gt;&gt; &lt;&lt;0 or more impl blocks#green&gt;&gt; &lt;&lt;also without bodies#red&gt;&gt; &lt;&lt;Mock a trait&gt;&gt; &lt;&lt;Foo for MyStruct#green&gt;&gt; &lt;&lt;generic struct’s implementation of#red&gt;&gt; &lt;&lt;generic trait#red&gt;&gt; &lt;&lt;use the same namespace for their generic parameters#green&gt;&gt; &lt;&lt;not#red&gt;&gt; &lt;&lt;Q: &apos;static#red&gt;&gt; &lt;&lt;T: &apos;static@2#red&gt;&gt; &lt;&lt;Associated types&gt;&gt; &lt;&lt;type Item=u32;#green&gt;&gt; &lt;&lt;repeating the struct’s or trait’s definitions#red&gt;&gt; &lt;&lt;unsupported #[derive(X)] attribute, e.g. Clone#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/mockall/latest/mockall/attr.automock.html" id="606">
        <title>automock in mockall - Rust#__#&lt;&lt;structs that have a single impl block#red&gt;&gt; &lt;&lt;For each method of the original, the mock struct will have a method named expect_whatever&gt;&gt; &lt;&lt;also be one checkpoint method that calls checkpoint for every single mocked method&gt;&gt; &lt;&lt;mock a module full of functions&gt;&gt; &lt;&lt;Mocking a struct or trait defined in another crate#red&gt;&gt; &lt;&lt;almost all traits&gt;&gt; &lt;&lt;trait impl on a struct:&gt;&gt; &lt;&lt;trait with associated types#red&gt;&gt; &lt;&lt;adding a metaitem to the attribute&gt;&gt; &lt;&lt;#[automock(type Item=u32;)]&gt;&gt; &lt;&lt;foreign functions&gt;&gt; &lt;&lt;struct that has multiple impl blocks#red&gt;&gt; &lt;&lt;including structs that implement traits#red&gt;&gt; &lt;&lt;trait with trait bounds#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/mockall/latest/mockall/index.html" id="607">
        <title>mockall - Rust</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=804317" id="608">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/asomers/mockall/issues/152" id="609">
        <title>Support &amp;dyn T arguments · Issue #152 · asomers/mockall#__#&lt;&lt;Instead of adding &apos;static#red&gt;&gt; &lt;&lt;add a lifetime parameter#green&gt;&gt; &lt;&lt;Rustc won&apos;t complain about the same method not compatible with trait#blue&gt;&gt; &lt;&lt;nd you will have more flexibility in how you call it#green&gt;&gt; &lt;&lt;async fn my_method&lt;&apos;a&gt;(&amp;self, value: &amp;(dyn MyOtherTrait + &apos;a))#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/asomers/mockall/issues/59" id="1197">
        <title>Is there a way to specify derives for the generated mock struct? · Issue #59 · asomers/mockall#__#&lt;&lt;mock! doesn&apos;t contain an implementation of clone#red&gt;&gt; &lt;&lt;just allows the clone method to be mocked#green&gt;&gt; &lt;&lt;fn clone(&amp;self) -&gt; Self;&gt;&gt; &lt;&lt;s/Clone/trait Clone/#green&gt;&gt; &lt;&lt;two birds with one impl:&gt;&gt; &lt;&lt;forward trait impl for Arc&lt;T&gt;&gt;&gt; &lt;&lt;Arc&lt;T&gt; provided the cloning#green&gt;&gt; &lt;&lt;and because my trait has no mutability#green&gt;&gt; &lt;&lt;seamlessly forward through to the underlying trait object through the Arc&lt;T&gt;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/asomers/mockall/issues/9" id="1198">
        <title>Can&apos;t mock a method that returns a reference to a non-Send type · Issue #9 · asomers/mockall#__#&lt;&lt;fixed#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/asomers/mockall/issues/366" id="1199">
        <title>capture argument values for further assertions · Issue #366 · asomers/mockall#__#&lt;&lt;Open#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://lib.rs/crates/linkme" id="1200">
        <title>Linkme — Cargo library // Lib.rs</title>
      </bookmark>
    </folder>
    <folder id="214">
      <title>panic!</title>
      <bookmark href="https://doc.rust-lang.org/nightly/std/panic/fn.set_hook.html" id="610">
        <title>set_hook in std::panic - Rust#__#&lt;&lt;before the panic runtime is invoked#blue&gt;&gt; &lt;&lt;will run with both#green&gt;&gt; &lt;&lt;aborting#green&gt;&gt; &lt;&lt;unwinding runtimes#green&gt;&gt; &lt;&lt;default hook, which is registered at startup, prints a message to standard error&gt;&gt; &lt;&lt;generates a backtrace if requested#blue&gt;&gt; &lt;&lt;global#red&gt;&gt; &lt;&lt;Panics if called from a panicking thread#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/panic/struct.AssertUnwindSafe.html" id="611">
        <title>AssertUnwindSafe in std::panic - Rust#__#&lt;&lt;if &amp;mut T is captured the compiler will generate a warning indicating that it is not unwind safe.#red&gt;&gt; &lt;&lt;might not be the case#green&gt;&gt; &lt;&lt;One way&gt;&gt; &lt;&lt;the entire closure itself is unwind safe#green&gt;&gt; &lt;&lt;bypassing all checks for all variables:&gt;&gt; &lt;&lt;AssertUnwindSafe(|| {#green&gt;&gt; &lt;&lt;blanket assertion that all captured variables are unwind safe#blue&gt;&gt; &lt;&lt;downside that if new captures are added in the future#red&gt;&gt; &lt;&lt;will also be considered unwind safe#red&gt;&gt; &lt;&lt;may prefer to just wrap individual captures#green&gt;&gt; &lt;&lt;let mut wrapper = AssertUnwindSafe(&amp;mut variable);#green&gt;&gt; &lt;&lt;**wrapper +=#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/panic/fn.update_hook.html" id="612">
        <title>update_hook in std::panic - Rust#__#&lt;&lt;panic::update_hook(move |prev, info| {&gt;&gt; &lt;&lt;Panics if called from a panicking thread.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/profiles.html" id="613">
        <title>Profiles - The Cargo Book#__#&lt;&lt;Tests, benchmarks, build scripts, and proc macros ignore the panic setting#red&gt;&gt; &lt;&lt;panic-abort-tests unstable flag which enables abort#green&gt;&gt; &lt;&lt;when using the abort strategy and building a test&gt;&gt; &lt;&lt;dependencies will also be forced to build with the unwind&gt;&gt; &lt;&lt;Incremental compilation is only used for workspace members#red&gt;&gt; &lt;&lt;“path” dependencies#red&gt;&gt; &lt;&lt;only looks at the profile settings in the Cargo.toml manifest at the root#red&gt;&gt; &lt;&lt;Profile settings defined in dependencies will be ignored#red&gt;&gt; &lt;&lt;for all dependencies&gt;&gt; &lt;&lt;but not any workspace member#red&gt;&gt; &lt;&lt;&quot;*&quot; package name:#green&gt;&gt; &lt;&lt;cargo build --profile release-lto&gt;&gt; &lt;&lt;cargo test@2&gt;&gt; &lt;&lt;example, test, and benchmark&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/nomicon/unwinding.html" id="614">
        <title>Unwinding - The Rustonomicon#__#&lt;&lt;Panics could only be caught by the owner of the task&gt;&gt; &lt;&lt;handled or that task would itself panic&gt;&gt; &lt;&lt;tasks were expected to die#blue&gt;&gt; &lt;&lt;during normal execution&gt;&gt; &lt;&lt;push for less-and-less abstraction#red&gt;&gt; &lt;&lt;Light-weight tasks were killed#red&gt;&gt; &lt;&lt;in the name of heavy-weight OS threads&gt;&gt; &lt;&lt;Rust as of 1.0 panics can only be caught by the parent thread#red&gt;&gt; &lt;&lt;Rust&apos;s current unwinding implementation is heavily optimized for the &quot;doesn&apos;t unwind&quot; case&gt;&gt; &lt;&lt;no runtime cost for the program being ready to unwind&gt;&gt; &lt;&lt;As a consequence&gt;&gt; &lt;&lt;actually unwinding will be more expensive#red&gt;&gt; &lt;&lt;than in e.g. Java#green&gt;&gt; &lt;&lt;not specified to be fundamentally compatible with any other language&apos;s unwinding#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=627203" id="615">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/panic/fn.always_abort.html" id="616">
        <title>always_abort in std::panic - Rust#__#&lt;&lt;without running the panic hook#red&gt;&gt; &lt;&lt;no way to undo#red&gt;&gt; &lt;&lt;until the process exits&gt;&gt; &lt;&lt;or execs#blue&gt;&gt; &lt;&lt;Use after fork#green&gt;&gt; &lt;&lt;particularly useful for calling after libc::fork#green&gt;&gt; &lt;&lt;After fork, in a multithreaded#red&gt;&gt; &lt;&lt;on many platforms&gt;&gt; &lt;&lt;not safe to call the allocator#red&gt;&gt; &lt;&lt;also generally highly undesirable for an unwind#red&gt;&gt; &lt;&lt;unwind past the fork#red&gt;&gt; &lt;&lt;panic::always_abort() helps avoid both#green&gt;&gt; &lt;&lt;if there is a panic&gt;&gt; &lt;&lt;abort will occur without allocating#green&gt;&gt; &lt;&lt;provided that the arguments to panic can be formatted without allocating#red&gt;&gt; &lt;&lt;panic::always_abort();&gt;&gt; &lt;&lt;panic::catch_unwind(|| {&gt;&gt; &lt;&lt;panic!(&quot;inside the catch&quot;);&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust/issues/84438" id="617">
        <title>Tracking Issue for panic::always_abort() · Issue #84438 · rust-lang/rust#__#&lt;&lt;discussion in the impl PR it seems this sets global flag#blue&gt;&gt; &lt;&lt;instead of thread-local#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/src/std/panicking.rs.html" id="618">
        <title>panicking.rs - source#__#&lt;&lt;a fast path in `count_is_zero` (which is used by `panicking`)#blue&gt;&gt; &lt;&lt;In any particular&gt;&gt; &lt;&lt;thread, if that thread currently views `GLOBAL_PANIC_COUNT` as being zero,&gt;&gt; &lt;&lt;then `LOCAL_PANIC_COUNT` in that thread is zero#green&gt;&gt; &lt;&lt;Additionally, the top bit of GLOBAL_PANIC_COUNT (GLOBAL_ALWAYS_ABORT_FLAG)&gt;&gt; &lt;&lt;Accessing LOCAL_PANIC_COUNT in a child created by `libc::fork` would lead to a memory#red&gt;&gt; &lt;&lt;allocation.#red&gt;&gt; &lt;&lt;Only GLOBAL_PANIC_COUNT can be accessed in this situation.#green&gt;&gt; &lt;&lt;sufficient because a child process will always have exactly one thread only.#green&gt;&gt; &lt;&lt;also updates thread-local state to keep track#green&gt;&gt; &lt;&lt;whether a panic@1#blue&gt;&gt; &lt;&lt;hook is currently executing#blue&gt;&gt; &lt;&lt;Fast path#green&gt;&gt; &lt;&lt;#[inline]@8#green&gt;&gt; &lt;&lt;a relaxed atomic load#green&gt;&gt; &lt;&lt;similar to a normal&gt;&gt; &lt;&lt;aligned memory read&gt;&gt; &lt;&lt;but with&gt;&gt; &lt;&lt;compiler optimization restrictions&gt;&gt; &lt;&lt;On the other hand, a TLS access#red&gt;&gt; &lt;&lt;calling a non-inlinable function (such as `__tls_get_addr`#red&gt;&gt; https://people.freebsd.org/~marcel/tls.html&lt;&lt;when using the GD TLS model#blue&gt;&gt; &lt;&lt;Slow path is in a separate function&gt;&gt; &lt;&lt;reduce the amount of code#green&gt;&gt; &lt;&lt;inlined from `count_is_zero`#blue&gt;&gt; &lt;&lt;#[inline(never)]#green&gt;&gt; &lt;&lt;#[cold]#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/panic/fn.catch_unwind.html" id="619">
        <title>catch_unwind in std::panic - Rust#__#&lt;&lt;undefined behavior to unwind from Rust code into foreign code#red&gt;&gt; &lt;&lt;this function is not guaranteed to catch all panics#red&gt;&gt; &lt;&lt;see the “Notes”#green&gt;&gt; &lt;&lt;A panic in Rust is not always implemented via unwinding#red&gt;&gt; &lt;&lt;but can be implemented by aborting the process as well#blue&gt;&gt; &lt;&lt;be careful in how you drop the result of this function#red&gt;&gt; &lt;&lt;panic payload#red&gt;&gt; &lt;&lt;dropping that may in turn panic!#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=229941" id="1201">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/mmastrac/rust-ctor/blob/master/README.md" id="1202">
        <title>rust-ctor/README.md at master · mmastrac/rust-ctor#__#&lt;&lt;Linux, OSX, FreeBSD, NetBSD, Illumos, OpenBSD, DragonFlyBSD, Android, iOS, and Windows&gt;&gt; &lt;&lt;regularly tested&gt;&gt; &lt;&lt;explicitly subverts#red&gt;&gt; &lt;&lt;limit itself to libc functions&gt;&gt; &lt;&lt;not rely on Rust&apos;s stdlib#red&gt;&gt; &lt;&lt;For example, using stdout in a dtor#red&gt;&gt; &lt;&lt;Consider using the libc-print crate#green&gt;&gt; &lt;&lt;signal processing#red&gt;&gt; &lt;&lt;panic handling#red&gt;&gt; &lt;&lt;early code#red&gt;&gt; &lt;&lt;In most cases, sys_common::at_exit#green&gt;&gt; &lt;&lt;than #[dtor]#red&gt;&gt; &lt;&lt;some platforms, unloading of shared libraries#red&gt;&gt; &lt;&lt;not actually happen until process exit#red&gt;&gt; &lt;&lt;even if explicitly unloaded#red&gt;&gt; &lt;&lt;ules for this are arcane#red&gt;&gt; &lt;&lt;For example, thread-local storage on OSX will affect this#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gitlab.com/okannen/static_init/-/blob/master/README.md" id="1203">
        <title>README.md · master · Olivier Kannengieser / static_init · GitLab#__#&lt;&lt;Also&gt;&gt; &lt;&lt;execution&gt;&gt; &lt;&lt;start-up/exit&gt;&gt; &lt;&lt;very difficult than it looks-like#red&gt;&gt; &lt;&lt;dropped&gt;&gt; &lt;&lt;safe mutable lazy statics (locked)&gt;&gt; &lt;&lt;no_std&gt;&gt; &lt;&lt;magnitude faster&gt;&gt; &lt;&lt;any other solution#red&gt;&gt; &lt;&lt;execution at program exit&gt;&gt; &lt;&lt;without allocation#red&gt;&gt; &lt;&lt;opposed to libc::at_exit#red&gt;&gt; &lt;&lt;ergonomic#green&gt;&gt; &lt;&lt;nigtly, thread_locals and safe mutable thread_locals#blue&gt;&gt; &lt;&lt;dropped at thread exit#green&gt;&gt; &lt;&lt;lowest possible overhead#green&gt;&gt; &lt;&lt;all platforms#green&gt;&gt; &lt;&lt;unixes#green&gt;&gt; &lt;&lt;lesser lazy statics#green&gt;&gt; &lt;&lt;lazy during program startup&gt;&gt; &lt;&lt;before main&gt;&gt; &lt;&lt;Once main is called, those statics are all guaranteed#green&gt;&gt; &lt;&lt;add the mut&gt;&gt; &lt;&lt;mutable locked&gt;&gt; &lt;&lt;apdaptative phase locker&gt;&gt; &lt;&lt;lazyness&gt;&gt; &lt;&lt;argument lazy&gt;&gt; &lt;&lt;Even if the static is not mut, dropped statics are always locked&gt;&gt; &lt;&lt;finalize attribute&gt;&gt; &lt;&lt;a &quot;drop&quot; equivalent at program exit but leaves the static unchanged&gt;&gt; &lt;&lt;linux or Reddox (TBC)&gt;&gt; &lt;&lt;no_std.&gt;&gt; &lt;&lt;directly the futex system call&gt;&gt; &lt;&lt;On other platform no_std&gt;&gt; &lt;&lt;spin_loop&gt;&gt; &lt;&lt;spin loop are not system-fair#red&gt;&gt; &lt;&lt;entire system slow-down#red&gt;&gt; &lt;&lt;not Mac yet#red&gt;&gt; &lt;&lt;initialization is forced before main&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=658864" id="1204">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/inventory" id="1205">
        <title>dtolnay/inventory: Typed distributed plugin registration</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/function-type-registration-at-startup/23458/11" id="1206">
        <title>Function/type registration at startup - help - The Rust Programming Language Forum#__#&lt;&lt;use inventory&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=415968" id="1207">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://smallcultfollowing.com/babysteps/blog/2022/01/27/panics-vs-cancellation-part-1/" id="1208">
        <title>Panics vs cancellation, part 1 · baby steps#__#&lt;&lt;catch_unwind#red&gt;&gt; &lt;&lt;propagating errors#green&gt;&gt; &lt;&lt;recovering#red&gt;&gt; &lt;&lt;handling them in a structured way#red&gt;&gt; &lt;&lt;exceptions make errors invisible#red&gt;&gt; &lt;&lt;don’t think about them#red&gt;&gt; &lt;&lt;very coarse-grained#green&gt;&gt; &lt;&lt;restart that main loop&gt;&gt; &lt;&lt;Erlang&gt;&gt; &lt;&lt;January 2022&gt;&gt; &lt;&lt;invariants#red&gt;&gt; &lt;&lt;doesn’t do any explicit mutation&gt;&gt; &lt;&lt;implicit state#red&gt;&gt; &lt;&lt;cursor in the from_file#red&gt;&gt; &lt;&lt;initial&gt;&gt; &lt;&lt;panic recovery&gt;&gt; &lt;&lt;only possible at the thread boundary&gt;&gt; &lt;&lt;threads can share state#red&gt;&gt; &lt;&lt;Mutex#red&gt;&gt; &lt;&lt;communicating#red&gt;&gt; &lt;&lt;file,@1#red&gt;&gt; &lt;&lt;channel#red&gt;&gt; &lt;&lt;.1&gt;&gt; &lt;&lt;? operator&gt;&gt; &lt;&lt;some sort of recover&gt;&gt; &lt;&lt;by opting not to forward the error#red&gt;&gt; &lt;&lt;but matching instead#green&gt;&gt; &lt;&lt;send methods typically pass back the message#green&gt;&gt; &lt;&lt;in the event of an error&gt;&gt; &lt;&lt;Err(SendError(parsed_items)) =&gt;#green&gt;&gt; &lt;&lt;hard to spot in review#red&gt;&gt; &lt;&lt;? operator is invaluable when debugging#green&gt;&gt; &lt;&lt;“how could this function possibly return early?”#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://medium.com/@vamsimokari/erlang-let-it-crash-philosophy-53486d2a6da" id="1209">
        <title>Erlang “Let it Crash” Approach to Building Reliable Services | by Vamsi Mokari | Medium#__#&lt;&lt;denying reality#red&gt;&gt; &lt;&lt;Acknowledge#green&gt;&gt; &lt;&lt;uncontrolled failures#red&gt;&gt; &lt;&lt;all about&gt;&gt; &lt;&lt;control failures#blue&gt;&gt; &lt;&lt;If failures are controllable#green&gt;&gt; &lt;&lt;process is fully isolated#green&gt;&gt; &lt;&lt;shares nothing#red&gt;&gt; &lt;&lt;can’t access to its memory location directly#red&gt;&gt; &lt;&lt;Actor Model#blue&gt;&gt; &lt;&lt;won’t propagate the failure to other processes#red&gt;&gt; &lt;&lt;Erlang process is very lightweight#green&gt;&gt; &lt;&lt;can spawn 1000 ‘s#green&gt;&gt; &lt;&lt;Message passing is the only#green&gt;&gt; &lt;&lt;processes can communicate&gt;&gt; &lt;&lt;message passing in Erlang is a non-blocking#green&gt;&gt; &lt;&lt;communication is always asynchronous#blue&gt;&gt; &lt;&lt;send a message&gt;&gt; &lt;&lt;go back to your normal activity#green&gt;&gt; &lt;&lt;can check if you got a reply#green&gt;&gt; &lt;&lt;If you send a message and then die&gt;&gt; &lt;&lt;receiver will still get your message#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://smallcultfollowing.com/babysteps/blog/2024/05/02/unwind-considered-harmful/" id="1210">
        <title>Unwind considered harmful? · baby steps#__#&lt;&lt;deprecate panic=unwind#red&gt;&gt; &lt;&lt;Most production#green&gt;&gt; &lt;&lt;I know#green&gt;&gt; &lt;&lt;either already run with panic=abort#green&gt;&gt; &lt;&lt;or use unwinding in a very limited&gt;&gt; &lt;&lt;cleanup#green&gt;&gt; &lt;&lt;not to truly recover#red&gt;&gt; &lt;&lt;benefits&gt;&gt; &lt;&lt;extend the type system#green&gt;&gt; &lt;&lt;very impactful#green&gt;&gt; &lt;&lt;subtle bugs#red&gt;&gt; &lt;&lt;not saying we should remove unwinding entirely#blue&gt;&gt; &lt;&lt;able to stop at every point#red&gt;&gt; &lt;&lt;non-local burden#red&gt;&gt; &lt;&lt;invariants#red&gt;&gt; &lt;&lt;implicit control flow#red&gt;&gt; &lt;&lt;difficult to reason#red&gt;&gt; &lt;&lt;Worse&gt;&gt; &lt;&lt;doesn’t surface during “normal execution”#red&gt;&gt; &lt;&lt;initial idea&gt;&gt; &lt;&lt;always unwinding the entire#blue&gt;&gt; &lt;&lt;thread&gt;&gt; &lt;&lt;n very early Rust threads couldn’t share state at all#blue&gt;&gt; &lt;&lt;like Erlang&gt;&gt; &lt;&lt;limited the damage&gt;&gt; &lt;&lt;a thread could do&gt;&gt; &lt;&lt;both of the invariants&gt;&gt; &lt;&lt;limited unwinding’s scope&gt;&gt; &lt;&lt;untenable#red&gt;&gt; &lt;&lt;shared-mutability#red&gt;&gt; &lt;&lt;Mutex&gt;&gt; &lt;&lt;data in a disturbed state#red&gt;&gt; &lt;&lt;lock poisoning&gt;&gt; &lt;&lt;ergonomic annoyance#red&gt;&gt; &lt;&lt;imperfect#red&gt;&gt; &lt;&lt;parking_lot have simply removed it#red&gt;&gt; &lt;&lt;catch_unwind&gt;&gt; &lt;&lt;libraries like rayon&gt;&gt; &lt;&lt;simulating many logical threads with one OS thread&gt;&gt; &lt;&lt;UnwindSafe to try and discourage abuse&gt;&gt; &lt;&lt;Unwinding is supposed to be a “zero-cost abstraction”&gt;&gt; &lt;&lt;increases binary size#red&gt;&gt; &lt;&lt;reduces optimization#red&gt;&gt; &lt;&lt;“landing pads”&gt;&gt; &lt;&lt;Fuchsia&gt;&gt; &lt;&lt;10%&gt;&gt; &lt;&lt;limits optimizations&gt;&gt; &lt;&lt;more control-flow paths#red&gt;&gt; &lt;&lt;borrow checker to be more conservative#red&gt;&gt; &lt;&lt;If the only cost of unwinding was moving out of &amp;mutand inflated binary sizes, I would think that it’s probably worth it to keep it#blue&gt;&gt; &lt;&lt;functions simply cannot rely on running to completion#red&gt;&gt; &lt;&lt;unsafe code really hard#red&gt;&gt; &lt;&lt;less obvious&gt;&gt; &lt;&lt;call a trait method like x.clone()&gt;&gt; &lt;&lt;vec[i] = new_value#red&gt;&gt; &lt;&lt;destructor on vec[i]#red&gt;&gt; &lt;&lt;Must Move types untenable#red&gt;&gt; &lt;&lt;before the fn ends#red&gt;&gt; &lt;&lt;not in a practical#red&gt;&gt; &lt;&lt;could setup destructors to take the action, but it would be unworkable#red&gt;&gt; &lt;&lt;constructs that leverage process-based recovery#green&gt;&gt; &lt;&lt;panic=abort and exit handlers#green&gt;&gt; &lt;&lt;uses unwinding&gt;&gt; &lt;&lt;salsa framework#blue&gt;&gt; &lt;&lt;to abort cancelled operations in IDEs#green&gt;&gt; &lt;&lt;code is side-effect free#green&gt;&gt; &lt;&lt;in a narrow part of your codebase#blue&gt;&gt; &lt;&lt;not really reliable in the face of shared#red&gt;&gt; &lt;&lt;imits on what we can do in the language#red&gt;&gt; &lt;&lt;decreasing reliability#red&gt;&gt; &lt;&lt;were exploring an alternative approach to panics called signals&gt;&gt; &lt;&lt;Today’s panic hook is sort of a simpler version&gt;&gt; &lt;&lt;2 May 2024&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=83898" id="1348">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://lib.rs/crates/human-panic" id="1349">
        <title>Human-Panic — Rust library // Lib.rs</title>
      </bookmark>
      <bookmark href="https://lib.rs/crates/panic-analyzer" id="1350">
        <title>panic-analyzer — Rust application // Lib.rs#__#&lt;&lt;Array Indexing&gt;&gt; &lt;&lt;without bounds#red&gt;&gt; &lt;&lt;cargo panic-analyzer &gt; audit.md&gt;&gt; &lt;&lt;IGNORED_CRATES=tests,benches&gt;&gt; &lt;&lt;IGNORED_FILES=./src/tests/something.rs,./src/tests/else.rs&gt;&gt; &lt;&lt;//&gt;&gt; &lt;&lt;CI to post the results on your PRs as a comment#green&gt;&gt; &lt;&lt;Pull Requests Audit results via GitHub Actions&gt;&gt; &lt;&lt;not the dependencies#red&gt;&gt; &lt;&lt;regex#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="215">
      <title>Remote</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/g3ub83/is_anyone_using_rust_analyzer_editing_on_remote/" id="620">
        <title>Is anyone using Rust Analyzer editing on remote systems? : rust#__#&lt;&lt;vscode&apos;s Remote - SSH#green&gt;&gt; &lt;&lt;full local vscode experience while connected remotely#green&gt;&gt; &lt;&lt;rust-analyzer + vscode remote#green&gt;&gt; &lt;&lt;the editor will often freeze for a second after the newline is pressed if the ping is bad#red&gt;&gt; &lt;&lt;there was a &quot;rust-analyzer.enableEnhancedTyping&quot; setting that controlled that behavior but apparently it disappeared in later releases&gt;&gt; &lt;&lt;We now just define a key binding for Enter, which you can remove.#green&gt;&gt; &lt;&lt;use sshcode instead of MS&apos;s remote stuff as it doesn&apos;t support the open-source version of VS code#green&gt;&gt; &lt;&lt;mount remote filesystem using sshfs#green&gt;&gt; &lt;&lt;sshfs mounting the src directory to you local machine#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="216">
      <title>Test</title>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch11-01-writing-tests.html" id="621">
        <title>How to Write Tests - The Rust Programming Language#__#&lt;&lt;The next part of the test output, which starts with Doc-tests#green&gt;&gt; &lt;&lt;assert_eq! and assert_ne! macros use the operators == and !=, respectively#green&gt;&gt; &lt;&lt;implement the PartialEq and Debug#green&gt;&gt; &lt;&lt;#[derive(PartialEq, Debug)]#green&gt;&gt; &lt;&lt;can also add a custom message to be printed with the failure message as optional arguments to the assert!, assert_eq!, and assert_ne!#green&gt;&gt; &lt;&lt;pub fn greeting(name: &amp;str) -&gt; String#green&gt;&gt; &lt;&lt;let result = greeting(&quot;Carol&quot;);#green&gt;&gt; &lt;&lt;result.contains(&quot;Carol&quot;)#green&gt;&gt; &lt;&lt;#[should_panic]#green&gt;&gt; &lt;&lt;#[should_panic(expected = &quot;#green&gt;&gt; &lt;&lt;should_panic attribute’s expected parameter is a substring of the message#green&gt;&gt; &lt;&lt;Using Result&lt;T, E&gt; in Tests#green&gt;&gt; &lt;&lt;Writing tests so they return a Result&lt;T, E&gt; enables you to use the question mark operator#green&gt;&gt; &lt;&lt;can’t use the #[should_panic] annotation on tests that use Result&lt;T, E&gt;#red&gt;&gt; &lt;&lt;Instead, you should return an Err value directly when the test should fail.#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.microsoft.com/en-us/learn/modules/rust-automated-tests/" id="622">
        <title>Write automated tests - Learn | Microsoft Docs</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/wiremock" id="623">
        <title>wiremock - test web</title>
      </bookmark>
      <bookmark href="https://www.youtube.com/watch?v=yBlT6wrZjb4" id="624">
        <title>Write Automated Tests in Rust - YouTube - Microsoft</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/serial_test" id="625">
        <title>serial_test - crates.io: Rust Package Registry#__#&lt;&lt;Multiple tests with the serial attribute are guaranteed to be executed in serial.#green&gt;&gt; &lt;&lt;Ordering of the tests is not guaranteed however.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/mitsuhiko/insta" id="626">
        <title>mitsuhiko/insta: Snapshot testing</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch11-02-running-tests.html" id="627">
        <title>Controlling How Tests Are Run - The Rust Programming Language#__#&lt;&lt;default behavior of the binary produced by cargo test is to run all the tests in parallel#green&gt;&gt; &lt;&lt;capture output generated during test runs&gt;&gt; &lt;&lt;preventing the output from being displayed#red&gt;&gt; &lt;&lt;list the arguments that go to cargo test followed by the separator --&gt;&gt; &lt;&lt;any shared state#red&gt;&gt; &lt;&lt;shared environment, such as the current working directory#red&gt;&gt; &lt;&lt;cargo test -- --test-threads=1#green&gt;&gt; &lt;&lt;If a test fails, we’ll see whatever was printed to standard output#green&gt;&gt; &lt;&lt;fn one_hundred()&gt;&gt; &lt;&lt;cargo test one_hundred#green&gt;&gt; &lt;&lt;can’t specify the names of multiple tests in this way#red&gt;&gt; &lt;&lt;But there is a way to run multiple tests#green&gt;&gt; Or: cargo test -- --nocapture&lt;&lt;cargo test -- --show-output#green&gt;&gt; &lt;&lt;making it easier to read the output#green&gt;&gt; &lt;&lt;cargo test --help displays the options you can use with cargo test#green&gt;&gt; &lt;&lt;cargo test -- --help displays the options you can use after the separator --#green&gt;&gt; &lt;&lt;Running Single Tests#green&gt;&gt; &lt;&lt;specify part of a test name#green&gt;&gt; &lt;&lt;module in which a test appears becomes part of the test’s name, so we can run all the tests in a module by filtering on the module’s name#green&gt;&gt; &lt;&lt;#[ignore]#green&gt;&gt; &lt;&lt;expensive_test function#green&gt;&gt; &lt;&lt;to run only the ignored tests, we can use cargo test -- --ignored#green&gt;&gt; &lt;&lt;without passing any arguments, as we saw earlier, all the tests will run in parallel&gt;&gt; &lt;&lt;cargo test add@1#green&gt;&gt; &lt;&lt;tests::add_three_and_two@1#green&gt;&gt; &lt;&lt;tests::add_two_and_two@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/commands/cargo-test.html" id="628">
        <title>cargo test - The Cargo Book#__#cargo test -h shows cargo&apos;s help, but cargo test -- -h shows libtest&apos;s help. Some options show up when you run `cargo test -q -- -h` in a project folder!&lt;&lt;Test Options&gt;&gt; Or: cargo test -- --show-output.&lt;&lt;cargo test -- --nocapture&gt;&gt;&lt;&lt;arguments following the two dashes (--) are passed to the test binaries and thus to libtest#blue&gt;&gt; &lt;&lt;--no-run#green&gt;&gt; &lt;&lt;--test-threads 3#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/reference/attributes/testing.html" id="629">
        <title>should_panic#__#&lt;&lt;should_panic attribute may optionally take an input string#green&gt;&gt; &lt;&lt;string may be passed using the MetaNameValueStr syntax or the MetaListNameValueStr#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.logrocket.com/how-to-organize-your-rust-tests/" id="630">
        <title>How to organize your Rust tests - LogRocket Blog#__#&lt;&lt;Testing is a cheap#green&gt;&gt; &lt;&lt;and easy#green&gt;&gt; &lt;&lt;game of hide-and-seek#green&gt;&gt; &lt;&lt;first round of testing should usually consist of doctests#green&gt;&gt; &lt;&lt;happy paths of our API#green&gt;&gt; &lt;&lt;can still omit the main method if the last line is Ok::&lt;_, T&gt;(())#green&gt;&gt; &lt;&lt;module-level doc comment lines start with //! to refer to the outer scope#green&gt;&gt; &lt;&lt;item comments usually start with /// to refer to the item below#green&gt;&gt; &lt;&lt;Within the example, we can append a # hash mark to the line prefix to have rustdoc omit the line when rendering the example#green&gt;&gt; &lt;&lt;examples subdirectory#green&gt;&gt; &lt;&lt;cargo run --``example &lt;name&gt;#green&gt;&gt; &lt;&lt;especially helpful for libraries#green&gt;&gt; &lt;&lt;Those tests add nothing to the documentation, so I would add not a doctest, but a test method.&gt;&gt; &lt;&lt;add tests for all error classes#green&gt;&gt; &lt;&lt;Those tests add nothing to the documentation, so I would add not a doctest, but a test method.&gt;&gt; &lt;&lt;#[should_panic(expected = &quot;empty input&quot;)]#green&gt;&gt; &lt;&lt;should_panic doesn’t work with Result-returning test functions#red&gt;&gt; &lt;&lt;Black-box tests usually belong in one or more files in the tests subdirectory#green&gt;&gt; &lt;&lt;verify that something doesn’t compile#green&gt;&gt; &lt;&lt;two crates#green&gt;&gt; &lt;&lt;compiletest, is part of the testing infrastructure of the Rust compiler#green&gt;&gt; &lt;&lt;compile_fail tests#green&gt;&gt; &lt;&lt;embed matchers&gt;&gt; &lt;&lt;as comments&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/9jh04r/how_to_test_procedural_macros/" id="1211">
        <title>How to test procedural macros? : rust#__#&lt;&lt;separate crate for testing#green&gt;&gt; &lt;&lt;put it in the same workspace as the other crates#green&gt;&gt; &lt;&lt;run cargo t from the root#green&gt;&gt; &lt;&lt;it will run the tests for all the crates#green&gt;&gt; &lt;&lt;I wrote two custom test-harness that does the testing: compile-fail#green&gt;&gt; &lt;&lt;compiletest-rs#red&gt;&gt; &lt;&lt;hacky, assumes some internal knowledge#red&gt;&gt; &lt;&lt;already quite old#red&gt;&gt; &lt;&lt;using the build-plan feature of Cargo#green&gt;&gt; &lt;&lt;Via build plans, one can get all the information#green&gt;&gt; but deprecated!&lt;&lt;This is what compile-fail#green&gt;&gt; &lt;&lt;Sadly, that crate doesn&apos;t seem to be ready yet#red&gt;&gt; &lt;&lt;build plans are still unstable#red&gt;&gt; &lt;&lt;can&apos;t have extra dependencies just for the examples (yet)#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gregoryszorc.com/blog/2021/04/13/rust-is-for-professionals/" id="1212">
        <title>Gregory Szorc&apos;s Digital Home | Rust is for Professionals#__#&lt;&lt;sccache#green&gt;&gt; &lt;&lt;wall time savings on a lower CPU core count machine are even more significant#green&gt;&gt; &lt;&lt;encoding and enforcing invariants in the type@1#green&gt;&gt; &lt;&lt;surface area for bugs is limited to logical defects#red&gt;&gt; &lt;&lt;mis-expressions of the human programmer&apos;s intent#red&gt;&gt; &lt;&lt;what tests to write#green&gt;&gt; &lt;&lt;fewer tests than in other languages#green&gt;&gt; &lt;&lt;fuzzing is generally a good#green&gt;&gt; &lt;&lt;still run things like {address, memory, thread} sanitizers and fuzzing#green&gt;&gt; &lt;&lt;because unsafe#red&gt;&gt; &lt;&lt;additional verification tools@1#green&gt;&gt; &lt;&lt;continue to run them against Rust#green&gt;&gt; &lt;&lt;especially for high value code#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/aaronabramov/k9" id="1213">
        <title>aaronabramov/k9: Rust testing library#__#works at Facebook&lt;&lt;aaronabramov&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch11-03-test-organization.html" id="1214">
        <title>Test Organization - The Rust Programming Language#__#&lt;&lt;Unit tests are small#green&gt;&gt; &lt;&lt;more focused#green&gt;&gt; &lt;&lt;testing one module in isolation at a time#green&gt;&gt; &lt;&lt;convention is to create a module named tests#green&gt;&gt; &lt;&lt;annotate the module with cfg(test)#green&gt;&gt; &lt;&lt;saves compile time when you only want to build the library#green&gt;&gt; &lt;&lt;because integration tests go in a different directory, they don’t need the#[cfg(test)]&gt;&gt; &lt;&lt;Units of code that work correctly on their own could have problems when integrated#red&gt;&gt; &lt;&lt;create a tests directory at the top level of our project directory, next to src#green&gt;&gt; &lt;&lt;Cargo knows#green&gt;&gt; &lt;&lt;Cargo will compile each of the files as an individual crate.#green&gt;&gt; &lt;&lt;iles in the tests directory don’t share the same behavior as files in src do#red&gt;&gt; &lt;&lt;instead of creating tests/common.rs#red&gt;&gt; &lt;&lt;create tests/common/mod.rs#green&gt;&gt; &lt;&lt;Naming the file this way tells Rust not to treat the common module as an integration test file.#blue&gt;&gt; &lt;&lt;Files in subdirectories of the tests directory don’t get compiled as separate crates or have sections in the test output.#blue&gt;&gt; &lt;&lt;After we’ve created tests/common/mod.rs, we can use it from any of the integration test files as a module.#green&gt;&gt; &lt;&lt;Filename: tests/integration_test.rs@1#green&gt;&gt; &lt;&lt;use adder;@1#green&gt;&gt; &lt;&lt;mod common;#green&gt;&gt; &lt;&lt;common::setup();#green&gt;&gt; &lt;&lt;projects that provide a binary have a straightforward src/main.rs file that calls logic that lives in the src/lib.rs#green&gt;&gt; &lt;&lt;Using that structure, integration tests can test the library crate with use#green&gt;&gt; &lt;&lt;each file in the tests directory is a separate crate, so we need to bring our library into each test&gt;&gt; &lt;&lt;cargo test --test integration_test&gt;&gt; &lt;&lt;Each file in the tests directory is a separate crate&gt;&gt; &lt;&lt;don’t need to annotate any code in tests/#red&gt;&gt; &lt;&lt;with #[cfg(test)]#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/7n0ihg/strategies_to_unittest_different_feature/" id="1215">
        <title>Strategies to unit-test different feature combinations? : rust features</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/26469715/how-do-i-write-a-rust-unit-test-that-ensures-that-a-panic-has-occurred" id="1216">
        <title>How do I write a Rust unit test that ensures that a panic has occurred? - Stack Overflow</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/r1eihh/testing_with_gpu_acceleration_and_arrayfire/" id="1217">
        <title>Testing with GPU acceleration and Arrayfire : rust#__#&lt;&lt;cargo test -- --test-threads 1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://nexte.st/index.html" id="1218">
        <title>Home - cargo-nextest</title>
      </bookmark>
      <bookmark href="https://insta.rs/" id="1219">
        <title>Insta Snapshots</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/sshvzy/cargonextest_a_new_test_runner_for_rust_projects/" id="1220">
        <title>(1) cargo-nextest: a new test runner for Rust projects : rust</title>
      </bookmark>
      <bookmark href="https://nexte.st/index.html" id="1351">
        <title>Home - cargo-nextest</title>
      </bookmark>
      <bookmark href="https://www.lpalmieri.com/posts/2020-08-31-zero-to-production-3-5-html-forms-databases-integration-tests/#2-1-refining-our-requirements" id="1352">
        <title>HTML forms, Databases, Integration tests | A learning journal</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/attributes/testing.html" id="1353">
        <title>Testing - The Rust Reference#__#&lt;&lt;ignore attribute#green&gt;&gt; &lt;&lt;should_panic attribute#green&gt;&gt; &lt;&lt;(expected = &quot;values don&apos;t match&quot;)#green&gt;&gt; &lt;&lt;optionally take an input string&gt;&gt; &lt;&lt;may optionally be written with the MetaNameValueStr syntax to specify a reason#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/rust-by-example/testing/integration_testing.html" id="1354">
        <title>Integration testing - Rust By Example#__#&lt;&lt;integration tests in tests&gt;&gt; &lt;&lt;next to src&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/16rw51t/a_rust_command_that_prettifies_the_ugly_cargo/" id="1355">
        <title>Reddit - Dive into anything#__#&lt;&lt;prettifies the ugly `cargo test`&gt;&gt; &lt;&lt;use bacon&gt;&gt; &lt;&lt;shows only failures&gt;&gt; &lt;&lt;https://dystroy.org/bacon&gt;&gt; &lt;&lt;cargo test -q&gt;&gt; &lt;&lt;if run in a workspace, it will do that for each crate separately&gt;&gt; &lt;&lt;includes crates that don&apos;t even have tests#red&gt;&gt; &lt;&lt;Right now `cargo pretty-test` is a wrapper for `cargo test`&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/test-with/latest/test_with/" id="1356">
        <title>test_with - Rust</title>
      </bookmark>
      <bookmark href="https://github.com/yanganto/test-with" id="1357">
        <title>yanganto/test-with: A lib help you run test with condition#__#&lt;&lt;slides&gt;&gt; &lt;&lt;checked on build-time&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="217">
      <title>Validate</title>
      <bookmark href="https://github.com/nvzqz/static-assertions-rs" id="631">
        <title>nvzqz/static-assertions-rs: Ensure correct...</title>
      </bookmark>
      <bookmark href="https://github.com/nvzqz/impls" id="632">
        <title>nvzqz/impls: A Rust macro to determine...</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/trybuild" id="633">
        <title>trybuild - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://engineering.fb.com/2021/02/09/developer-tools/minesweeper/" id="634">
        <title>Minesweeper automates root cause analysis... - Facebook#__#&lt;&lt;Root cause analysis (RCA)#green&gt;&gt; &lt;&lt;automated and scalable#green&gt;&gt; &lt;&lt;formal statistical concepts#green&gt;&gt; &lt;&lt;RCA for tens of thousands of reports in minutes#green&gt;&gt; &lt;&lt;85 percent accuracy#green&gt;&gt; &lt;&lt;first line of defense against bugs#green&gt;&gt; &lt;&lt;chronological trace of actions (or “events”)#green&gt;&gt; &lt;&lt;patterns@2#green&gt;&gt; &lt;&lt;statistically distinctive#green&gt;&gt; &lt;&lt;test group@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/impls" id="635">
        <title>impls - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=90329" id="636">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/no-panic/blob/master/README.md" id="637">
        <title>no-panic/README.md at master · dtolnay/no-panic#__#&lt;&lt;require some amount of optimization#blue&gt;&gt; &lt;&lt;may no longer compile in debug mode#red&gt;&gt; &lt;&lt;Panic detection happens at link time#red&gt;&gt; &lt;&lt;any Cargo commands that do not invoke a linker will not trigger panic detection#red&gt;&gt; &lt;&lt;cargo build of library#red&gt;&gt; &lt;&lt;and cargo check#red&gt;&gt; &lt;&lt;binary and library&gt;&gt; &lt;&lt;attribute is useless in code built with panic = &quot;abort&quot;#red&gt;&gt; &lt;&lt;If you want no_panic to just assume that some function you call doesn&apos;t panic#blue&gt;&gt; &lt;&lt;get Undefined Behavior if it does#red&gt;&gt; &lt;&lt;at runtime&gt;&gt; &lt;&lt;try wrapping that call in an unsafe extern &quot;C&quot; wrapper#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/Kixunil/dont_panic/blob/master/README.md" id="638">
        <title>Kixunil/dont_panic#__#&lt;&lt;cause a linking error:&gt;&gt; &lt;&lt;if should_panic {#green&gt;&gt; &lt;&lt;dont_panic!(&quot;This will never execute.&quot;);#green&gt;&gt; &lt;&lt;only when the appropriate opt_level#blue&gt;&gt; &lt;&lt;may require release build#red&gt;&gt; &lt;&lt;error message is&gt;&gt; &lt;&lt;weird link error#red&gt;&gt; &lt;&lt;You don&apos;t get line number, etc.#red&gt;&gt; &lt;&lt;may be situations in which you know that the code is unreachable#blue&gt;&gt; &lt;&lt;but the compiler can&apos;t prove#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/dont_panic/latest/dont_panic/" id="639">
        <title>dont_panic - Rust#__#&lt;&lt;macros that look just like panic!&gt;&gt; &lt;&lt;but instead of panicking#red&gt;&gt; &lt;&lt;cause linking error if their calls are not optimized-out#green&gt;&gt; &lt;&lt;to ensure the compiler optimizes away some code#blue&gt;&gt; &lt;&lt;Compile with --release or --features=panic#green&gt;&gt; &lt;&lt;tries to call non-existing function#blue&gt;&gt; Like assert, but it calls dont_panic!()&lt;&lt;dp_assert&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/no-panic/issues/16" id="640">
        <title>Is there a way to use potentially panicking code in a #[no_panic] function · Issue #16 · dtolnay/no-panic#__#&lt;&lt;#[inline(never)]#green&gt;&gt; &lt;&lt;extern &quot;C&quot; fn is_utf8(slice: &amp;[u8])&gt;&gt; &lt;&lt;std::panic::catch_unwind(||#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=142486" id="1221">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/jonhoo/incomplete" id="1222">
        <title>jonhoo/incomplete: Provides incomplete!(), a compile-time checked version of Rust&apos;s unimplemented!() macro#__#&lt;&lt;unimplemented!() macro@1&gt;&gt; &lt;&lt;only checked at runtime#red&gt;&gt; &lt;&lt;for corner-cases you don&apos;t expect to have to deal with yet#green&gt;&gt; &lt;&lt;writing new code from scratch#red&gt;&gt; &lt;&lt;especially when porting#red&gt;&gt; &lt;&lt;refactoring large#red&gt;&gt; &lt;&lt;comprehensive new#red&gt;&gt; &lt;&lt;&quot;don&apos;t let the code compile#red&gt;&gt; &lt;&lt;while still running type checks#green&gt;&gt; &lt;&lt;borrow checker#green&gt;&gt; &lt;&lt;grep for all the unimplemented()s and // TODOs#red&gt;&gt; &lt;&lt;and filter out#red&gt;&gt; https://github.com/rust-lang/rfcs/issues/1911&lt;&lt;until RFC issue 1911#red&gt;&gt; &lt;&lt;only error out after all compiler passes complete successfully#green&gt;&gt; &lt;&lt;can be evaluated either as a statement or as an expression#green&gt;&gt; &lt;&lt;As of the time of writing, the stable compiler will only produce a warning#red&gt;&gt; &lt;&lt;On nightly#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/incomplete" id="1223">
        <title>jonhoo/incomplete: Provides incomplete!(),...</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/remain" id="1224">
        <title>dtolnay/remain: Compile-time checks that an enum or match is written in sorted order#__#&lt;&lt;enums, structs, match#green&gt;&gt; &lt;&lt;#![feature(proc_macro_hygiene, stmt_expr_attributes)]#red&gt;&gt;&lt;&lt;match-expressions and let-statements requires a nightly#red&gt;&gt; &lt;&lt;stable alternative#green&gt;&gt; &lt;&lt;#[remain::check]#green&gt;&gt; &lt;&lt;match-expression and let-statement#blue&gt;&gt; &lt;&lt;Place this attribute on any function#green&gt;&gt; &lt;&lt;containing #[sorted]&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/static_assertions" id="1225">
        <title>static_assertions - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://docs.rs/cool_asserts/1.0.0/cool_asserts/macro.assert_panics.html" id="1226">
        <title>cool_asserts::assert_panics - Rust</title>
      </bookmark>
    </folder>
    <folder id="218">
      <title>zOther</title>
    </folder>
  </folder>
  <folder id="48">
    <title>Document</title>
    <folder id="219">
      <title>fmt</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/9jl6a9/pro_tip_if_you_use_cargo_fmtrustfmt_use_a/" id="641">
        <title>(4) Pro tip: If you use cargo fmt/rustfmt, use a rustfmt.toml file : rust#__#&lt;&lt;rustfmt.toml in your project root, even if it&apos;s empty!&gt;&gt; &lt;&lt;only a comment that says &quot;defaults are great!&quot;&gt;&gt; &lt;&lt;can also be named .rustfmt.toml&gt;&gt; &lt;&lt;.editorconfig&gt;&gt; &lt;&lt;// on the end of lines#green&gt;&gt; &lt;&lt;array where the linebreaks are significant#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/guide.md" id="642">
        <title>fmt-rfcs/guide.md at master · rust-dev-tools/fmt-rfcs#__#&lt;&lt;spaces#green&gt;&gt; &lt;&lt;not tabs#red&gt;&gt; &lt;&lt;4 spaces#green&gt;&gt; &lt;&lt;line is 100 characters#green&gt;&gt; &lt;&lt;configurable for all three of these&gt;&gt; &lt;&lt;zero or one blank lines&gt;&gt; &lt;&lt;one or two newlines&gt;&gt; &lt;&lt;Prefer line comments (//#green&gt;&gt; &lt;&lt;a single space after the opening sigil#green&gt;&gt; &lt;&lt;single-line block comments&gt;&gt; &lt;&lt;before the closing sigil#green&gt;&gt; &lt;&lt;Multi-line block comments#green&gt;&gt; &lt;&lt;newline after the opening sigil and before the closing#green&gt;&gt; &lt;&lt;Prefer to put a comment on its own line#green&gt;&gt; &lt;&lt;Comments should usually be complete sentences#green&gt;&gt; &lt;&lt;inline block comment may be treated as a note without punctuation#green&gt;&gt; &lt;&lt;Source lines which are entirely a comment should be limited to 80 characters#red&gt;&gt; &lt;&lt;80 char margin&gt;&gt; &lt;&lt;80 chars wide&gt;&gt; &lt;&lt;sigils and indentation&gt;&gt; &lt;&lt;Prefer line comments (///#green&gt;&gt; &lt;&lt;Doc comments should come before attributes#green&gt;&gt; &lt;&lt;each attribute on its own line#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rustfmt/issues/3363" id="643">
        <title>[unstable option] reorder_impl_items · Issue #3363 · rust-lang/rustfmt</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rustfmt" id="644">
        <title>rust-lang/rustfmt: Format Rust code#__#&lt;&lt;current status: some macro declarations and uses are formatted&gt;&gt; &lt;&lt;non-ascii#red&gt;&gt; &lt;&lt;#[rustfmt::skip]&gt;&gt; &lt;&lt;#![rustfmt::skip::attributes(custom_attribute)]&gt;&gt; &lt;&lt;#[custom_attribute(formatting , here , should , be , Skipped)]#green&gt;&gt; &lt;&lt;#[rustfmt::skip::macros(target_macro_name)]&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="220">
      <title>rustdoc - common</title>
      <bookmark href="https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html" id="645">
        <title>How to write documentation - The rustdoc book#__#&lt;&lt;different convention than the rest#red&gt;&gt; &lt;&lt;//! which indicate module-level or crate-level&gt;&gt; &lt;&lt;CommonMark Markdown&gt;&gt; &lt;&lt;~~strikethrough text~~&gt;&gt; &lt;&lt;a footnote[^note].&gt;&gt; &lt;&lt;[^note]: This text is the contents of the footnote&gt;&gt; &lt;&lt;| Header1 | Header2 |&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rustdoc/write-documentation/what-to-include.html" id="646">
        <title>What to include (and exclude) - The rustdoc book#__#&lt;&lt;At the top of the src/lib.rs&gt;&gt; &lt;&lt;#![warn(missing_docs)]#green&gt;&gt; &lt;&lt;As a library author, adding the lint #![deny(missing_docs)]#green&gt;&gt; &lt;&lt;#![deny(missing_doc_code_examples)]#green&gt;&gt; &lt;&lt;showing code that is easy to follow#green&gt;&gt; &lt;&lt;rather than being realistic#red&gt;&gt; &lt;&lt;take shortcuts with error handling#green&gt;&gt; &lt;&lt;/// ```rust@1#green&gt;&gt; &lt;&lt;/// # main() -&gt; Result&lt;(), std::num::ParseIntError&gt; {#green&gt;&gt; &lt;&lt;&quot;42&quot;.parse::&lt;u32&gt;()?@1#green&gt;&gt; &lt;&lt;/// #     Ok(())#green&gt;&gt; &lt;&lt;/// # }#green&gt;&gt; &lt;&lt;#[doc(hidden)] can hide implementation details#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://internals.rust-lang.org/t/pre-rfc-forwarding/13836/7" id="647">
        <title>Pre-RFC: Forwarding - language design - Rust Internals#__#&lt;&lt;how inlining&gt;&gt; &lt;&lt;example, std::iter::Iterator&gt;&gt; &lt;&lt;actually defined&gt;&gt; &lt;&lt;core&gt;&gt; &lt;&lt;but the documentation appears just as if the item were defined in std#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rustfmt/?version=v1.5.1&amp;search=" id="648">
        <title>Rustfmt#__#&lt;&lt;wrap_comments&gt;&gt; &lt;&lt;To enable unstable options, set unstable_features = true#green&gt;&gt; &lt;&lt;Maximum width of each line#green&gt;&gt; &lt;&lt;Break comments#blue&gt;&gt; &lt;&lt;format_code_in_doc_comments&gt;&gt; &lt;&lt;normalize_comments#red&gt;&gt; &lt;&lt;normalize_doc_attributes#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/31582064/how-to-link-to-other-fns-structs-enums-traits-in-rustdoc" id="649">
        <title>rust - How to link to other fns/structs/enums/traits in rustdoc? - Stack Overflow#__#&lt;&lt;method named foo in the same struct&gt;&gt; &lt;&lt;[foo](#method.foo)&gt;&gt; &lt;&lt;in another struct&gt;&gt; &lt;&lt;[foo](struct.OtherStruct.html#method.foo)&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rustdoc/write-documentation/linking-to-items-by-name.html" id="650">
        <title>Linking to items by name - The rustdoc book#__#&lt;&lt;can also refer to items with generic parameters like Vec&lt;T&gt;&gt;&gt; &lt;&lt;as if you had written [`Vec&lt;T&gt;`](Vec)&gt;&gt; &lt;&lt;Fully-qualified syntax (for example, &lt;Vec as IntoIterator&gt;::into_iter()) is not yet#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rustdoc/advanced-features.html" id="651">
        <title>Advanced features - The rustdoc book#__#&lt;&lt;to make sure an item is seen by Rustdoc regardless of what platform&gt;&gt; &lt;&lt;apply#[cfg(doc)]&gt;&gt; &lt;&lt;something like #[cfg(any(windows, doc))]#green&gt;&gt; &lt;&lt;cfg is not passed to doctests#red&gt;&gt; &lt;&lt;not have a magic way to compile documentation &apos;as-if&apos; you&apos;d run it once for each platform#red&gt;&gt; &lt;&lt;multiple aliases#green&gt;&gt; &lt;&lt;#[doc(alias(&quot;x&quot;, &quot;big&quot;))]&gt;&gt; &lt;&lt;https://doc.rust-lang.org/stable/std/?search=%s&amp;go_to_first=true&gt;&gt; &lt;&lt;URL template containing %s&gt;&gt; &lt;&lt;Only things from the host target are available#red&gt;&gt; &lt;&lt;#[cfg(any(windows, doc))]@1&gt;&gt; &lt;&lt;#[cfg(any(unix, doc))]&gt;&gt; &lt;&lt;same way the Rust compiler would if you passed it --cfg doc#blue&gt;&gt; &lt;&lt;unknown type is part of the function signature:#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/about/metadata" id="652">
        <title>Metadata#__#&lt;&lt;[package.metadata.docs.rs]@1&gt;&gt; &lt;&lt;# Features to pass to Cargo#green&gt;&gt; &lt;&lt;all-features&gt;&gt; &lt;&lt;no-default-features&gt;&gt; &lt;&lt;`targets` are built in addition to the default&gt;&gt; &lt;&lt;If both `default-target` and `targets` are unset&gt;&gt; &lt;&lt;all tier-one targets will be built&gt;&gt; &lt;&lt;`x86_64-unknown-linux-gnu` will be used as the default&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/unstable-book/language-features/doc-cfg.html" id="653">
        <title>doc_cfg - The Rust Unstable Book#__#&lt;&lt;#![feature(doc_cfg)]#red&gt;&gt; &lt;&lt;#[doc(cfg(windows))]&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/doc-cfg/latest/doc_cfg/" id="654">
        <title>doc_cfg - Rust#__#&lt;&lt;name of the feature is important and should not be changed#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/arcnmx/doc-cfg" id="1227">
        <title>arcnmx/doc-cfg: Rust #[doc_cfg(..)] helper attribute#__#&lt;&lt;#![cfg_attr(feature = &quot;unstable-doc-cfg&quot;, feature(doc_cfg))]#red&gt;&gt; &lt;&lt;#[doc_cfg(windows)]#blue&gt;&gt; &lt;&lt;[features]&gt;&gt; &lt;&lt;unstable-doc-cfg = []&gt;&gt; &lt;&lt;[package.metadata.docs.rs]&gt;&gt; &lt;&lt;features = [&quot;unstable-doc-cfg&quot;]&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://arcnmx.github.io/doc-cfg/doc_cfg_example/" id="1228">
        <title>doc_cfg_example - Rust#__#&lt;&lt;code of this example#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/indiv0/lazycell/blob/master/Cargo.toml" id="1229">
        <title>lazycell/Cargo.toml at master · indiv0/lazycell#__#&lt;&lt;clippy = { version = &quot;0.0&quot;, optional = true }#green&gt;&gt; &lt;&lt;serde = { version = &quot;^1&quot;, optional = true }#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.zdnet.com/article/rust-programming-language-outlines-plan-for-updates-to-style-guide/" id="1230">
        <title>Rust programming language outlines plan for updates to style guide | ZDNET#__#&lt;&lt;let-chaining (RFC 2497#green&gt;&gt; &lt;&lt;let-else (RFC 3137#green&gt;&gt; &lt;&lt;rustfmt maintains backwards compatibility#green&gt;&gt; &lt;&lt;code that has been correctly formatted with rustfmt#green&gt;&gt; &lt;&lt;won&apos;t get formatted differently with a future version of rustfmt#green&gt;&gt; &lt;&lt;prevents evolving the Rust style#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/rustdoc/unstable-features.html" id="1231">
        <title>Unstable features - The rustdoc book#__#&lt;&lt;Several features here require a matching #![feature(...)]&gt;&gt; &lt;&lt;Nightly-gated&gt;&gt; &lt;&lt;just require a nightly&gt;&gt; &lt;&lt;some subtle fallback modes when used on a stable#red&gt;&gt; &lt;&lt;on nightly, you can optionally add an error number&gt;&gt; &lt;&lt;```compile_fail,E0044#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rfcs/blob/master/text/0016-more-attributes.md" id="1232">
        <title>rfcs/0016-more-attributes.md at master · rust-lang/rfcs · GitHub#__#&lt;&lt;#[audited=&quot;2014-04-22&quot;]&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rfcs/pull/3081" id="1233">
        <title>Multi-part examples in rustdoc by mightyiam · Pull Request #3081 · rust-lang/rfcs#__#&lt;&lt;mdBook uses rustdoc&gt;&gt; &lt;&lt;rustdoc_include feature with anchors#green&gt;&gt; &lt;&lt;code actually lives in separate files&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/rustdoc/write-documentation/linking-to-items-by-name.html" id="1931">
        <title>Linking to items by name - The rustdoc book</title>
      </bookmark>
    </folder>
    <folder id="221">
      <title>rustdoc - internals</title>
      <bookmark href="https://doc.rust-lang.org/nightly/rustdoc/write-documentation/the-doc-attribute.html" id="655">
        <title>The #[doc] attribute - The rustdoc book#__#&lt;&lt;#[doc = r&quot; This is a doc comment.&quot;]&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/meta/doc.html" id="656">
        <title>Documentation - Rust By Example</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust/issues/87858" id="657">
        <title>`rustdoc::missing_doc_code_examples` inconsistent with Rust API Guidelines · Issue #87858 · rust-lang/rust#__#&lt;&lt;not a bug. Think of missing_doc_code_examples as a clippy&gt;&gt; &lt;&lt;rustdoc::all#green&gt;&gt; &lt;&lt;clippy::all also excludes a lot of lints.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rustdoc/write-documentation/documentation-tests.html" id="658">
        <title>Documentation tests - The rustdoc book#__#&lt;&lt;#-hiding of lines can be prevented by using two consecutive hashes ##&gt;&gt; &lt;&lt;a string literal like the following, which has a line that starts with a#&gt;&gt; &lt;&lt;escaping the initial#&gt;&gt; &lt;&lt;Termination trait&gt;&gt; &lt;&lt;add our own extern crate line, so that we can add the #[macro_use]#green&gt;&gt; &lt;&lt;our own main()#green&gt;&gt; &lt;&lt;ignore attribute#red&gt;&gt; &lt;&lt;Instead, consider annotating it with text#green&gt;&gt; &lt;&lt;/// ```ignore#red&gt;&gt; &lt;&lt;/// ```should_panic@1#green&gt;&gt; &lt;&lt;/// ```no_run#green&gt;&gt; &lt;&lt;/// ```compile_fail#green&gt;&gt; &lt;&lt;/// ```edition2018#green&gt;&gt; &lt;&lt;also accepts indented code blocks#red&gt;&gt; &lt;&lt;four or more spaces#red&gt;&gt; &lt;&lt;#[cfg(doctest)]&gt;&gt; &lt;&lt;only the public items of your crate#red&gt;&gt; &lt;&lt;to test private items, you need to write a unit test#green&gt;&gt; &lt;&lt;MyStructOnlyTakesUsize here isn&apos;t actually part of your public crate API#green&gt;&gt; &lt;&lt;test doctests that are included in your README#green&gt;&gt; &lt;&lt;without including it in your main documentation&gt;&gt; &lt;&lt;hidden from the public documentation#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="222">
      <title>zOther</title>
      <bookmark href="https://github.com/lborb/book" id="659">
        <title>lborb/book: The Little Book of Rust Books</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/mdBook" id="660">
        <title>rust-lang/mdBook: Create book from markdown files. Like Gitbook but implemented in Rust</title>
      </bookmark>
      <bookmark href="https://www.tangramvision.com/blog/making-great-docs-with-rustdoc" id="661">
        <title>Great Docs with Rustdoc</title>
      </bookmark>
      <bookmark href="https://github.com/time-rs/time/issues/327" id="662">
        <title>The Book is hardly readable · Issue #327 · time-rs/time#__#&lt;&lt;inline this into crate documentation#green&gt;&gt; &lt;&lt;empty modules for hierarchy#green&gt;&gt; &lt;&lt;would make it more discoverable#green&gt;&gt; &lt;&lt;more likely to be maintained#green&gt;&gt; &lt;&lt;documenting formatting and parsing is probably the best place initially&gt;&gt; &lt;&lt;agree that moving it into rustdoc would make it more discoverable#green&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="1406">
    <title>Fast Build</title>
    <folder id="1426">
      <title>Cranelift</title>
      <bookmark href="https://blog.rust-lang.org/inside-rust/2020/11/15/Using-rustc_codegen_cranelift.html" id="1549">
        <title>Using rustc_codegen_cranelift for debug builds | Inside Rust Blog#__#&lt;&lt;using it to compile a project#green&gt;&gt; &lt;&lt;For demonstration purposes, I&apos;ll be be using cargo#green&gt;&gt; &lt;&lt;../rustc_codegen_cranelift/build/cargo.sh build#green&gt;&gt; &lt;&lt;49.93s#green&gt;&gt; &lt;&lt;54.64s#red&gt;&gt; &lt;&lt;serde_derive took longer to run under cranelift, since it wasn&apos;t as optimized#red&gt;&gt; &lt;&lt;incremental builds#red&gt;&gt; &lt;&lt;Joshua Nelson#green&gt;&gt; &lt;&lt;git clone https://github.com/rust-lang/rust#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/bjorn3/rustc_codegen_cranelift" id="1550">
        <title>bjorn3/rustc_codegen_cranelift: Cranelift based backend for rustc</title>
      </bookmark>
      <bookmark href="https://jason-williams.co.uk/a-possible-new-backend-for-rust" id="1551">
        <title>A Possible New Backend for Rust – Jason Williams#__#&lt;&lt;unsized values#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/bytecodealliance/wasmtime/tree/main/cranelift" id="1552">
        <title>wasmtime/cranelift at main · bytecodealliance/wasmtime · GitHub#__#&lt;&lt;compilation speed&gt;&gt; &lt;&lt;order of magnitude faster than WAVM (LLVM)#green&gt;&gt; &lt;&lt;generated code is ~2% slower than that of V8 (TurboFan), and ~14% slower than WAVM (LLVM)#red&gt;&gt; &lt;&lt;basic mitigations for Spectre&gt;&gt; &lt;&lt;production-ready#green&gt;&gt; &lt;&lt;three backends: x86-64&gt;&gt; &lt;&lt;aarch64 (aka ARM64)&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1427">
      <title>Hardware</title>
      <folder id="1553">
        <title>Memory</title>
        <bookmark href="https://www.phoronix.com/scan.php?page=article&amp;item=threadripper-linux-ddr4&amp;num=5" id="1692">
          <title>DDR4 Memory Scaling &amp; DDR4-3600 Testing With AMD Threadripper On Linux - Phoronix#__#&lt;&lt;real-world memory test used for this article was Open Porous Media#green&gt;&gt; &lt;&lt;G.SKILL DDR4-3600 memory modules had worked fine in every other workload tossed at it besides OPM#red&gt;&gt; &lt;&lt;at DDR4-3600, the OPM workload was enough to cause memory corruption#red&gt;&gt; &lt;&lt;cheap G.SKILL DDR4-3600 memory modules I could only run them here up to DDR4-3200#red&gt;&gt; &lt;&lt;quad channel memory is definitely worth it even if it means getting a slower kit#green&gt;&gt; &lt;&lt;than what you would if going for dual channel#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://www.phoronix.com/scan.php?page=article&amp;item=threadripper-linux-ddr4&amp;num=2" id="1693">
          <title>DDR4 Memory Scaling &amp; DDR4-3600 Testing With AMD Threadripper On Linux - Phoronix#__#&lt;&lt;compilation of the Linux kernel has a noticeable difference going from two to four memory channels#green&gt;&gt; &lt;&lt;while the memory frequency was less of a difference#red&gt;&gt; &lt;&lt;compiling the LLVM compiler stack, the memory speed and configuration made a much more noticeable#green&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1554">
        <title>zOther</title>
        <bookmark href="https://www.reddit.com/r/rust/comments/c6tkne/building_a_fast_pc_for_rust_vs_mac_mini_how_much/" id="1694">
          <title>Building a fast PC for rust (vs mac mini): How much advantage? : rust#__#&lt;&lt;phoronix benchmarks#green&gt;&gt; &lt;&lt;Ram speed, and count matters for compile benchmarks#green&gt;&gt; &lt;&lt;Look for great random IOPS performance when comparing drives.#green&gt;&gt; &lt;&lt;ryzen 3 sits in AM4 which is dual channel memory#red&gt;&gt; &lt;&lt;threadripper sits in TR4 which is quad channel#green&gt;&gt; &lt;&lt;To utilize all cores you need enough RAM#green&gt;&gt; &lt;&lt;Chroimium compilation, because of ninja spawn 32 compiler instance#red&gt;&gt; &lt;&lt;each requires ~ 2GB of RAM#red&gt;&gt; &lt;&lt;threadripper with 12 cores(24smt) 32 GB of RAM is not enough to compile chromium (peak memory usage was 36GB)#red&gt;&gt; &lt;&lt;overclocking: use AMD’s automatic Precision Overdrive#green&gt;&gt; &lt;&lt;threadripper unless you know what it&apos;s for#red&gt;&gt; &lt;&lt;NUMA (non-uniform memory architecture)#red&gt;&gt; &lt;&lt;many threads and processes#green&gt;&gt; &lt;&lt;one memory space with 12 threads#red&gt;&gt; &lt;&lt;chipset#green&gt;&gt; &lt;&lt;Asus has really high temperatures#red&gt;&gt; &lt;&lt;stay away from other overclocking options#red&gt;&gt; &lt;&lt;Ryzen chips#green&gt;&gt; &lt;&lt;it&apos;s not a NUMA chip#green&gt;&gt; &lt;&lt;multiple crates#green&gt;&gt; &lt;&lt;(typically one per library)#green&gt;&gt; &lt;&lt;cargo can and does invoke rustc in parallel#green&gt;&gt; &lt;&lt;All Ryzen chips have non-uniform cache#red&gt;&gt; &lt;&lt;rustc don&apos;t communicate over shared state that often#green&gt;&gt; &lt;&lt;stay away from overclocking#red&gt;&gt;</title>
        </bookmark>
      </folder>
    </folder>
    <folder id="1428">
      <title>LLD or Mold or LTO</title>
      <bookmark href="https://bevyengine.org/learn/book/getting-started/setup/" id="1555">
        <title>Bevy - Setup#__#&lt;&lt;sudo pacman -S lld#green&gt;&gt; &lt;&lt;Then copy this file to YOUR_WORKSPACE/.cargo/config.toml#green&gt;&gt; &lt;&lt;mold is up to 5× (five times!) faster#green&gt;&gt; &lt;&lt;than LLD#red&gt;&gt; &lt;&lt;linker = &quot;clang&quot;#green&gt;&gt; &lt;&lt;rustflags = [&quot;-C&quot;, &quot;link-arg=-fuse-ld=/usr/bin/mold&quot;]#green&gt;&gt; &lt;&lt;&quot;precompile&quot; generic#green&gt;&gt; &lt;&lt;only available on nightly#red&gt;&gt; &lt;&lt;and LLD#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust/issues/71515" id="1556">
        <title>Use lld by default on x64 Ubuntu 20.04 LTS · Issue #71515 · rust-lang/rust#__#&lt;&lt;rust-lld on x64 linux gnu targets if it&apos;s explicitly requested with the -C linker or -C linker-flavor#green&gt;&gt; &lt;&lt;this will incidentally get most major modern distro releases working#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rui314/mold/issues/33" id="1557">
        <title>Mold causes Rust to lose backtraces in certain cases. · Issue #33 · rui314/mold#__#&lt;&lt;May 1&gt;&gt; &lt;&lt;select nightly channel of Rust#green&gt;&gt; &lt;&lt;in Cargo.toml#red&gt;&gt; &lt;&lt;supposed to go in ~/.cargo/config.toml#green&gt;&gt; &lt;&lt;[target.x86_64-unknown-linux-gnu]@2&gt;&gt; &lt;&lt;linker = &quot;clang&quot;&gt;&gt; &lt;&lt;rustflags = [&quot;-C&quot;, &quot;link-arg=-fuse-ld=/usr/local/bin/mold&quot;]&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rui314/mold" id="1558">
        <title>rui314/mold: mold: A Modern Linker#__#&lt;&lt;several times faster than LLVM lld#green&gt;&gt; &lt;&lt;(then-) fastest open-source linker which I originally created&gt;&gt; &lt;&lt;mold w/ preloading#green&gt;&gt; &lt;&lt;mold uses all available cores throughout its execution#green&gt;&gt; &lt;&lt;path/to/mold -run cargo build#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/p8xgtd/compile_time/" id="1559">
        <title>Compile time : rust#__#&lt;&lt;Mold is linux only#red&gt;&gt; &lt;&lt;doesn&apos;t even work on other *nix#red&gt;&gt; &lt;&lt;using mold -run cargo run#green&gt;&gt; &lt;&lt;instead of just cargo run#green&gt;&gt; &lt;&lt;I realised I&apos;m comparing to rust default linker, not lld#red&gt;&gt; &lt;&lt;RUST_LOG=info,castle=debug cargo watch -c -d 0.1 -s &apos;mold -run cargo run&apos;#green&gt;&gt; &lt;&lt;mold is comparable to lld on a dual-core#red&gt;&gt; &lt;&lt;mold wins over lld by making better use of high-core#green&gt;&gt; &lt;&lt;cargo install -f cargo-binutils#green&gt;&gt; &lt;&lt;rustup component add llvm-tools-preview#green&gt;&gt; &lt;&lt;copy https://github.com/bevyengine/bevy/blob/main/.cargo/config_fast_builds to your config.toml#green&gt;&gt; &lt;&lt;[target.x86_64-#green&gt;&gt; &lt;&lt;linker = &quot;rust-lld.exe&quot;#green&gt;&gt; &lt;&lt;cargo bloat --time --release -j 1#green&gt;&gt; &lt;&lt;to see what dependency takes the most time#red&gt;&gt; &lt;&lt;probably be some proc-macro#red&gt;&gt; &lt;&lt;Create a &quot;base&quot; crate that has all (most) of your deps#green&gt;&gt; &lt;&lt;Re-export#green&gt;&gt; &lt;&lt;pub extern crate derive_more;#green&gt;&gt; &lt;&lt;use base::derive_more::{Display, From};#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://nnethercote.github.io/perf-book/compile-times.html" id="1560">
        <title>Compile Times - The Rust Performance Book#__#&lt;&lt;config.toml#green&gt;&gt; &lt;&lt;[build]#green&gt;&gt; &lt;&lt;rustflags = [&quot;-C&quot;, &quot;link-arg=-fuse-ld=lld&quot;]#green&gt;&gt; &lt;&lt;Incremental Compilation#green&gt;&gt; &lt;&lt;at the cost of sometimes making the produced executable run a little more slowly#red&gt;&gt; &lt;&lt;Cargo.toml#green&gt;&gt; &lt;&lt;[profile.release]#green&gt;&gt; &lt;&lt;incremental = true#green&gt;&gt; &lt;&lt;documentation for more details about the incremental setting#green&gt;&gt; &lt;&lt;lld from the command line, precede your build command with RUSTFLAGS=&quot;-C link-arg=-fuse-ld=lld&quot;#green&gt;&gt; &lt;&lt;visualize compilation#green&gt;&gt; &lt;&lt;cargo +nightly build -Ztimings#green&gt;&gt; &lt;&lt;HTML file#green&gt;&gt; &lt;&lt;Gantt chart#green&gt;&gt; &lt;&lt;documentation for more details on how to read the graphs#green&gt;&gt; &lt;&lt;cargo llvm-lines, which shows which Rust functions cause the most LLVM IR to be generated#green&gt;&gt; &lt;&lt;Generic functions#red&gt;&gt; &lt;&lt;make the function smaller#green&gt;&gt; &lt;&lt;move the non-generic parts of the function into a separate, non-generic function#green&gt;&gt; &lt;&lt;non-generic function can often be written as an inner function#green&gt;&gt; &lt;&lt;common utility functions like Option::map and Result::map_err#red&gt;&gt; &lt;&lt;Replacing them with equivalent match expressions#green&gt;&gt; &lt;&lt;effects of these sorts of changes on compile times will usually be small#red&gt;&gt; &lt;&lt;though occasionally they can be large#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/what-is-the-difference-between-dylib-and-cdylib/28847/3" id="1561">
        <title>What is the Difference Between `dylib` and `cdylib` - help - The Rust Programming Language Forum#__#&lt;&lt;cdylib&apos;s are primarily designed for building shared libraries that can be linked into C/C++ programs#red&gt;&gt; &lt;&lt;minimum size of ~2.2M on Linux#red&gt;&gt; &lt;&lt;cdylib, any functions that are not exposed through an extern block will be automatically stripped&gt;&gt; &lt;&lt;To build a dylib, you probably need the -C prefer-dynamic#green&gt;&gt; &lt;&lt;Within the same Rust version#red&gt;&gt; &lt;&lt;rlib&apos;s are Rust static libraries&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://fasterthanli.me/articles/profiling-linkers" id="1562">
        <title>Profiling linkers#__#&lt;&lt;[profile.release]&gt;&gt; &lt;&lt;lto = &quot;fat&quot;&gt;&gt; &lt;&lt;debug = 1&gt;&gt; &lt;&lt;lto = &quot;thin&quot;#green&gt;&gt; &lt;&lt;~/mold-wrapper&gt;&gt; &lt;&lt;mold -perf &quot;$@&quot; 2&gt;&amp;1 &gt;&gt; /tmp/mold-log.txt&gt;&gt; &lt;&lt;/home/amos/ld.lld-wrapper:&gt;&gt; &lt;&lt;ld.lld --time-trace --time-trace-file=/tmp/lld.time-trace.json &quot;$@&quot;&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rui314/mold/releases/tag/v1.1" id="1563">
        <title>Release mold 1.1 · rui314/mold#__#&lt;&lt;LTO support has been added for completeness and not for speed#red&gt;&gt; &lt;&lt;mold is only marginally faster than the other linkers for LTO#red&gt;&gt; &lt;&lt;not linking but code optimization dominates#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/bevyengine/bevy/blob/main/.cargo/config_fast_builds" id="1564">
        <title>bevy/config_fast_builds at main · bevyengine/bevy · GitHub</title>
      </bookmark>
    </folder>
    <folder id="1429">
      <title>zOther</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/qs8pct/how_to_speedup_compile_times/" id="1565">
        <title>How to speedup compile times ? : rust#__#&lt;&lt;mold --run cargo run to speedup the link time#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/8bns7j/current_advice_on_profilingreducing_buildcompile/" id="1566">
        <title>Current advice on profiling/reducing build/compile times? : rust#__#&lt;&lt;dtolnay/cargo-llvm-lines#green&gt;&gt; &lt;&lt;find overused generics#red&gt;&gt; &lt;&lt;a generic function that has a ton of LLVM lines#red&gt;&gt; &lt;&lt;instantiated a lot#red&gt;&gt; &lt;&lt;can usually refactor#green&gt;&gt; &lt;&lt;reduce the amount of replicated work#red&gt;&gt; &lt;&lt;or just use a trait object#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/4rcxrr/blog_shave_some_time_from_your_travis_builds/" id="1567">
        <title>Blog: Shave Some Time From Your Travis Builds : rust#__#&lt;&lt;don’t take adding a dependency on an external crate lightly, especially if it has a lot of transitive dependencies#red&gt;&gt; &lt;&lt;if it’s 20 lines of code#green&gt;&gt; &lt;&lt;vs. one extra line in Cargo.toml’s dependencies#red&gt;&gt; &lt;&lt;opt for the 20 lines of code#green&gt;&gt; &lt;&lt;dependencies are a source of bugs and instability#red&gt;&gt; &lt;&lt;Within a library, dry is a nice rule.#green&gt;&gt; &lt;&lt;Across libraries, it is a recipe for disaster#red&gt;&gt; &lt;&lt;tests = false for the library if you don&apos;t use tests#green&gt;&gt; &lt;&lt;bench = false for the library if you don&apos;t use benchmarks#green&gt;&gt; &lt;&lt;sudo: false on by default, see https://docs.travis-ci.com/user/ci-environment/#Virtualization-environments#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/k11wr6/arewefastyetrs_visualizing_performance/" id="1568">
        <title>Arewefastyet.rs - visualizing performance improvements in the Rust compiler : rust#__#&lt;&lt;Crater distributes an experiment across multiple machines with different specs, so it&apos;s not guaranteed it will have the same performance every time.#red&gt;&gt; &lt;&lt;Crater tends to overcommit the machines it runs on#red&gt;&gt; &lt;&lt;https://perf.rust-lang.org/#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/g16aje/a_possible_new_backend_for_rust/" id="1569">
        <title>(1) A Possible New Backend for Rust : rust#__#&lt;&lt;Rust by default will also build your dependencies without optimization, even though you never rebuild them#red&gt;&gt; &lt;&lt;dramatically faster tests in my case without impacting build time:#green&gt;&gt; &lt;&lt;# Non-release compilation profile for any non-workspace member.#green&gt;&gt; &lt;&lt;[profile.dev.package.&quot;*&quot;]#green&gt;&gt; &lt;&lt;opt-level = 3#green&gt;&gt; &lt;&lt;debug builds to opt-level = 2 recently, the slowdown in compile time is more than compensated by the tests running faster#green&gt;&gt; &lt;&lt;opt level 3 to get the most of my iterators + bounds checkers#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/rustc-memory-usage/55513/3" id="1570">
        <title>`rustc` memory usage - help - The Rust Programming Language Forum#__#&lt;&lt;cargo build -j1 to reduce the number of parallel threads/processes#green&gt;&gt; &lt;&lt;codegen-units = 1 in your Cargo profiles#green&gt;&gt; &lt;&lt;to reduce parallelism during codegen#red&gt;&gt; &lt;&lt;though I&apos;m not sure if combining all the code into a single large CGU will actually reduce memory#red&gt;&gt; &lt;&lt;compared to multiple small ones.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/mozilla/sccache" id="1571">
        <title>mozilla/sccache: sccache is ccache with cloud storage</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/chqu4c/building_a_computer_for_fastest_possible_rust/" id="1572">
        <title>Building a computer for fastest possible Rust compile times : rust#__#&lt;&lt;try sccache#green&gt;&gt; sscache&lt;&lt;doesn&apos;t seem to cache everything#red&gt;&gt; &lt;&lt;on the main rust-analyzer code#green&gt;&gt; &lt;&lt;Moving all dependenc into a dylib helps a lot#green&gt;&gt; &lt;&lt;motherboard to an x570 (PCIe-gen 4) will make for better GPU upgrade#green&gt;&gt; &lt;&lt;go higher wattage on the PSU (again for better upgrade pathways)#green&gt;&gt; &lt;&lt;mkdir target &amp;&amp; \#green&gt;&gt; &lt;&lt;sudo mount -t tmpfs none ./target &amp;&amp; \#green&gt;&gt; &lt;&lt;cat /proc/mounts | rg &quot;$(pwd)&quot; | sudo tee -a /etc/fstab#green&gt;&gt; &lt;&lt;codegen-units is set to 1 in my release#green&gt;&gt; &lt;&lt;look into Linux compatibility#green&gt;&gt; &lt;&lt;28gb, 24 for compilation#green&gt;&gt; &lt;&lt;miss out on some additional bandwidth/parallelism from a single dimm#red&gt;&gt; &lt;&lt;AMD zen CPUs, frequency of the RAM#red&gt;&gt; &lt;&lt;Ideal amount is 3600MHz#red&gt;&gt; &lt;&lt;above that, there was some penalty#red&gt;&gt; &lt;&lt;3200 ram with 16/16/16 timings#green&gt;&gt; &lt;&lt;instead of 16/18/18#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/the-lean-crate/cargo-diet" id="1573">
        <title>the-lean-crate/cargo-diet: A cargo-companion to become a &apos;lean crate&apos; (a member of The Lean Crate Initiative)</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/5-hours-to-compile-macro-what-can-i-do/36508/2" id="1574">
        <title>5 hours to compile macro, what can I do? - The Rust Programming Language Forum#__#&lt;&lt;LLVM is not good at big functions@1#red&gt;&gt; &lt;&lt;One of the functions you are generating is almost 100,000 lines@1#red&gt;&gt; &lt;&lt;including tons of internal control flow@1#red&gt;&gt; &lt;&lt;reorganize define_blocks to break this one function#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/fosskers/cargo-aur" id="1806">
        <title>fosskers/cargo-aur: Prepare Rust projects to be released on the Arch Linux User Repository</title>
      </bookmark>
      <bookmark href="https://endler.dev/2020/rust-compile-times/" id="1807">
        <title>Tips for Faster Rust Compile Times | Matthias Endler: Continuous Integration; VS Code extension#__#&lt;&lt;Visual Studio Code Remote#green&gt;&gt; &lt;&lt;Gitpod.io is superb for testing#green&gt;&gt; &lt;&lt;Simply add https://gitpod.io/# in front of any Github repository URL#green&gt;&gt; &lt;&lt;can download all crates in advance to have them cached locally. criner#green&gt;&gt; &lt;&lt;Upload Leaner Crates#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.kodewerx.org/2020/06/the-rust-compiler-isnt-slow-we-are.html" id="1808">
        <title>BlipJoy: The Rust compiler isn&apos;t slow; we are.#__#&lt;&lt;decisions are not made out of laziness, but of necessity&gt;&gt; &lt;&lt;quick to take advantage of just how effortless it is to bring in dependencies#red&gt;&gt; &lt;&lt;clap takes so long to compile. On my laptop, the 20_subcommands example took 1 minute and 14 seconds#red&gt;&gt; &lt;&lt;replacing clap with gumdrop#green&gt;&gt; &lt;&lt;isn&apos;t always possible to provide exactly the same CLI that clap&gt;&gt; &lt;&lt;reducing the compile time by 30 seconds#green&gt;&gt; &lt;&lt;executable size was also reduced by 500 KiB#green&gt;&gt; &lt;&lt;replaced was the parser generator, lalrpop with nom#green&gt;&gt; &lt;&lt;reduced the build time to about 40 seconds#green&gt;&gt; &lt;&lt;executable size was only reduced by 32 KiB#green&gt;&gt; &lt;&lt;replace regex with some simple iterator-based parsers#green&gt;&gt; &lt;&lt;reducing the build time to 26 seconds#green&gt;&gt; &lt;&lt;reducing the executable size by a whopping 1.14 MB#green&gt;&gt; &lt;&lt;cargo tree#green&gt;&gt; &lt;&lt;cargo-bloat#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.rust-lang.org/inside-rust/2020/11/11/exploring-pgo-for-the-rust-compiler.html" id="1809">
        <title>Exploring PGO for the Rust compiler | Inside Rust Blog</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rustc/codegen-options/index.html" id="1810">
        <title>Codegen options - The rustc book#__#&lt;&lt;codegen-units#green&gt;&gt; &lt;&lt;LLVM is able to process them in parallel#green&gt;&gt; &lt;&lt;parallelism may speed up compile times#green&gt;&gt; &lt;&lt;but may also produce slower code#red&gt;&gt; &lt;&lt;default value, if not specified, is 16 for non-incremental&gt;&gt; &lt;&lt;incremental builds the default is 256&gt;&gt; &lt;&lt;allows caching to be more granular#green&gt;&gt; &lt;&lt;LLVM bitcode is required when rustc is performing link-time optimization (LTO)#red&gt;&gt; &lt;&lt;-C embed-bitcode=no can significantly improve compile times#green&gt;&gt; &lt;&lt;reduce generated file sizes#green&gt;&gt; &lt;&lt;if you&apos;re not compiling for iOS or you&apos;re not performing LTO#red&gt;&gt; &lt;&lt;For these reasons, Cargo uses -C embed-bitcode=no whenever possible.#green&gt;&gt; &lt;&lt;if you are building directly with rustc we recommend using -C embed-bitcode=no whenever you are not using LTO.#green&gt;&gt; &lt;&lt;-C lto#red&gt;&gt; &lt;&lt;incremental@2#green&gt;&gt; &lt;&lt;inline-threshold#green&gt;&gt; &lt;&lt;higher threshold will allow more inlining#red&gt;&gt; &lt;&lt;default depends on the opt-level:&gt;&gt; &lt;&lt;code coverage metrics&gt;&gt; &lt;&lt;If this flag is not specified, the linker will be inferred based on the target.&gt;&gt; &lt;&lt;linker-flavor flag for another way to specify the linker&gt;&gt; &lt;&lt;cc executable, which is typically gcc or clang&gt;&gt; &lt;&lt;ld.lld: use the LLVM&gt;&gt; &lt;&lt;disable linker plugin LTO (the default)#green&gt;&gt; &lt;&lt;If -C lto is not specified, then the compiler will attempt to perform &quot;thin local LTO&quot; which performs &quot;thin&quot; LTO on the local crate only across its codegen units&gt;&gt; &lt;&lt;-O flag is an alias for -C opt-level=2#red&gt;&gt; &lt;&lt;enable the red zone#green&gt;&gt; &lt;&lt;use dynamic linking#green&gt;&gt; &lt;&lt;rustc --print target-cpus#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/dy365h/only_one_wish_for_rust_2020/" id="1811">
        <title>Only one wish for Rust 2020 : rust#__#&lt;&lt;Unicode tables#red&gt;&gt; &lt;&lt;regex/#crate-features#green&gt;&gt; &lt;&lt;cargo bloat --crates#green&gt;&gt; &lt;&lt;clap as a dependency#red&gt;&gt; &lt;&lt;alternatives like pico-args#green&gt;&gt; &lt;&lt;gumdrop#green&gt;&gt; &lt;&lt;multiple versions of syn+quote#red&gt;&gt; &lt;&lt;A depends on C=&apos;1.0.0&apos; and B depends on C=&apos;&gt;1.0.0,&lt;=1.1.0&apos; Then: both will get the one build of C 1.1.0 even if C 1.2.0 is available#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://matklad.github.io/2021/09/04/fast-rust-builds.html" id="1812">
        <title>Fast Rust Builds#__#&lt;&lt;Locally, you compile incrementally, and the time of build varies#red&gt;&gt; &lt;&lt;CI gives you a standardized benchmark#green&gt;&gt; &lt;&lt;wrong — the ./target is huge#red&gt;&gt; &lt;&lt;separate cargo test --no-run#green&gt;&gt; &lt;&lt;and cargo test#green&gt;&gt; &lt;&lt;Disable incremental#red&gt;&gt; &lt;&lt;Disable debuginfo#red&gt;&gt; &lt;&lt;add -D warnings to the RUSTFLAGS#green&gt;&gt; &lt;&lt;bad idea to #![deny(warnings)] in code#red&gt;&gt; &lt;&lt;read Cargo.lock#green&gt;&gt; &lt;&lt;not Cargo.toml#red&gt;&gt; &lt;&lt;for each dependency think about the actual problem this dependency solves for the person in front of your application#green&gt;&gt; &lt;&lt;timings flag for Cargo#green&gt;&gt; &lt;&lt;split the code#red&gt;&gt; &lt;&lt;architect the applications to look like the second picture#green&gt;&gt; &lt;&lt;common vocabulary crate&gt;&gt; &lt;&lt;number of independent features&gt;&gt; &lt;&lt;leaf crate&gt;&gt; &lt;&lt;important property of a crate is which crates it doesn’t (transitively) depend on#green&gt;&gt; &lt;&lt;number of final artifacts#red&gt;&gt; &lt;&lt;n binaries and m libraries#red&gt;&gt; &lt;&lt;linking is m * n#red&gt;&gt; &lt;&lt;hardlink the same executable as several files with different names#green&gt;&gt; &lt;&lt;each file in ./examples or ./tests folder creates a new executable#red&gt;&gt; &lt;&lt;push crates before syn#green&gt;&gt; &lt;&lt;keep serialization at the boundary of the system, in the leaf crates#green&gt;&gt; &lt;&lt;serialization near the foundation#red&gt;&gt; &lt;&lt;monomorphization happens per crate#red&gt;&gt; &lt;&lt;If optimizations are disabled, rustc can share template instantiations with dependencies#green&gt;&gt; &lt;&lt;doesn’t work for sibling dependencies#red&gt;&gt; &lt;&lt;do not put generic code at the boundaries between the crates#red&gt;&gt; &lt;&lt;each of the components does something concrete#green&gt;&gt; &lt;&lt;has non-generic interface#red&gt;&gt; &lt;&lt;immediately delegates#green&gt;&gt; &lt;&lt;fn inner#green&gt;&gt; &lt;&lt;closures: by default, prefer &amp;dyn Fn()#green&gt;&gt; &lt;&lt;over impl Fn()#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/ua09tc/experimental_fleet_a_build_tool_for_rust_thats/" id="1813">
        <title>[experimental] Fleet - A build tool for Rust that&apos;s upto 5x faster! : rust#__#&lt;&lt;mold and share-generics can both cause ICE#red&gt;&gt; &lt;&lt;rustflags = [&quot;-C&quot;, &quot;link-arg=-fuse-ld=/usr/bin/mold&quot;, &quot;-Zshare-generics=y&quot;]#blue&gt;&gt; &lt;&lt;sccache cannot cache incremental#red&gt;&gt; &lt;&lt;-Zshare-generics@2&gt;&gt; &lt;&lt;between crates&gt;&gt; &lt;&lt;sccache is really flaky#red&gt;&gt; &lt;&lt;poorly maintained#red&gt;&gt; &lt;&lt;Bazel&apos;s caching#green&gt;&gt; &lt;&lt;cargo-raze is awkward#red&gt;&gt; &lt;&lt;mold ) is extremely fast#green&gt;&gt; &lt;&lt;mold will use all of your cores&gt;&gt; &lt;&lt;caching (just set CARGO_TARGET_DIR#green&gt;&gt; &lt;&lt;opt-level=1#green&gt;&gt; &lt;&lt;cargo-udeps#green&gt;&gt; &lt;&lt;IIRC sccache#red&gt;&gt; &lt;&lt;never got above 75-80% cache hit rate because of the -sys crates#red&gt;&gt; &lt;&lt;Only Bazel#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.memorysafety.org/blog/remy-rakic-compile-times/" id="1814">
        <title>Improving Rust compile times to enable adoption of memory safety - Prossimo#__#&lt;&lt;benchmarks can be triggered on-demand for a PR&gt;&gt; &lt;&lt;summary of the results is posted on each merged PR&gt;&gt; &lt;&lt;1000 most popular crates&gt;&gt; &lt;&lt;data for complete cargo builds including dependencies&gt;&gt; &lt;&lt;common presence of build scripts#red&gt;&gt; &lt;&lt;proc-macros&gt;&gt; &lt;&lt;Compile-Time Function Evaluation&gt;&gt; &lt;&lt;interning of allocations#green&gt;&gt; &lt;&lt;allocations that are known to contain references or interior mutability&gt;&gt; &lt;&lt;masks&gt;&gt; &lt;&lt;whether each byte of an allocation is correctly initialized&gt;&gt; &lt;&lt;compiler uses (FxHash&gt;&gt; &lt;&lt;effective#green&gt;&gt; &lt;&lt;differently on Intel#red&gt;&gt; &lt;&lt;AMD#green&gt;&gt; &lt;&lt;rustc still targets baseline x86-64 CPUs (SSE2#red&gt;&gt; &lt;&lt;jemalloc on linux and macOS#green&gt;&gt; &lt;&lt;less easy to use custom allocators than in a regular rust program#red&gt;&gt; &lt;&lt;#[global_allocator] can&apos;t be used#red&gt;&gt; &lt;&lt;hard-to-avoid) inefficiencies on macOS#red&gt;&gt; &lt;&lt;Windows is still using the default system allocator#red&gt;&gt; &lt;&lt;Jan 31, 2023&gt;&gt; &lt;&lt;not yet#red&gt;&gt; &lt;&lt;tools to optimize the final binaries (e.g. BOLT&gt;&gt; &lt;&lt;x86_64-unknown-linux-gnu&gt;&gt; &lt;&lt;60-70%&gt;&gt; &lt;&lt;cargo&apos;s --crate-type#green&gt;&gt; &lt;&lt;helped hyper use#green&gt;&gt; &lt;&lt;show the number and sizes of generic function instantiations&gt;&gt; &lt;&lt;bjorn3&apos;s cranelift&gt;&gt; &lt;&lt;lld linker on linux&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rustc-dev-guide.rust-lang.org/parallel-rustc.html" id="1815">
        <title>Parallel Compilation - Rust Compiler Development Guide#__#&lt;&lt;August 2022&gt;&gt; &lt;&lt;general version of the compiler does not include these parallelization#red&gt;&gt; &lt;&lt;parallel-compiler = true in the config.toml#green&gt;&gt; &lt;&lt;thread-safe data-structures used in the parallel compiler can be found in the rustc_data_structures::sync&gt;&gt; &lt;&lt;implemented differently depending on whether parallel-compiler&gt;&gt; &lt;&lt;thread-safe data structures interspersed#red&gt;&gt; &lt;&lt;cause a lot of lock contention#red&gt;&gt; &lt;&lt;actually degrades performance as the number of threads increases beyond 4#red&gt;&gt; &lt;&lt;Parallel Iterator&gt;&gt; &lt;&lt;rayon crate#blue&gt;&gt; &lt;&lt;custom fork of rayon#blue&gt;&gt; &lt;&lt;when parallel-compiler is true#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/bw7qkq/per_crate_build_time_measurement/" id="1861">
        <title>(4) Per crate build time measurement? : rust#__#&lt;&lt;size of the rlib#green&gt;&gt; &lt;&lt;file.&gt;&gt; &lt;&lt;a good indicator&gt;&gt; &lt;&lt;example that I use to avoid having proptest cause problems while running cargo-tarpaulin:&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/oli-obk/ui_test" id="1862">
        <title>oli-obk/ui_test: A test framework for testing rustc diagnostics output#__#&lt;&lt;any slow tests#blue&gt;&gt; &lt;&lt;prepend them with a small integral number&gt;&gt; &lt;&lt;make them get run first#green&gt;&gt; &lt;&lt;taking advantage of parallelism#green&gt;&gt; &lt;&lt;instead of waiting for the slow tests at the end#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/pacak/hackerman/blob/master/README.md" id="1863">
        <title>hackerman/README.md at master · pacak/hackerman · GitHub#__#&lt;&lt;One way&gt;&gt; &lt;&lt;if members of a workspace depend on a crate&gt;&gt; &lt;&lt;depend on it with the same set of features.#green&gt;&gt; &lt;&lt;by hand is error prone#red&gt;&gt; &lt;&lt;with --lock option hackerman&gt;&gt; &lt;&lt;will save it inside Cargo.toml&gt;&gt; &lt;&lt;hardcode --lock&gt;&gt; &lt;&lt;Cargo.toml file that defines the workspace#blue&gt;&gt; &lt;&lt;explain starts at a given crate/feature&gt;&gt; &lt;&lt;follows reverse dependency&gt;&gt; &lt;&lt;Dotted line represents dev-only&gt;&gt; &lt;&lt;dashed line - both dev and normal but with different features across them#red&gt;&gt; &lt;&lt;By default hackerman expands packages info feature nodes&gt;&gt; &lt;&lt;can be reverted with -P&gt;&gt; &lt;&lt;tries to reduce transitive dependencies to keep the tree more readable&gt;&gt; &lt;&lt;If a crate is present in several versions you can specify version of the one you are interested in&gt;&gt; &lt;&lt;can also specify which feature to look for&gt;&gt; &lt;&lt;Hackerman dupes&gt;&gt; &lt;&lt;hack / check / restore&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://nnethercote.github.io/2023/07/11/back-end-parallelism-in-the-rust-compiler.html" id="1864">
        <title>Back-end parallelism in the Rust compiler | Nicholas Nethercote#__#&lt;&lt;What I tried&gt;&gt; &lt;&lt;16 seemed like something of a local optimum#green&gt;&gt; &lt;&lt;or non-incremental@1&gt;&gt; &lt;&lt;default number of CGUs for incremental#green&gt;&gt; &lt;&lt;Currently rustc repeatedly merges the two smallest CGUs until the number of CGUs is low enough.#red&gt;&gt; &lt;&lt;really bad algorithm&gt;&gt; &lt;&lt;Unfortunately, it made actual compile times, memory usage, and binary sizes all marginally worse, which was a surprise#red&gt;&gt; &lt;&lt;module boundaries are worth respecting#green&gt;&gt; &lt;&lt;extra complexity#red&gt;&gt; &lt;&lt;visualizing the call graphs&gt;&gt; &lt;&lt;GraphViz#red&gt;&gt; &lt;&lt;looked nice for very small#green&gt;&gt; &lt;&lt;but for larger programs they rapidly#red&gt;&gt; &lt;&lt;impossible to read and navigate#red&gt;&gt; &lt;&lt;complained about this#green&gt;&gt; &lt;&lt;use d2#green&gt;&gt; &lt;&lt;slower@1#red&gt;&gt; &lt;&lt;but gives somewhat more readable graphs#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://fleet.rs/" id="1865">
        <title>Fleet#__#&lt;&lt;up to 5x faster&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=906080" id="1866">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://nnethercote.github.io/perf-book/build-configuration.html?build-times" id="1867">
        <title>Build Configuration - The Rust Performance Book#__#&lt;&lt;Minimizing Compile Times&gt;&gt; &lt;&lt;lld,#green&gt;&gt; &lt;&lt;command line, use the -C link-arg=-fuse-ld=lld#green&gt;&gt; &lt;&lt;RUSTFLAGS=&quot;-C link-arg=-fuse-ld=lld&quot; cargo build --release&gt;&gt; &lt;&lt;lld from a config.toml&gt;&gt; &lt;&lt;[build]@1&gt;&gt; &lt;&lt;rustflags = [&quot;-C&quot;, &quot;link-arg=-fuse-ld=lld&quot;]&gt;&gt; &lt;&lt;lld is not fully supported#red&gt;&gt; &lt;&lt;Simply substitute mold for lld#green&gt;&gt; &lt;&lt;mold is often faster#green&gt;&gt; &lt;&lt;than lld#red&gt;&gt; &lt;&lt;no trade-offs here!#green&gt;&gt; &lt;&lt;Alternative linkers can be dramatically faster#green&gt;&gt; &lt;&lt;nightly#green&gt;&gt; &lt;&lt;parallel front-end.&gt;&gt; &lt;&lt;at the cost of higher compile-time memory&gt;&gt; &lt;&lt;won’t affect the quality of the generated code#green&gt;&gt; &lt;&lt;RUSTFLAGS=&quot;-Zthreads=8&quot;#green&gt;&gt; &lt;&lt;rustflags = [&quot;-Z&quot;, &quot;threads=8&quot;]#green&gt;&gt; 8&lt;&lt;number that tends to give the best results#green&gt;&gt; &lt;&lt;Cranelift Codegen Back-end#green&gt;&gt; &lt;&lt;reduce compile times@3#green&gt;&gt; &lt;&lt;at the cost of lower quality generated#red&gt;&gt; &lt;&lt;rustup component add rustc-codegen-cranelift-preview --toolchain nightly#green&gt;&gt; &lt;&lt;RUSTFLAGS=&quot;-Zcodegen-backend=cranelift&quot; cargo +nightly build#green&gt;&gt; &lt;&lt;[unstable]#green&gt;&gt; &lt;&lt;codegen-backend = true#green&gt;&gt; &lt;&lt;[profile.dev]#green&gt;&gt; &lt;&lt;codegen-backend = &quot;cranelift&quot;#green&gt;&gt; &lt;&lt;either case, consider -C target-cpu=native#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=4954" id="1868">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://mozilla.github.io/application-services/book/design/test-faster.html" id="1869">
        <title>Writing efficient tests - Cross-platform Rust Components</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/reference/unstable.html" id="1870">
        <title>Unstable Features - The Cargo Book#__#&lt;&lt;As of rust-lang/rust#64158&gt;&gt; &lt;&lt;test crate supports -C panic=abort&gt;&gt; &lt;&lt;a test-per-process&gt;&gt; &lt;&lt;can help avoid compiling crate graphs multiple times#red&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="1407">
    <title>IDE</title>
    <folder id="1430">
      <title>Code Style</title>
      <bookmark href="https://github.com/rust-lang/rfcs/pull/1607" id="1576">
        <title>RFC process for formatting style and Rustfmt defaults by nrc · Pull Request #1607 · rust-lang/rfcs#__#&lt;&lt;Especially repetitive test code does often not benefit from formatting#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1431">
      <title>IntelliJ</title>
      <bookmark href="https://blog.jetbrains.com/clion/2020/05/whats-new-in-intellij-rust/" id="1577">
        <title>What’s New in IntelliJ Rust – CLion...#__#&lt;&lt;NOT debug Rust for Windows yet#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://intellij-rust.github.io/docs/faq.html" id="1578">
        <title>FAQ#__#&lt;&lt;don’t use the SDK concept to manage Rust versions#red&gt;&gt; &lt;&lt;path to Cargo is configured per project in Settings / Preferences | Languages &amp; Frameworks | Rust#green&gt;&gt; &lt;&lt;RLS, Racer or Rust Analyzer?@1#red&gt;&gt; &lt;&lt;No, we implement most of the language analysis from scratch#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/7vgelh/what_ide_do_you_use/" id="1579">
        <title>Rust IDEs: IntelliJ  + CLion</title>
      </bookmark>
      <bookmark href="https://www.jetbrains.com/help/idea/increasing-memory-heap.html" id="1580">
        <title>Increasing Memory Heap - Help | IntelliJ IDEA#__#&lt;&lt;Edit Custom VM Options&gt;&gt; &lt;&lt;Increasing Memory Heap@1&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1432">
      <title>Online</title>
      <bookmark href="https://www.freecodecamp.org/news/learn-rust-with-github-actions/" id="1581">
        <title>How to Learn Rust Without Installing...</title>
      </bookmark>
      <bookmark href="https://www.freecodecamp.org/news/learn-programming-in-your-browser-the-right-way/" id="1582">
        <title>GitHub Codespaces – How to Code Right...</title>
      </bookmark>
      <bookmark href="https://fasterthanli.me/articles/remote-development-with-rust-on-fly-io" id="1583">
        <title>Remote development with Rust on fly.io#__#&lt;&lt;edit remote files, open arbitrary terminals&gt;&gt; &lt;&lt;in VS Code&gt;&gt; &lt;&lt;latency is less of a concern#green&gt;&gt; &lt;&lt;vim over ssh#red&gt;&gt; &lt;&lt;doesn&apos;t need to wait for single keystrokes to be sent&gt;&gt; &lt;&lt;fly.io region&gt;&gt; &lt;&lt;latency@1&gt;&gt; &lt;&lt;~10ms&gt;&gt; &lt;&lt;VS Code extensions#green&gt;&gt; &lt;&lt;work directly on the Rust project itself#green&gt;&gt; &lt;&lt;foundation has a program#green&gt;&gt; &lt;&lt;x86_64 Docker container, which, on macOS, runs in a VM#red&gt;&gt; &lt;&lt;onboard them quickly&gt;&gt; &lt;&lt;energy+heat#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://fly.io/docs/about/pricing/" id="1584">
        <title>Fly App Pricing · Fly Docs#__#&lt;&lt;small applications for free&gt;&gt; &lt;&lt;for free:&gt;&gt; &lt;&lt;3 shared-cpu-1x 256mb VMs&gt;&gt; &lt;&lt;3GB persistent&gt;&gt; &lt;&lt;160GB outbound data&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1433">
      <title>VS Code</title>
      <folder id="1585">
        <title>Develop Extensions</title>
        <bookmark href="https://code.visualstudio.com/api/get-started/your-first-extension" id="1697">
          <title>Your First Extension | Visual Studio Code Extension API#__#&lt;&lt;Debugging the extension#green&gt;&gt; &lt;&lt;TypeScript offers the best experience for developing VS Code extensions#green&gt;&gt; &lt;&lt;7/7/2022&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1586">
        <title>Extension</title>
        <bookmark href="https://marketplace.visualstudio.com/items?itemName=kevinkyang.auto-comment-blocks" id="1698">
          <title>Auto Comment Blocks - Visual Studio Marketplace</title>
        </bookmark>
        <bookmark href="https://marketplace.visualstudio.com/items?itemName=swellaby.rust-pack" id="1699">
          <title>Rust Extension Pack - Visual Studio Marketplace#__#It includes &quot;rls&quot;, which conflicts with rust-analyzer.</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=131506" id="1700">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://marketplace.visualstudio.com/search?term=tag%3Arust&amp;target=VSCode&amp;category=All%20categories&amp;sortBy=Relevance" id="1701">
          <title>Search results - tag:rust | Visual Studio...</title>
        </bookmark>
        <bookmark href="https://www.reddit.com/r/rust/comments/18f6uzi/flowistry_an_ide_plugin_that_analyzes_the/" id="1702">
          <title>(7) Flowistry: an IDE plugin that analyzes the information flow of Rust programs, showing whether it&apos;s possible for one piece of code to affect another : rust</title>
        </bookmark>
        <bookmark href="https://github.com/willcrichton/flowistry" id="1703">
          <title>willcrichton/flowistry: Flowistry is an IDE plugin for Rust that helps you focus on relevant code.</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=444058" id="1704">
          <title>-----</title>
        </bookmark>
      </folder>
      <folder id="1587">
        <title>nice-index</title>
        <bookmark href="https://github.com/skoshy/nice-index-vscode" id="1705">
          <title>skoshy/nice-index-vscode: Cleaner tab titles for index.* files in VSCode</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/54354775/visual-studio-code-how-do-i-display-the-file-directory-in-the-tab-for-all-files/54354948#54354948=" id="1706">
          <title>Visual Studio Code: How do I display the file directory in the tab for all files? - Stack Overflow</title>
        </bookmark>
        <bookmark href="https://marketplace.visualstudio.com/items?itemName=iocave.monkey-patch" id="1707">
          <title>Monkey Patch - Visual Studio Marketplace#__#&lt;&lt;fragile at times#red&gt;&gt; 28 issues (July 2024)&lt;&lt;Open Issues#red&gt;&gt; a year ago&lt;&lt;Last Commit#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/iocave/customize-ui" id="1708">
          <title>iocave/customize-ui: UI Customization plugin for vscode</title>
        </bookmark>
        <bookmark href="https://github.com/microsoft/vscode/issues/41909" id="1709">
          <title>Provide API to access and change editor tab labels · Issue #41909 · microsoft/vscode#__#&lt;&lt;\.?(ENV|index|setup|config|app|README|TODO)\.?(js|py|php|html?|md|txt)#green&gt;&gt; &lt;&lt;&quot;alt + [number]&quot; to switch between tabs#green&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1588">
        <title>zOther</title>
        <bookmark href="https://www.forrestthewoods.com/blog/how-to-debug-rust-with-visual-studio-code/" id="1710">
          <title>How to Debug Rust with Visual Studio Code#__#Allow Breakpoints Everywhere&lt;&lt;File -&gt; Preferences -&gt; Settings#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/46885292/how-to-launch-a-rust-application-from-visual-studio-code" id="1711">
          <title>How to launch a Rust application from Visual Studio Code? - Stack Overflow#__#&lt;&lt;to run the integrated terminal: Ctrl + `#green&gt;&gt; &lt;&lt;(Ctrl + backtick)#green&gt;&gt; &lt;&lt;Shortcut to run the Task: Ctrl + Shift + B#blue&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://users.rust-lang.org/t/best-ide-for-newcomers/9767/5" id="1712">
          <title>Best IDE for newcomers - help - The Rust Programming Language Forum#__#&lt;&lt;VSCode now as my full time Rust IDE, with the Rust extension#green&gt;&gt; Use WITH rust-lang.rust (the standard Rust) VS Code extension.&lt;&lt;can also integrate https://github.com/rust-lang-nursery/rls#green&gt;&gt; &lt;&lt;even more feature rich#green&gt;&gt; &lt;&lt;this is not easy, yet#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://levelup.gitconnected.com/rust-with-visual-studio-code-46404befed8" id="1713">
          <title>Rust with Visual Studio Code. A simple how-to | by Colin Bester | Oct, 2020 | Level Up Coding#__#&lt;&lt;on the MacOS#red&gt;&gt; &lt;&lt;task’s feature use Command+Shift+B#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/64683236/using-vscode-debug-console-with-rust" id="1714">
          <title>debugging - Using vscode debug console with rust - Stack Overflow</title>
        </bookmark>
        <bookmark href="https://jason-williams.co.uk/debugging-rust-in-vscode" id="1715">
          <title>Debugging Rust in VSCode – Jason Williams#__#&lt;&lt;February 9, 2020&gt;&gt; &lt;&lt;recommend getting Rust Analyzer (RA). It has excellent IDE support for Rust and is being actively developed#green&gt;&gt; &lt;&lt;RLS#red&gt;&gt; &lt;&lt;Rust Analyzer is a replacement#green&gt;&gt;&lt;&lt;sourceMap#green&gt;&gt; &lt;&lt;sourceFileMap&gt;&gt; &lt;&lt;to step into the Rust standard library code#green&gt;&gt; &lt;&lt;with sourceFileMap&gt;&gt; &lt;&lt;CodeLLDB you could use a wildcard (/rustc/*) but that feature has since broke#red&gt;&gt; &lt;&lt;Some users prefer to do their development inside the VSCode Dev Container builds.&gt;&gt; &lt;&lt;Boa repository has a good example of configuration set up with debugging included&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/BowlerHatLLC/vscode-as3mxml/issues/358" id="1716">
          <title>Matches multiple schemas when only one must validate · Issue #358 · BowlerHatLLC/vscode-as3mxml#__#&lt;&lt;When you see weird warnings, restarting the editor#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://discord.com/channels/736244493019250779/736244493552058451/803826475781586944" id="1717">
          <title>Font Ligature for VS Code#__#&lt;&lt;in preferences:
&quot;editor.fontLigatures&quot;: true&gt;&gt;

https://docs.microsoft.com/en-us/windows/terminal/cascadia-code</title>
        </bookmark>
      </folder>
    </folder>
    <folder id="1434">
      <title>zOther</title>
      <bookmark href="https://github.com/doc-jones/GCP-nightly-setup" id="1589">
        <title>doc-jones/GCP-nightly-setup: Steps to... with Google Apps</title>
      </bookmark>
      <bookmark href="https://areweideyet.com/" id="1590">
        <title>Are we (I)DE yet?#__#&lt;&lt;packages:Rust,CodeLLDB, Debug, Rust Test Lens, TOML Language Supportor Better Toml, crates#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/44303915/no-default-toolchain-configured-after-installing-rustup" id="1591">
        <title>rust - No default toolchain configured after installing rustup - Stack Overflow#__#&lt;&lt;no default toolchain configured#red&gt;&gt; Do NOT run as root. RUN as a standard user&lt;&lt;rustup install stable#green&gt;&gt; &lt;&lt;rustup default stable#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://medium.com/cloud-native-the-gathering/whats-the-best-ide-for-developing-in-rust-5087d46006f5" id="1592">
        <title>What is the best IDE for developing in...#__#&lt;&lt;IntelliJ Rust plugin#green&gt;&gt; &lt;&lt;debugging when installed in CLion#green&gt;&gt; &lt;&lt;Free for community#green&gt;&gt; &lt;&lt;Refactoring#green&gt;&gt; &lt;&lt;slow#red&gt;&gt; &lt;&lt;minutes for syntax and error highlighting#red&gt;&gt; &lt;&lt;completions#green&gt;&gt; &lt;&lt;Supports#green&gt;&gt; &lt;&lt;I don’t have nightly anything setup, however it completes things in nightly.#red&gt;&gt; &lt;&lt;looks like it complies in IDE, until a build is run, then it doesn’t#red&gt;&gt; &lt;&lt;randomly say things don’t compile#red&gt;&gt; &lt;&lt;will say missing method#red&gt;&gt; &lt;&lt;intellij is by far the most heavy weight#red&gt;&gt; &lt;&lt;/u/r3vj4m3z on /r/rust#green&gt;&gt; &lt;&lt;big plus of IntelliJ over VSS was the let completions#green&gt;&gt; &lt;&lt;wit 3rd parties it becomes quicker and easier to see what object is being returned#green&gt;&gt; &lt;&lt;diesel stuff it was especially useful since the objects are rather long#green&gt;&gt; &lt;&lt;CLion is a C/C++ IDE that can also support the IntelliJ Rust plugin#green&gt;&gt; &lt;&lt;Allows use of Cargo#green&gt;&gt; &lt;&lt;debugging Rust#green&gt;&gt; &lt;&lt;free with .edu e-mail#red&gt;&gt; &lt;&lt;Debugging support in CLion is excellent!#green&gt;&gt; &lt;&lt;VSCode with Rust plugin#green&gt;&gt; &lt;&lt;Having spent 3+ weeks each using intellij-rust, vscode-rust#blue&gt;&gt; &lt;&lt;vscode plugin#green&gt;&gt; &lt;&lt;intellij, the completion worked#green&gt;&gt; Feb 2019&lt;&lt;Intellij does have tons of refactors others don’t#green&gt;&gt; Apr 2017&lt;&lt;VSCode has good Language Server support#green&gt;&gt; 3ys old: Last update at Oct 2017 (as of Nov 2020)&lt;&lt;rust extension#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/reference/issues/788" id="1593">
        <title>better documentation of reborrowing · Issue #788 · rust-lang/reference#__#&lt;&lt;rust-analyzer.inlayHints.expressionAdjustmentHints.enable#green&gt;&gt; &lt;&lt;rust-analyzer.inlayHints.lifetimeElisionHints.enable#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-analyzer.github.io/manual.html" id="1594">
        <title>User Manual#__#&lt;&lt;may cause conflicts with the official Rust plugin#red&gt;&gt; &lt;&lt;disable the Rust plugin when using the rust-analyzer#green&gt;&gt; &lt;&lt;By default, the plugin will prompt you to download the matching version of the server as well&gt;&gt; &lt;&lt;Arch Linux&gt;&gt; &lt;&lt;rust-analyzer binary can be installed from the repos or AUR&gt;&gt; in ~/.config/Code\ -\ Insiders/User/settings.json&lt;&lt;&quot;rust-analyzer.updates.askBeforeDownload&quot;: false#green&gt;&gt; &lt;&lt;Editor Features#green&gt;&gt; &lt;&lt;Color configurations#green&gt;&gt; &lt;&lt;inlay hints@7&gt;&gt; &lt;&lt;different semantic elements&gt;&gt; &lt;&lt;mutable bindings are underlined by default#green&gt;&gt; &lt;&lt;Most themes doesn’t support styling unsafe operations differently yet#red&gt;&gt; &lt;&lt;overrides for the rules operator.unsafe, function.unsafe, and method.unsafe#green&gt;&gt; &lt;&lt;overrides for specific themes#green&gt;&gt; &lt;&lt;&quot;[Ayu Light]&quot;: {#green&gt;&gt; &lt;&lt;brackets around the theme name&gt;&gt; &lt;&lt;inRustProject&gt;&gt; &lt;&lt;keybindings for rust projects only#green&gt;&gt; &lt;&lt;&quot;command&quot;: &quot;rust-analyzer.openDocs&quot;#green&gt;&gt; &lt;&lt;rust-analyzer.procMacro.ignored#green&gt;&gt; &lt;&lt;rust-analyzer: View Memory Layout&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/zed-industries" id="1595">
        <title>Zed Industries#__#Initially for Mac OS only!&lt;&lt;zed#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/pulsar-edit" id="1596">
        <title>Pulsar Edit</title>
      </bookmark>
    </folder>
    <folder id="1435">
      <title>Fleet (JetBrains)</title>
      <bookmark href="https://www.jetbrains.com/help/fleet/settings.html" id="1597">
        <title>Settings | JetBrains Fleet Documentation</title>
      </bookmark>
      <bookmark href="https://www.jetbrains.com/help/fleet/debug-rust-code.html" id="1598">
        <title>Debug Rust code | JetBrains Fleet Documentation</title>
      </bookmark>
      <bookmark href="https://www.jetbrains.com/help/fleet/getting-started-with-rust.html" id="1599">
        <title>Getting started with Rust | JetBrains Fleet Documentation</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="1408">
    <title>Integrate</title>
    <bookmark href="https://www.freecodecamp.org/news/rust-webassembly-serverless-tencent-cloud/" id="1436">
      <title>How to use Rust + WebAssembly to Perform... with AWS</title>
    </bookmark>
    <bookmark href="https://www.freecodecamp.org/news/going-serverless-with-rust-and-api-gateway-aa5d1502c32e/" id="1437">
      <title>How to go serverless with Rust and API Gateway with AWS</title>
    </bookmark>
    <bookmark href="https://en.wikipedia.org/wiki/Redox_(operating_system)" id="1438">
      <title>Redox (operating system) - Wikipedia</title>
    </bookmark>
  </folder>
  <folder id="1409">
    <title>Logging/Telemetry/Observability</title>
    <bookmark href="https://github.com/mainmatter/rust-telemetry-workshop/blob/main/README.md" id="1439">
      <title>rust-telemetry-workshop/README.md at main · mainmatter/rust-telemetry-workshop</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=218895" id="1440">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://blog.logrocket.com/a-practical-guide-to-async-in-rust/" id="1441">
      <title>A practical guide to async in Rust - LogRocket Blog#__#&lt;&lt;let mut rt = tokio::runtime::Runtime::new().unwrap();&gt;&gt; &lt;&lt;let future = app();&gt;&gt; &lt;&lt;rt.block_on(future);&gt;&gt; &lt;&lt;#[tokio::main]&gt;&gt; &lt;&lt;async fn main() {&gt;&gt; &lt;&lt;use tokio::task;&gt;&gt; &lt;&lt;let concurrent_future = task::spawn(our_async_program());&gt;&gt; &lt;&lt;task::spawn_blocking(||fib_cpu_intensive(30));&gt;&gt; &lt;&lt;avoid blocking#red&gt;&gt; &lt;&lt;running CPU-intensive code in Futures themselves#red&gt;&gt; &lt;&lt;Errors in#red&gt;&gt; &lt;&lt;async contexts needs some extra#red&gt;&gt; &lt;&lt;type Result&lt;T&gt; = std::result::Result&lt;T, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt;;&gt;&gt; &lt;&lt;async fn app() -&gt; Result&lt;()&gt;&gt;&gt; &lt;&lt;match rt.block_on(app())&gt;&gt; &lt;&lt;logging facade, log&gt;&gt; &lt;&lt;logger (env_logger)&gt;&gt; &lt;&lt;env_logger relies on the RUST_LOG#red&gt;&gt; &lt;&lt;handling errors in applications is Anyhow&gt;&gt; &lt;&lt;async-log&gt;&gt; &lt;&lt;chrono or log crates&gt;&gt; &lt;&lt;let start = std::time::Instant::now();&gt;&gt; &lt;&lt;env_logger::Builder::from_default_env().format(move |buf, rec| {&gt;&gt; &lt;&lt;let t = start.elapsed().as_secs_f32();&gt;&gt; &lt;&lt;writeln!(buf, &quot;{:.03} [{}] - {}&quot;, t, rec.level(),rec.args())&gt;&gt; &lt;&lt;}).init();&gt;&gt; &lt;&lt;async fn our_async_program() -&gt; Result&lt;String&gt; {&gt;&gt; &lt;&lt;future::ok(&quot;Hello world&quot;.to_string()).await@1&gt;&gt; &lt;&lt;async {&gt;&gt; &lt;&lt;hoops to return errors from them via ?#green&gt;&gt; &lt;&lt;lazy. By default, they won’t do anything before they’re polled#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rust-embedded.org/embedonomicon/logging.html" id="1442">
      <title>Logging with symbols - The Embedonomicon - embedded</title>
    </bookmark>
    <bookmark href="https://docs.rust-embedded.org/embedonomicon/singleton.html" id="1443">
      <title>Global singletons - The Embedonomicon - embedded#__#&lt;&lt;extend the logger we developed in the last section to support global logging&gt;&gt; &lt;&lt;similar to the #[global_allocator]#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=988582" id="1444">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://docs.rs/log/latest/log/" id="1445">
      <title>log - Rust</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/mock-logger" id="1446">
      <title>crates.io: Rust Package Registry</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/fern" id="1447">
      <title>fern - crates.io: Rust Package Registry</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=896148" id="1448">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/test-log" id="1728">
      <title>crates.io: Rust Package Registry</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=740159" id="1729">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://docs.rs/tracing/latest/tracing/" id="1730">
      <title>tracing - Rust</title>
    </bookmark>
    <bookmark href="https://docs.rs/tracing-futures/latest/tracing_futures/" id="1731">
      <title>tracing_futures - Rust</title>
    </bookmark>
    <bookmark href="https://docs.rs/tracing-log/latest/tracing_log/" id="1732">
      <title>tracing_log - Rust#__#&lt;&lt;unstructured log records from the log crate into the tracing&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=717964" id="1733">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://docs.rs/opentelemetry/latest/opentelemetry/" id="1734">
      <title>opentelemetry - Rust</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=991388" id="1735">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://docs.rs/gag/latest/gag/" id="1736">
      <title>gag - Rust#__#&lt;&lt;Temporarily redirect stdout/stderr&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/how-to-test-functions-that-use-println/67188/5" id="1737">
      <title>How to test functions that use println!() - help - The Rust Programming Language Forum#__#&lt;&lt;using the gag#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=18074" id="1845">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://jeffkreeftmeijer.com/rust-stdin-stdout-testing/" id="1846">
      <title>Testing input and output in Rust command line applications#__#like mocking&lt;&lt;traits, we can swap&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1410">
    <title>Organize &amp; Navigate</title>
    <bookmark href="https://doc.rust-lang.org/nightly/cargo/guide/cargo-toml-vs-cargo-lock.html" id="1449">
      <title>Cargo.toml vs Cargo.lock - The Cargo Book#__#&lt;&lt;Cargo.lock contains exact information about your dependencies&gt;&gt; &lt;&lt;If you’re building a non-end product#blue&gt;&gt; &lt;&lt;such as a rust library that other rust packages will depend on#green&gt;&gt; &lt;&lt;put Cargo.lock in your .gitignore#green&gt;&gt; &lt;&lt;If you’re building an end product#blue&gt;&gt; &lt;&lt;executable like command-line tool#red&gt;&gt; &lt;&lt;application#red&gt;&gt; &lt;&lt;system library#red&gt;&gt; &lt;&lt;crate-type of staticlib#red&gt;&gt; for WASM or watt&lt;&lt;cdylib#red&gt;&gt; &lt;&lt;check Cargo.lock into git#green&gt;&gt; &lt;&lt;rand = { git = &quot;https://github.com/rust-lang-nursery/rand.git&quot;, rev = &quot;9f35b8e&quot; }#green&gt;&gt; &lt;&lt;Cargo will take the latest commit#green&gt;&gt; &lt;&lt;write that information out into our Cargo.lock#green&gt;&gt; &lt;&lt;build for the first time#green&gt;&gt; &lt;&lt;cargo update           # updates all dependencies#green&gt;&gt; &lt;&lt;cargo update -p rand   # updates just “rand”#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/typenum/reverse_dependencies" id="1450">
      <title>crates.io Reverse Dependencies</title>
    </bookmark>
    <bookmark href="https://mudit.blog/rust-tips-and-tricks/" id="1451">
      <title>Rust lang Tips and Tricks | Mudit Gupta&apos;s Blog#__#Integration tests&lt;&lt;each one of those tests gets compiled as a separate binary#red&gt;&gt; for integration tests only!&lt;&lt;instead add your test files as modules to a single test#green&gt;&gt; &lt;&lt;only a single binary is generated#green&gt;&gt; &lt;&lt;disadvantage that you can not change one test file and compile just that file#red&gt;&gt; &lt;&lt;cut our CI test time in Polymesh from 26 minutes to 8 minutes#green&gt;&gt; &lt;&lt;compiling individual files was only ~10 seconds faster#red&gt;&gt; &lt;&lt;than compiling the full binary#green&gt;&gt; &lt;&lt;? converts between error types#green&gt;&gt; &lt;&lt;? actually returns Err(From::from(err))#green&gt;&gt; &lt;&lt;swap function#green&gt;&gt; &lt;&lt;dbg! macro#green&gt;&gt; &lt;&lt;let b = dbg!(a * 2) + 1;#green&gt;&gt; &lt;&lt;Same name macro, function, and type#green&gt;&gt; &lt;&lt;declare a macro, a function and a type like an Enum with the same name#green&gt;&gt; &lt;&lt;then import all three of them elsewhere with a single import#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/fhw6uu/tips_for_approaching_rust_code_base/" id="1452">
      <title>Tips for approaching Rust code base : rust#__#&lt;&lt;dive into program flow#green&gt;&gt; &lt;&lt;than into structure#red&gt;&gt; &lt;&lt;stepping through code using a debugger#green&gt;&gt; &lt;&lt;reading documentation via rustdoc#green&gt;&gt; &lt;&lt;not to think in objects#red&gt;&gt; &lt;&lt;but guarantees (traits)#green&gt;&gt; &lt;&lt;Clion and most of the times, when I have a breakpoints and I inspect the variable, they usually show up as undefined#red&gt;&gt; &lt;&lt;Visual Studio Code&gt;&gt; &lt;&lt;Rust (rls)&quot; and &quot;CodeLLDB#green&gt;&gt; &lt;&lt;play-with-a-bug button (^^) on the left#green&gt;&gt; &lt;&lt;add a new configuration for LLDB#green&gt;&gt; &lt;&lt;(not C/C++)#red&gt;&gt; &lt;&lt;Then, you&apos;re asked if you want to generate a launch.json based on your Cargo.toml targets, click yes#green&gt;&gt; &lt;&lt;set a breakpoint there and do some procedural stepping#green&gt;&gt; &lt;&lt;variables and watch lists work&gt;&gt; &lt;&lt;Each file in Rust is a module.#blue&gt;&gt; &lt;&lt;file can contain other sub-modules#blue&gt;&gt; &lt;&lt;write functions when you are dealing with the data structure as a whole#green&gt;&gt; &lt;&lt;rather than wanting to act on the state contained *inside* the object#red&gt;&gt; &lt;&lt;modules are essentially groups of related functionality#blue&gt;&gt; &lt;&lt;group many structs that are going to interact#green&gt;&gt; &lt;&lt;no reason to make a submodule for each struct#red&gt;&gt; &lt;&lt;when *using* the code, it&apos;s *much* more efficient to look at the documentation#green&gt;&gt; &lt;&lt;navigating the project using a directory tree less useful#red&gt;&gt; &lt;&lt;In Rust, the encapsulation boundary is the module#green&gt;&gt; &lt;&lt;cargo doc --document-private-items --open#green&gt;&gt; &lt;&lt;even one with zero comments#green&gt;&gt; &lt;&lt;always have a docs.rs/&lt;crate&gt; tab opened#green&gt;&gt; &lt;&lt;have std tab opened#green&gt;&gt; &lt;&lt;running the following to get a quick overview of what&apos;s in a given crate:#green&gt;&gt; &lt;&lt;rg &quot;struct|enum|impl|fn|type&quot;#green&gt;&gt; &lt;&lt;or, when I&apos;m more interested in the api:#green&gt;&gt; &lt;&lt;rg &quot;pub (struct|enum|impl|fn|type)&quot;#green&gt;&gt; &lt;&lt;generated documentation#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://fasterthanli.me/articles/rust-modules-vs-files" id="1453">
      <title>Rust modules vs files - fasterthanli.me</title>
    </bookmark>
    <bookmark href="https://rustc-dev-guide.rust-lang.org/compiler-src.html" id="1454">
      <title>The compiler source code - Guide to Rustc Development#__#&lt;&lt;50 interdependent crates#red&gt;&gt; &lt;&lt;won&apos;t have any further explanation of these crates here&gt;&gt; &lt;&lt;dependency structure reflects#green&gt;&gt; &lt;&lt;code structure of the compiler#green&gt;&gt; &lt;&lt;By breaking the compiler into multiple crates#green&gt;&gt; &lt;&lt;incremental/parallel compilation using cargo#green&gt;&gt; &lt;&lt;as few dependencies between crates as possible#green&gt;&gt; &lt;&lt;don&apos;t have to rebuild as many crates if you change one#red&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1575">
    <title>Scripting/Integration</title>
    <folder id="1695">
      <title>Rhai</title>
      <bookmark href="https://jstrong.dev/posts/2023/fast-flexible-iteration-with-rust-and-rhai/fast-flexible-iteration-with-rust-and-rhai-slides.pdf" id="1816">
        <title>rust-and-rhai-v3 - fast-flexible-iteration-with-rust-and-rhai-slides.pdf</title>
      </bookmark>
      <bookmark href="https://rhai.rs/" id="1817">
        <title>Rhai – Embedded Scripting for Rust#__#&lt;&lt;most common targets&gt;&gt; &lt;&lt;no-std&gt;&gt; &lt;&lt;WASM&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/about/features.html" id="1818">
        <title>Features of Rhai - Rhai - Embedded Scripting for Rust#__#&lt;&lt;getters/setters&gt;&gt; &lt;&lt;indexers&gt;&gt; &lt;&lt;dynamic typing&gt;&gt; &lt;&lt;clonable#red&gt;&gt; &lt;&lt;no-std and WASM&gt;&gt; &lt;&lt;Plugins&gt;&gt; &lt;&lt;by procedural macros&gt;&gt; &lt;&lt;simplifies#blue&gt;&gt; &lt;&lt;custom API#green&gt;&gt; &lt;&lt;1 million iterations in 0.14 sec on a single-core, 2.6 GHz&gt;&gt; &lt;&lt;Compile once&gt;&gt; &lt;&lt;optimized&gt;&gt; &lt;&lt;Organize code base&gt;&gt; &lt;&lt;dynamically-loadable modules,&gt;&gt; &lt;&lt;optionally overriding the resolution process&gt;&gt; &lt;&lt;Dynamic dispatch via function pointers&gt;&gt; &lt;&lt;currying&gt;&gt; &lt;&lt;object-oriented programming (OOP)&gt;&gt; &lt;&lt;Closures that can capture shared variables&gt;&gt; &lt;&lt;Hook into variables access via a variable resolver&gt;&gt; &lt;&lt;control definition of variables via a variable definition filter&gt;&gt; &lt;&lt;Sand-boxed&gt;&gt; &lt;&lt;Engine, if declared immutable, cannot mutate the containing environment#green&gt;&gt; &lt;&lt;unless explicitly permitted&gt;&gt; &lt;&lt;Passes Miri.#green&gt;&gt; &lt;&lt;Don’t Panic guarantee#green&gt;&gt; &lt;&lt;Protected against malicious&gt;&gt; &lt;&lt;stack-overflow, over-sized data, and runaway scripts&gt;&gt; &lt;&lt;Track script evaluation progress&gt;&gt; &lt;&lt;manually terminate a script run&gt;&gt; &lt;&lt;Re-entrant&gt;&gt; &lt;&lt;can be made Send + Sync (via the sync feature&gt;&gt; &lt;&lt;minimal builds&gt;&gt; &lt;&lt;excluding unneeded language features&gt;&gt; &lt;&lt;disable keywords and operators&gt;&gt; &lt;&lt;debugging interface&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rhaiscript/rhai/blob/main/README.md" id="1819">
        <title>rhai/README.md at main · rhaiscript/rhai#__#&lt;&lt;fn fib(n) {&gt;&gt; &lt;&lt;fib(n-1) + fib(n-2)&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/start/features.html" id="1820">
        <title>Optional Features - Rhai - Embedded Scripting for Rust</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/language/dynamic.html" id="1821">
        <title>Dynamic Values - Rhai - Embedded Scripting for Rust#__#&lt;&lt;Under the sync feature, all types must also be Send + Sync&gt;&gt; &lt;&lt;Use type_of&gt;&gt; &lt;&lt;parse_json to parse a JSON string into a Dynamic&gt;&gt; &lt;&lt;excluded when using a raw Engine#red&gt;&gt; &lt;&lt;also requires the metadata feature; the no_index and no_object features#red&gt;&gt; &lt;&lt;not be set.#red&gt;&gt; &lt;&lt;print(`I don&apos;t know what this is: ${type_of(mystery)}`)#green&gt;&gt; &lt;&lt;x = #{x: x};        // value is now an object map#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/engine/expressions.html" id="1822">
        <title>Expressions Only - Rhai - Embedded Scripting for Rust#__#&lt;&lt;Engine::compile_expression&gt;&gt; &lt;&lt;Engine::eval_expression&gt;&gt; &lt;&lt;or their _with_scope variants&gt;&gt; &lt;&lt;No statements&gt;&gt; &lt;&lt;not even variable assignment&gt;&gt; &lt;&lt;true also for statement expressions and closures#red&gt;&gt; &lt;&lt;|x| x + 1#red&gt;&gt; &lt;&lt;x = 42#red&gt;&gt; &lt;&lt;if-expressions&gt;&gt; &lt;&lt;switch-expressions&gt;&gt; &lt;&lt;loop expressions are not allowed#red&gt;&gt; &lt;&lt;fp: FnPtr#red&gt;&gt; &lt;&lt;fn#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=817908" id="1823">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://rhai.rs/playground/stable/" id="1824">
        <title>Rhai Playground</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/start/examples/rust.html" id="1825">
        <title>Rust - Rhai - Embedded Scripting for Rust#__#&lt;&lt;register a Rust type&gt;&gt; &lt;&lt;using it with arrays&gt;&gt; &lt;&lt;store a Rhai closure&gt;&gt; &lt;&lt;call it later within Rust&gt;&gt; &lt;&lt;Rust type and methods/getters/setters&gt;&gt; &lt;&lt;Rust type and methods/getters/setters using the CustomType&gt;&gt; &lt;&lt;generate definition files for use with the Rhai Language Server&gt;&gt; &lt;&lt;pause/resume/stop#green&gt;&gt; &lt;&lt;Engine running in a separate thread#green&gt;&gt; &lt;&lt;via an MPSC channel&gt;&gt; &lt;&lt;common Scope&gt;&gt; &lt;&lt;serde feature&gt;&gt; &lt;&lt;register a simple Rust function&gt;&gt; &lt;&lt;different ways&gt;&gt; &lt;&lt;register Rust functions taking string arguments#green&gt;&gt; &lt;&lt;communicate in duplex#green&gt;&gt; &lt;&lt;Engine running in a separate thread@1#green&gt;&gt; &lt;&lt;via a pair of MPSC channels&gt;&gt; &lt;&lt;With State&gt;&gt; &lt;&lt;pattern Scriptable Event Handler&gt;&gt; &lt;&lt;Main Style@1&gt;&gt; &lt;&lt;JS Style@1&gt;&gt; &lt;&lt;Map Style@1&gt;&gt; &lt;&lt;wee_alloc&gt;&gt; &lt;&lt;Nightly required#red&gt;&gt; &lt;&lt;for no-std#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/start/examples/scripts.html" id="1871">
        <title>Scripts - Rhai - Embedded Scripting for Rust#__#&lt;&lt;in the scripts directory:&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=3354" id="1872">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/language/values-and-types.html" id="1873">
        <title>Values and Types - Rhai - Embedded Scripting for Rust#__#&lt;&lt;rhai::INT&gt;&gt; &lt;&lt;i32 under only_i32&gt;&gt; &lt;&lt;rhai::FLOAT&gt;&gt; &lt;&lt;f32 under f32_float&gt;&gt; &lt;&lt;rust_decimal::Decimal&gt;&gt; &lt;&lt;rhai::ImmutableString&gt;&gt; &lt;&lt;Rc&lt;SmartString&gt;, Arc&lt;SmartString&gt; under sync&gt;&gt; &lt;&lt;rhai::Array (Vec&lt;Dynamic&gt;)&gt;&gt; &lt;&lt;(disabled with no_index)&gt;&gt; &lt;&lt;rhai::Blob (Vec&lt;u8&gt;)&gt;&gt; &lt;&lt;(disabled with no_index)@1&gt;&gt; &lt;&lt;rhai::Map (BTreeMap&lt;SmartString, Dynamic&gt;)&gt;&gt; &lt;&lt;(disabled with no_object)&gt;&gt; &lt;&lt;std::time::Instant (instant::Instant if WASM build)&gt;&gt; &lt;&lt;(disabled with no_time or no_std)&gt;&gt; &lt;&lt;rhai::FnPtr&gt;&gt; &lt;&lt;various integer types are treated strictly distinct#red&gt;&gt; &lt;&lt;cannot even be added together#red&gt;&gt; &lt;&lt;compared#red&gt;&gt; &lt;&lt;Nor can a smaller integer type be up-casted to a larger#red&gt;&gt; &lt;&lt;default integer type is i64&gt;&gt; &lt;&lt;If other integer types are not needed, it is possible to exclude#green&gt;&gt; &lt;&lt;smaller build#green&gt;&gt; &lt;&lt;only_i64 feature#green&gt;&gt; &lt;&lt;If only 32-bit integers are needed&gt;&gt; &lt;&lt;only_i32 feature#green&gt;&gt; &lt;&lt;remove support for all integer types other than i32, including i64&gt;&gt; &lt;&lt;useful on some 32-bit targets#green&gt;&gt; &lt;&lt;where using 64-bit integers incur a performance penalty#red&gt;&gt; &lt;&lt;Rhai’s default integer type is i64#red&gt;&gt; &lt;&lt;DIFFERENT from Rust’s i32#red&gt;&gt; &lt;&lt;very easy to unsuspectingly set an i32 into Rhai#red&gt;&gt; &lt;&lt;still works#red&gt;&gt; &lt;&lt;significant runtime performance hit#red&gt;&gt; &lt;&lt;since the Engine will treat i32 as an opaque custom type#red&gt;&gt; &lt;&lt;unless using the only_i32 feature#green&gt;&gt; &lt;&lt;i64 is the default even on 32-bit systems#red&gt;&gt; &lt;&lt;To use i32 on 32-bit systems#green&gt;&gt; &lt;&lt;only_i32 feature.#green&gt;&gt; &lt;&lt;If no floating-point is needed or supported#red&gt;&gt; &lt;&lt;no_float feature to remove it#green&gt;&gt; &lt;&lt;fixed-precision#green&gt;&gt; &lt;&lt;decimal feature&gt;&gt; &lt;&lt;Strings in Rhai are immutable#green&gt;&gt; &lt;&lt;Any modification done to a Rhai string#red&gt;&gt; &lt;&lt;cloned#red&gt;&gt; &lt;&lt;to_string@1&gt;&gt; &lt;&lt;to_debug&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/rust/print-custom.html" id="1874">
        <title>Printing Custom Types - Rhai - Embedded Scripting for Rust#__#&lt;&lt;following functions, at minimum, be registered#green&gt;&gt; &lt;&lt;assuming the custom type is T: Display + Debug#green&gt;&gt; &lt;&lt;to_string&gt;&gt; &lt;&lt;to_debug&gt;&gt; &lt;&lt;If these functions are defined via a plugin module&gt;&gt; &lt;&lt;include the #[rhai_fn(global)] attribute#green&gt;&gt; &lt;&lt;for the print statement&gt;&gt; &lt;&lt;for the debug statement&gt;&gt; &lt;&lt;+ operator&gt;&gt; &lt;&lt;+= operator&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/language/strings-chars.html" id="1875">
        <title>Strings and Characters - Rhai - Embedded Scripting for Rust#__#&lt;&lt;Escapes&gt;&gt; &lt;&lt;Continuation&gt;&gt; &lt;&lt;Interpolation@1&gt;&gt; &lt;&lt;Multi-line literal string&gt;&gt; &lt;&lt;${...}&gt;&gt; &lt;&lt;hex (\xxx)&gt;&gt; &lt;&lt;Hex sequences map to ASCII&gt;&gt; &lt;&lt;\u maps to 16-bit common Unicode code points&gt;&gt; &lt;&lt;\U maps the full, 32-bit extended Unicode code points&gt;&gt; &lt;&lt;Escape sequences are not supported for multi-line literal#red&gt;&gt; &lt;&lt;wrapped by back-ticks (`)&gt;&gt; &lt;&lt;wrapped by double-quotes (&quot;)&gt;&gt; &lt;&lt;back-slash (\) character at the end of a line indicates that the string continues#green&gt;&gt; &lt;&lt;onto the next line&gt;&gt; &lt;&lt;without any line-break.#red&gt;&gt; &lt;&lt;Spaces are not added#red&gt;&gt; &lt;&lt;to separate one line with the next with a space&gt;&gt; &lt;&lt;put a space before the ending back-slash (\)#green&gt;&gt; &lt;&lt;\@20#green&gt;&gt; &lt;&lt;Why not go multi-line?&gt;&gt; &lt;&lt;the ending quote is easy to omit#red&gt;&gt; &lt;&lt;entire remainder of the script would become one giant, multi-line string#red&gt;&gt; &lt;&lt;different from Rust#red&gt;&gt; &lt;&lt;Strings can be indexed#green&gt;&gt; &lt;&lt;different from Rust@1#red&gt;&gt; &lt;&lt;negative index#green&gt;&gt; &lt;&lt;from the end&gt;&gt; &lt;&lt;−1 being the last character#green&gt;&gt; &lt;&lt;Character indexing can be SLOOOOOOOOW#red&gt;&gt; &lt;&lt;walking through the entire UTF-8#red&gt;&gt; &lt;&lt;getting the length of a string#red&gt;&gt; &lt;&lt;number of characters@2#red&gt;&gt; &lt;&lt;not bytes#red&gt;&gt; &lt;&lt;also be slow#red&gt;&gt; &lt;&lt;Negative ranges are not supported#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/language/variables.html" id="1876">
        <title>Variables - Rhai - Embedded Scripting for Rust#__#&lt;&lt;unlike Rust#red&gt;&gt; &lt;&lt;a variable name must also contain at least one ASCII&gt;&gt; &lt;&lt;and an ASCII letter must come before any digits#red&gt;&gt; &lt;&lt;In other words&gt;&gt; &lt;&lt;first character that is not an underscore _ must be an ASCII#green&gt;&gt; &lt;&lt;not a digit#red&gt;&gt; &lt;&lt;some names acceptable to Rust, like _, _42foo, _1 etc., are not valid in Rhai#red&gt;&gt; &lt;&lt;Why this restriction?&gt;&gt; &lt;&lt;reduce confusion&gt;&gt; &lt;&lt;subtle bugs#red&gt;&gt; &lt;&lt;_1 can easily be misread (or mistyped) as -1#red&gt;&gt; &lt;&lt;Rhai is dynamic without type checking#red&gt;&gt; &lt;&lt;no compiler to catch these typos#red&gt;&gt; &lt;&lt;Avoid names longer than 11 letters on 32-Bit#red&gt;&gt; &lt;&lt;SmartString which avoids allocations unless a string is over its internal limit#green&gt;&gt; &lt;&lt;23 ASCII characters on 64-bit#red&gt;&gt; &lt;&lt;11 ASCII characters on 32-bit#red&gt;&gt; &lt;&lt;particularly true for local variables inside a hot loop#blue&gt;&gt; &lt;&lt;created and destroyed in rapid succession#red&gt;&gt; &lt;&lt;No initial value&gt;&gt; &lt;&lt;Variables do not have to be given an initial value&gt;&gt; &lt;&lt;defaults to ()&gt;&gt; &lt;&lt;is_def_var to detect if a variable is defined.#green&gt;&gt; &lt;&lt;default, variables do not need to be defined#green&gt;&gt; &lt;&lt;before they are used&gt;&gt; &lt;&lt;assumed to be provided via an external custom Scope&gt;&gt; &lt;&lt;Engine::XXX_with_scope&gt;&gt; &lt;&lt;If no Scope#red&gt;&gt; &lt;&lt;e.g. when using Engine::run#red&gt;&gt; &lt;&lt;an undefined variable causes a runtime error#blue&gt;&gt; &lt;&lt;when accessed#red&gt;&gt; &lt;&lt;Strict Variables Mode@1&gt;&gt; &lt;&lt;Engine::set_strict_variables&gt;&gt; &lt;&lt;accessing a variable not previously defined within the same script directly#red&gt;&gt; &lt;&lt;parse error#red&gt;&gt; &lt;&lt;when compiling&gt;&gt; &lt;&lt;Turn on strict variables#green&gt;&gt; &lt;&lt;if no Scope is to be provided#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/engine/strict-var.html" id="1877">
        <title>Strict Variables Mode - Rhai - Embedded Scripting for Rust</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/rust/getters-setters.html" id="1878">
        <title>Property Getters and Setters - Rhai - Embedded Scripting for Rust#__#&lt;&lt;getters and setters are intended for custom types#green&gt;&gt; &lt;&lt;Cannot override object maps#red&gt;&gt; &lt;&lt;Any getter or setter function registered for object maps#red&gt;&gt; &lt;&lt;simply ignored#red&gt;&gt; &lt;&lt;Elvis operator&gt;&gt; &lt;&lt;short-circuit&gt;&gt; &lt;&lt;if the object itself is ()&gt;&gt; &lt;&lt;// returns () if object is ()#green&gt;&gt; &lt;&lt;object ?. property&gt;&gt; &lt;&lt;// no action if object is ()#green&gt;&gt; &lt;&lt;object ?. property = value ;&gt;&gt; &lt;&lt;getter and setter functions&gt;&gt; &lt;&lt;each take a &amp;mut#blue&gt;&gt; &lt;&lt;disabled under the no_object feature#red&gt;&gt; &lt;&lt;register_get#green&gt;&gt; &lt;&lt;Fn(&amp;mut T) -&gt; V&gt;&gt; &lt;&lt;Can mutate T?&gt;&gt; &lt;&lt;yes, but not advised#red&gt;&gt; &lt;&lt;No support for references#red&gt;&gt; &lt;&lt;Rhai does NOT support normal references (i.e. &amp;T) as parameters#red&gt;&gt; &lt;&lt;All references must be mutable (i.e. &amp;mut T)#green&gt;&gt; &lt;&lt;Getters must be pure#red&gt;&gt; &lt;&lt;Rhai assumes that no data is changed#red&gt;&gt; &lt;&lt;Fallback to Indexer#green&gt;&gt; &lt;&lt;chain property accesses#green&gt;&gt; &lt;&lt;and/or@2&gt;&gt; &lt;&lt;indexing (via indexers)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=707444" id="1879">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/engine/raw.html" id="1880">
        <title>Raw Engine - Rhai - Embedded Scripting for Rust#__#&lt;&lt;To add more functionalities to a raw Engine, load packages&gt;&gt; &lt;&lt;Built-in Operators@1&gt;&gt; &lt;&lt;Since packages can be shared, this is an extremely efficient way to create multiple instances of the same Engine#green&gt;&gt; &lt;&lt;A raw Engine disables the strings interner by default.#red&gt;&gt; &lt;&lt;may lead to a significant increase in memory#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/language/modules/import.html" id="1884">
        <title>Import Modules - Rhai - Embedded Scripting for Rust#__#&lt;&lt;A module that is only import-ed&gt;&gt; &lt;&lt;but not given any name#red&gt;&gt; &lt;&lt;is simply run#green&gt;&gt; &lt;&lt;a very simple way to run another script file from within a script&gt;&gt; &lt;&lt;crypto_banner.rhai&gt;&gt; &lt;&lt;let mod_file = `crypto_${SECRET_NUMBER}`;&gt;&gt; &lt;&lt;import mod_file&gt;&gt; &lt;&lt;module path names can be dynamically constructed&gt;&gt; &lt;&lt;recursively loading the same module. This is a sure-fire way to cause a stack overflow#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/rust/modules/use.html" id="1885">
        <title>Use a Module - Rhai - Embedded Scripting for Rust</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/plugins/module.html" id="1886">
        <title>Export as Rust Module - Rhai - Embedded Scripting for Rust#__#&lt;&lt;entire rhai::plugin module must be imported as a prelude&gt;&gt; &lt;&lt;because code generated will need these imports#red&gt;&gt; &lt;&lt;#[export_module]&gt;&gt; &lt;&lt;applied to a Rust module&gt;&gt; &lt;&lt;generates&gt;&gt; &lt;&lt;necessary code and metadata&gt;&gt; &lt;&lt;Rhai access to its public&gt;&gt; &lt;&lt;functions, constants, type aliases, and sub-modules&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=715872" id="1887">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/patterns/static-hash.html" id="1888">
        <title>Static Hashing - Rhai - Embedded Scripting for Rust#__#&lt;&lt;A hashing seed requires four 64-bit&gt;&gt; &lt;&lt;rhai::config::hashing::set_ahash_seed with four u64&gt;&gt; &lt;&lt;rhai::config::hashing::set_ahash_seed(Some([123, 456, 789, 42]))?;&gt;&gt; &lt;&lt;rhai::config::hashing::set_ahash_seed can only ever be called once#red&gt;&gt; &lt;&lt;must be called BEFORE performing any operation on Rhai#red&gt;&gt; &lt;&lt;e.g. creating an Engine#red&gt;&gt; &lt;&lt;at compile time, via the environment variable RHAI_AHASH_SEED&gt;&gt; &lt;&lt;If a hashing seed is also set via rhai::config::hashing::set_ahash_seed#red&gt;&gt; &lt;&lt;environment variable has no effect#red&gt;&gt; &lt;&lt;RHAI_AHASH_SEED=&quot;[123, 456, 789, 42]&quot; cargo build ...&gt;&gt; &lt;&lt;bane of additive Cargo features#red&gt;&gt; &lt;&lt;ahash is also extremely popular#red&gt;&gt; &lt;&lt;used by many many other crates&gt;&gt; &lt;&lt;most notably hashbrown#red&gt;&gt; &lt;&lt;Hence, there exists a need to tell ahash to use a fixed seed&gt;&gt; &lt;&lt;even when its feature flags say otherwise#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/patterns/blocking.html" id="1889">
        <title>Blocking/Async Function Calls - Rhai - Embedded Scripting for Rust#__#&lt;&lt;Async and scripting don’t mix well#red&gt;&gt; &lt;&lt;reinvent the Callback Hell#red&gt;&gt; &lt;&lt;Usually the sync feature is NOT#red&gt;&gt; &lt;&lt;used for this pattern&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/patterns/multi-threading.html" id="1890">
        <title>Multi-Threaded Synchronization - Rhai - Embedded Scripting for Rust</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/patterns/parallel.html" id="1891">
        <title>One Engine Instance Per Call - Rhai - Embedded Scripting for Rust#__#&lt;&lt;called a lot&gt;&gt; &lt;&lt;tight loops&gt;&gt; &lt;&lt;or in parallel&gt;&gt; &lt;&lt;global Engine instance is sub-optimal due to contention and locking.#red&gt;&gt; &lt;&lt;executed independently from each other&gt;&gt; &lt;&lt;perhaps concurrently.&gt;&gt; &lt;&lt;Scripts are used to create Rust closures&gt;&gt; &lt;&lt;stored and&gt;&gt; &lt;&lt;called at any time&gt;&gt; &lt;&lt;Engine instance is usually moved into the closure itself&gt;&gt; &lt;&lt;Rhai’s AST structure is sharable#green&gt;&gt; &lt;&lt;Rhai’s packages&gt;&gt; &lt;&lt;modules&gt;&gt; &lt;&lt;also sharable#green&gt;&gt; &lt;&lt;Engine instances can be decoupled#green&gt;&gt; &lt;&lt;from the base system (packages and modules) as well as the scripts (AST)#blue&gt;&gt; &lt;&lt;created very cheaply#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/patterns/macros.html" id="1892">
        <title>Simulate Macros to Simplify Scripts - Rhai - Embedded Scripting for Rust#__#&lt;&lt;Scripts need to access existing data in variables&gt;&gt; &lt;&lt;long/complex expressions (e.g. long indexing and/or property chains foo[x][y].bar[z].baz)&gt;&gt; &lt;&lt;Usage is prevalent inside the scripts&gt;&gt; &lt;&lt;extensive duplications#red&gt;&gt; &lt;&lt;prone to typos and errors#red&gt;&gt; &lt;&lt;a few such variables to modify at the same time#green&gt;&gt; &lt;&lt;otherwise, it would be simpler#green&gt;&gt; &lt;&lt;bind the this pointer to the variable#green&gt;&gt; &lt;&lt;Pick a syntax that is intuitive#green&gt;&gt; &lt;&lt;but unlikely to occur naturally inside string literals#red&gt;&gt; &lt;&lt;Before script evaluation/compilation#green&gt;&gt; &lt;&lt;globally replace macros with their corresponding expansions#green&gt;&gt; &lt;&lt;Avoid normal words#red&gt;&gt; &lt;&lt;Avoid normal syntax#red&gt;&gt; &lt;&lt;may show up inside a string literal#red&gt;&gt; &lt;&lt;if using Target as a macro:#red&gt;&gt; &lt;&lt;.do_damage(10);&gt;&gt; &lt;&lt;&quot;Target is destroyed!&quot;#red&gt;&gt; &lt;&lt;// Will turn to this...#red&gt;&gt; &lt;&lt;].do_damage(10);&gt;&gt; &lt;&lt;// Text in string literal erroneously replaced!#red&gt;&gt; &lt;&lt;&quot;entities[&quot;monster&quot;] is destroyed!&quot;#red&gt;&gt; &lt;&lt;error positions may no longer point to the correct locations#red&gt;&gt; &lt;&lt;Line numbers are not affected.#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/patterns/global-mutable-state.html" id="1893">
        <title>Mutable Global State - Rhai - Embedded Scripting for Rust#__#&lt;&lt;Don’t Do It#red&gt;&gt; &lt;&lt;In contrast to#red&gt;&gt; &lt;&lt;global constants#green&gt;&gt; &lt;&lt;mutable global states are strongly discouraged#red&gt;&gt; &lt;&lt;Alternative – Use this#green&gt;&gt; &lt;&lt;In the majority of the such scenarios&gt;&gt; &lt;&lt;only one mutable global state of interest#green&gt;&gt; &lt;&lt;much better&gt;&gt; &lt;&lt;bind that global state to the this pointer#green&gt;&gt; &lt;&lt;state is never hidden#red&gt;&gt; &lt;&lt;always clear#green&gt;&gt; &lt;&lt;see what is being modified#green&gt;&gt; &lt;&lt;just as fast#green&gt;&gt; &lt;&lt;this pointer works by reference#green&gt;&gt; &lt;&lt;can pass other states in&gt;&gt; &lt;&lt;in the future#green&gt;&gt; &lt;&lt;without changing the script#green&gt;&gt; &lt;&lt;no hard links within functions#red&gt;&gt; &lt;&lt;difficult to unravel#red&gt;&gt; &lt;&lt;only the variable bound to this is ever modified#green&gt;&gt; &lt;&lt;everything else is immutable#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/patterns/dynamic-const.html" id="1926">
        <title>Dynamic Constants Provider - Rhai - Embedded Scripting for Rust#__#&lt;&lt;system has a large number of constants#red&gt;&gt; &lt;&lt;but&gt;&gt; &lt;&lt;only a minor set will be used by any script#green&gt;&gt; &lt;&lt;constants are expensive to load#red&gt;&gt; &lt;&lt;constants set is too massive#red&gt;&gt; &lt;&lt;push into a custom Scope#red&gt;&gt; &lt;&lt;system constants are volatile#red&gt;&gt; &lt;&lt;call-dependent#red&gt;&gt; &lt;&lt;variable resolver&gt;&gt; &lt;&lt;Only load#green&gt;&gt; &lt;&lt;variable when it is being used#green&gt;&gt; &lt;&lt;cannot be assigned to#red&gt;&gt; &lt;&lt;to change values in an external system#green&gt;&gt; &lt;&lt;register a dedicated API#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=271099" id="1927">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://rhai.rs/book/safety/max-string-size.html" id="1928">
        <title>Maximum Length of Strings - Rhai - Embedded Scripting for Rust#__#&lt;&lt;Engine::set_max_string_size&gt;&gt; &lt;&lt;zero being unlimited (the default)&gt;&gt; &lt;&lt;check can be disabled via the unchecked feature&gt;&gt; &lt;&lt;a registered function may grow a string’s length without Rhai noticing until the very end#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=777565" id="1929">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=953397" id="1930">
        <title>-----</title>
      </bookmark>
    </folder>
    <folder id="1696">
      <title>zOther</title>
      <bookmark href="https://github.com/sagiegurari/duckscript" id="1826">
        <title>sagiegurari/duckscript: Simple, extendable and embeddable scripting language.</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="1600">
    <title>Serialize, Protobuf-like, gRPC-like</title>
    <bookmark href="https://serde.rs/" id="1718">
      <title>Overview · Serde</title>
    </bookmark>
    <bookmark href="https://transform.tools/json-to-rust-serde" id="1719">
      <title>JSON to Rust Serde</title>
    </bookmark>
    <bookmark href="https://github.com/jonasbb/serde_with" id="1720">
      <title>jonasbb/serde_with: Custom de/serialization functions for Rust&apos;s serde using the with-annotation</title>
    </bookmark>
    <bookmark href="https://github.com/time-rs/time/issues/452" id="1721">
      <title>`well-known` serde for `Vec&lt;OffsetDateTime&gt;` · Issue #452 · time-rs/time#__#&lt;&lt;#[serde_with::serde_as]&gt;&gt; &lt;&lt;#[serde_as(as = &quot;Vec&lt;time::format_description::well_known::Rfc3339&gt;&quot;)]&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=393067" id="1722">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://speice.io/2019/09/binary-format-shootout.html" id="1723">
      <title>Binary Format Shootout#__#&lt;&lt;Sep 28, 2019&gt;&gt; &lt;&lt;zero-copy de/serialization are given priority&gt;&gt; &lt;&lt;the longest&gt;&gt; &lt;&lt;newest#red&gt;&gt; &lt;&lt;claims to have a simpler encoding#green&gt;&gt; &lt;&lt;simplest encoding#green&gt;&gt; &lt;&lt;Rust implementation is unmaintained#red&gt;&gt; &lt;&lt;Cap’n Proto:&gt;&gt; &lt;&lt;Theoretically performs incredibly well&gt;&gt; &lt;&lt;implementation had issues#red&gt;&gt; &lt;&lt;Flatbuffers:#green&gt;&gt; &lt;&lt;largely lived up to its “zero-copy”#green&gt;&gt; &lt;&lt;SBE:&gt;&gt; &lt;&lt;Best median and worst-case performance#green&gt;&gt; &lt;&lt;but the message structure has a limited feature set#red&gt;&gt; &lt;&lt;Binary Parsing with Nom#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=828385" id="1724">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://kevinhoffman.medium.com/streaming-grpc-with-rust-d978fece5ef6" id="1725">
      <title>Streaming gRPC with Rust. Lately I’ve been working on a side… | by Kevin Hoffman | Medium</title>
    </bookmark>
    <bookmark href="https://docs.rs/grpcio/latest/grpcio/index.html" id="1726">
      <title>grpcio - Rust#__#&lt;&lt;Rust implementation&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=301161" id="1727">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://docs.rs/bincode/2.0.0-rc.3/bincode/" id="1836">
      <title>bincode - Rust#__#&lt;&lt;coming from bincode 1#red&gt;&gt; &lt;&lt;migration guide#green&gt;&gt; &lt;&lt;2.0.0-rc#red&gt;&gt; &lt;&lt;serde is now an optional&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/bincode-org/bincode" id="1837">
      <title>bincode-org/bincode: A binary encoder / decoder implementation in Rust.</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=51092" id="1838">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://flatbuffers.dev/" id="1839">
      <title>FlatBuffers: FlatBuffers#__#&lt;&lt;originally created at Google#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/google/flatbuffers" id="1840">
      <title>google/flatbuffers: FlatBuffers: Memory Efficient Serialization Library#__#&lt;&lt;flatc compiler&gt;&gt; &lt;&lt;./flatc --cpp --rust&gt;&gt; &lt;&lt;across languages and schema versions&gt;&gt; &lt;&lt;zero-copy&gt;&gt; gRPC, too&lt;&lt;flatbuffers&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=659968" id="1841">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/HebiRobotics/QuickBuffers" id="1842">
      <title>HebiRobotics/QuickBuffers: Java Protobuf implementation suitable for real-time enviroments</title>
    </bookmark>
    <bookmark href="https://github.com/real-logic/simple-binary-encoding" id="1843">
      <title>real-logic/simple-binary-encoding: Simple Binary Encoding (SBE) - High Performance Message Codec#__#&lt;&lt;produce 100% safe rust crates#green&gt;&gt; &lt;&lt;not have any dependencies on any libraries#green&gt;&gt; &lt;&lt;no SBE libraries#green&gt;&gt; &lt;&lt;./gradlew generateRustCodecs&gt;&gt; &lt;&lt;cargo test#green&gt;&gt; &lt;&lt;./gradlew runRustTests#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/udoprog/musli" id="1844">
      <title>udoprog/musli: Müsli is a flexible and generic binary serialization framework#__#&lt;&lt;including musli-json&gt;&gt; &lt;&lt;full #[no_std]#green&gt;&gt; &lt;&lt;with or without alloc#green&gt;&gt; &lt;&lt;simple zero-copy#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1881">
    <title>shipyard.rs</title>
    <bookmark href="https://shipyard.rs/advantages" id="1894">
      <title>Advantages of Using a Private Cargo Registry for Rust Projects - Shipyard.rs Private Cargo Registry Service</title>
    </bookmark>
    <bookmark href="https://jstrong.dev/posts/2022/shipyard-rs-announcement/" id="1895">
      <title>Shipyard.rs Private Cargo Registry Service - jstrong.dev</title>
    </bookmark>
  </folder>
  <folder id="1882">
    <title>Tools</title>
    <bookmark href="https://ruststack.org/rust-tools/" id="1933">
      <title>Rust Tools - RustStack.Org</title>
    </bookmark>
    <bookmark href="https://www.rustexplorer.com/b/kdutp7" id="1896">
      <title>undefined | Rust Explorer#__#&lt;&lt;[dependencies]#green&gt;&gt; &lt;&lt;[dependencies]&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.rustexplorer.com/b/help" id="1897">
      <title>0. Introduction | Rust Explorer</title>
    </bookmark>
    <bookmark href="https://www.rustexplorer.com/u/jonasbb" id="1898">
      <title>jonasbb&apos;s bins | Rust Explorer</title>
    </bookmark>
  </folder>
  <folder id="1883">
    <title>zOther</title>
    <folder id="1899">
      <title>Bazel</title>
      <bookmark href="https://bazelbuild.github.io/rules_rust/" id="1903">
        <title>Rules rust | rules_rust#__#&lt;&lt;add the following to your WORKSPACE file#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/google/cargo-raze" id="1904">
        <title>google/cargo-raze: Generate Bazel BUILD from Cargo dependencies!#__#&lt;&lt;In the vendoring mode&gt;&gt; &lt;&lt;cargo vendor&gt;&gt; &lt;&lt;cargo-raze then&gt;&gt; &lt;&lt;In the non-vendoring mode, cargo-raze&gt;&gt; &lt;&lt;For Bazel only projects#red&gt;&gt; &lt;&lt;`cargo raze` will generate Bazel-compatible BUILD files into this path.&gt;&gt; &quot;Remote&quot; mode&lt;&lt;Non-Vendoring&gt;&gt; &lt;&lt;binary dependency#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/cargo-raze/0.14.0" id="1905">
        <title>cargo-raze - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://anders.dev/bazel-build-system-and-rust" id="1906">
        <title>Bazel build system and Rust — Continuous Learning#__#&lt;&lt;multiple teams in charge of different software components&gt;&gt; &lt;&lt;work together in a bigger system&gt;&gt; &lt;&lt;cat &lt;&lt;EOF &gt; hello_world/WORKSPACE.bazel&gt;&gt; &lt;&lt;For each binary or library or other artifact there is a BUILD file#green&gt;&gt; &lt;&lt;cargo-raze#green&gt;&gt; &lt;&lt;handling crates&gt;&gt; &lt;&lt;handling the building of crates&gt;&gt; &lt;&lt;cargo generate-lockfile&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/bazelbuild/rules_rust/issues/299" id="1907">
        <title>Needs documention: How to specify a certain version of Rust compiler? · Issue #299 · bazelbuild/rules_rust</title>
      </bookmark>
      <bookmark href="https://github.com/bazelbuild/rules_rust/issues/1059" id="1908">
        <title>How to get the most recent .tar.gz from http_archive? · Issue #1059 · bazelbuild/rules_rust</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/qoeoog/is_there_anyone_who_successfully_used_bazel_with/" id="1909">
        <title>Reddit - Dive into anything</title>
      </bookmark>
      <bookmark href="https://bazelbuild.github.io/rules_rust/rust_proto.html" id="1910">
        <title>rules_rust | Rust rules for Bazel</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/cargo-raze/" id="1911">
        <title>cargo-raze - crates.io: Rust Package Registry</title>
      </bookmark>
    </folder>
    <folder id="1900">
      <title>GUI</title>
      <bookmark href="https://dioxuslabs.com/" id="1912">
        <title>Dioxus | An elegant GUI library for Rust</title>
      </bookmark>
      <bookmark href="https://github.com/imgui-rs/imgui-rs" id="1913">
        <title>imgui-rs/imgui-rs: Rust bindings for Dear ImGui</title>
      </bookmark>
      <bookmark href="https://github.com/slint-ui/slint/blob/master/README.md" id="1943">
        <title>slint/README.md at master · slint-ui/slint</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=180178" id="1949">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/sagebind/fmbq-timer/tree/rust-rewrite/" id="1950">
        <title>sagebind/fmbq-timer at rust-rewrite#__#&lt;&lt;Timer app#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/1d7w5xp/whats_the_current_modern_way_of_writing_android/" id="1948">
        <title>What&apos;s the current, modern way of writing Android apps, purely in Rust? : r/rust#__#&lt;&lt;Egui is plenty lightweight#green&gt;&gt; &lt;&lt;egui-android&gt;&gt; &lt;&lt;egui-mobile&gt;&gt; &lt;&lt;egui is ultra fast#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=314891" id="1946">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/redbadger/crux" id="1947">
        <title>redbadger/crux: Cross-platform app development in Rust</title>
      </bookmark>
    </folder>
    <folder id="1901">
      <title>Reuse Bounds</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/3ezm5s/avoiding_repetition_for_generic_types/" id="1914">
        <title>Avoiding repetition for generic types? : rust</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust/issues/44491" id="1915">
        <title>🔬 Tracking issue for RFC 2089: Implied bounds · Issue #44491 · rust-lang/rust</title>
      </bookmark>
      <bookmark href="https://internals.rust-lang.org/t/reduce-repetitive-generic-parameters-and-struct-name-in-impl-syntax/12619/45" id="1916">
        <title>Reduce repetitive generic parameters and struct name in impl syntax - language design - Rust Internals</title>
      </bookmark>
      <bookmark href="https://github.com/kas-gui/impl-tools" id="1917">
        <title>kas-gui/impl-tools: Helper macros: autoimpl, impl_scope#__#&lt;&lt;#[autoimpl] is a partial replacement for#[derive]&gt;&gt; &lt;&lt;Traits like Deref by using a named field&gt;&gt; &lt;&lt;Traits like Debug may ignore named fields&gt;&gt; &lt;&lt;// Impl Animal for Box&lt;T&gt; where T: Animal + ?Sized&gt;&gt; &lt;&lt;Debug ignore self.animal&gt;&gt; &lt;&lt;Deref, DerefMut using self.animal&gt;&gt; &lt;&lt;&amp;T, &amp;mut T, Arc&lt;T&gt;&gt;&gt; &lt;&lt;for&lt;T: trait&gt; NewFoo&lt;T&gt;&gt;&gt; &lt;&lt;Deref&lt;Target = T&gt;, DerefMut using self.0&gt;&gt; &lt;&lt;#[impl_tools::impl_default(Tree::Ash)]&gt;&gt; &lt;&lt;impl_tools::impl_scope! {&gt;&gt; &lt;&lt;#[impl_default]@1&gt;&gt; &lt;&lt;impl Self {&gt;&gt; &lt;&lt;// Merges generic parameters of type&gt;&gt; &lt;&lt;impl&lt;O&gt; Self where F: Fn(&amp;str) -&gt; O {&gt;&gt; &lt;&lt;rustfmt won&apos;t currently touch#red&gt;&gt; &lt;&lt;single-use struct&gt;&gt; &lt;&lt;let says_hello_world = impl_tools::impl_anon! {&gt;&gt; &lt;&lt;for&lt;T: trait + ?Sized&gt; &amp;T, Box&lt;T&gt;&gt;&gt; &lt;&lt;more general&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rustfmt/pull/5538" id="1918">
        <title>Add unstable `format_brace_macros` option by trevyn · Pull Request #5538 · rust-lang/rustfmt#__#&lt;&lt;already uses heuristics for parentheses () delimited and bracket []#green&gt;&gt; &lt;&lt;not currently attempt to format brace delimited#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1944">
      <title>Rust on Android</title>
      <bookmark href="https://github.com/makepad/makepad" id="1945">
        <title>makepad/makepad: Makepad is a creative software development platform for Rust that compiles to wasm/webGL, osx/metal, windows/dx11 linux/opengl</title>
      </bookmark>
      <bookmark href="https://source.android.com/docs/setup/build/rust/building-rust-modules/android-rust-modules" id="1951">
        <title>Android Rust modules  |  Android Open Source Project</title>
      </bookmark>
    </folder>
    <folder id="1902">
      <title>zOther</title>
      <bookmark href="https://www.youtube.com/watch?v=TJ3w-pZ7FMI&amp;t=1911s" id="1919">
        <title>Happiness in Rust with Ready At Dawn Founder Andrea Pessino - April 2021 - YouTube</title>
      </bookmark>
      <bookmark href="https://rust.extension.sh/" id="1920">
        <title>Rust Search Extension - The ultimate... for Firefox/Chrome#__#&lt;&lt;prefix a / (slash) before the keyword to search nightly#green&gt;&gt; &lt;&lt;prefix a // (double slash) before the keyword to search all of crates docs of rustc#green&gt;&gt; &lt;&lt;such as rustc_mir, rustc_hir, or rustc_ast#green&gt;&gt; &lt;&lt;doesn&apos;t make sense to have a built-in search-index of rustc#red&gt;&gt; &lt;&lt;rustc is changed very frequently#red&gt;&gt; &lt;&lt;open the rustc docs page in advance#green&gt;&gt; &lt;&lt;to sync the search-index&gt;&gt; &lt;&lt;search-index of rustc is big, we never persist it#red&gt;&gt; &lt;&lt;prefix a type to get the exclusive#green&gt;&gt; &lt;&lt;fn:asref#green&gt;&gt; &lt;&lt;trait:iterator#green&gt;&gt; &lt;&lt;prefix src: (or s:#green&gt;&gt; &lt;&lt;source code line of your search result after you press Enter&gt;&gt; &lt;&lt;After you add the crate to extension#green&gt;&gt; &lt;&lt;After you add the crate to extension#green&gt;&gt; &lt;&lt;prefix#green&gt;&gt; &lt;&lt;search the docs exclusive to that crate#green&gt;&gt; &lt;&lt;~ is another pretty prefix#green&gt;&gt; &lt;&lt;search the external#green&gt;&gt; &lt;&lt;Unlike the#red&gt;&gt; &lt;&lt;~ gives you the power to search docs across all your favorite crates#green&gt;&gt; &lt;&lt;builtin attributes (such as derive, non_exhaustive) are also supported#green&gt;&gt; &lt;&lt;by default, the result is mixed with other related docs or crates though#red&gt;&gt; &lt;&lt;to search attribute exclusively, prefix a ##green&gt;&gt; &lt;&lt;top 20K crates index&gt;&gt; &lt;&lt;prefix an !#green&gt;&gt; &lt;&lt;to search docs.rs exclusively#green&gt;&gt; &lt;&lt;prefix one more ! (double exclamation#green&gt;&gt; &lt;&lt;to open crates.io#green&gt;&gt; &lt;&lt;prefix !!! (triple exclamation#green&gt;&gt; &lt;&lt;to open crate&apos;s repository#green&gt;&gt; &lt;&lt;% is the prefix to perform the book searching#green&gt;&gt; &lt;&lt;&gt; (right angle bracket) is also a great prefix to help you search Cargo Clippy#green&gt;&gt; &lt;&lt;You can search caniuse.rs#green&gt;&gt; &lt;&lt;and RFC with ? and ?? prefix respectively#green&gt;&gt; &lt;&lt;Just input any Rust version (such as v1.38) to open the release page#green&gt;&gt; &lt;&lt;:cargo - Show all useful third-party cargo#green&gt;&gt; &lt;&lt;:yet - Show all Are We Yet websites#green&gt;&gt; &lt;&lt;:label - Show all issue labels of rust-lang#green&gt;&gt; &lt;&lt;:tool - Show useful rust tools#green&gt;&gt; &lt;&lt;:history#green&gt;&gt; &lt;&lt;local search history#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/ozbe/three-rs-talk/tree/main/presentation" id="1921">
        <title>three-rs-talk/presentation at main · ozbe/three-rs-talk</title>
      </bookmark>
      <bookmark href="https://jondot.medium.com/my-key-learnings-after-30-000-loc-in-rust-a553e6403c19" id="1922">
        <title>10 Key Learnings in Rust after 30,000 Lines of Code | by Dotan Nahum | Medium#__#&lt;&lt;faster build#green&gt;&gt; &lt;&lt;it will go smoothly#green&gt;&gt; &lt;&lt;massively smooth#green&gt;&gt; &lt;&lt;from a painful 30 seconds#red&gt;&gt; &lt;&lt;to 9 seconds for a build#green&gt;&gt; &lt;&lt;hattering the main project crate into four#green&gt;&gt; &lt;&lt;most of that 9 seconds now is linking#red&gt;&gt; </title>
      </bookmark>
      <bookmark href="https://github.com/hashedone/10-rust-mistakes" id="1923">
        <title>GitHub - hashedone/10-rust-mistakes: Slides for Rust Wrocław webinar</title>
      </bookmark>
      <bookmark href="https://smallcultfollowing.com/babysteps/blog/2022/02/09/dare-to-ask-for-more-rust2024/" id="1924">
        <title>Baby Steps#__#&lt;&lt;precise capture&gt;&gt; &lt;&lt;simpler formatting&gt;&gt; &lt;&lt;println!(&quot;{x:?}&quot;)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-dev-tools/" id="1925">
        <title>rust-dev-tools</title>
      </bookmark>
    </folder>
  </folder>
</folder>
<folder id="7">
  <title>Language</title>
  <folder id="49">
    <title>Arrays &amp; Slices</title>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch04-03-slices.html" id="223">
      <title>The Slice Type - The Rust Programming Language#__#&lt;&lt;type that does not have ownership is the slice#red&gt;&gt; &lt;&lt;Another#red&gt;&gt; &lt;&lt;String slice range indices must occur at valid UTF-8 character boundaries#red&gt;&gt; &lt;&lt;for (i, &amp;item) in bytes.iter().enumerate() {#green&gt;&gt; &lt;&lt;if item == b&apos; &apos; {#green&gt;&gt; &lt;&lt;we get a reference to the element from .iter().enumerate(), we use &amp;#green&gt;&gt; &lt;&lt;String to an array of bytes using the as_bytes#green&gt;&gt; &lt;&lt;slice has the type &amp;[i32]#green&gt;&gt; &lt;&lt;enumerate method returns a tuple&gt;&gt; &lt;&lt;for (i, &amp;item) in bytes.iter().enumerate()@1#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://stackoverflow.com/questions/23148737/compare-definite-length-arrays" id="224">
      <title>rust - Compare definite-length arrays - Stack Overflow</title>
    </bookmark>
    <bookmark href="https://rust-lang.github.io/unsafe-code-guidelines/layout/arrays-and-slices.html" id="225">
      <title>Arrays and Slices - Unsafe Code Guidelines Reference#__#&lt;&lt;stride is the distance between each pair of consecutive values within the array&gt;&gt; &lt;&lt;If the element type is repr(C) the layout of the array is guaranteed&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/primitive.slice.html" id="226">
      <title>slice - Rust#__#&lt;&lt;Some traits are implemented for slices if the element type implements#green&gt;&gt; &lt;&lt;Eq, Hash and Ord&gt;&gt; &lt;&lt;binary_search&gt;&gt; &lt;&lt;copy_from_slice&gt;&gt; &lt;&lt;fn split#green&gt;&gt; &lt;&lt;fn first_chunk#green&gt;&gt; &lt;&lt;array reference to the first N items&gt;&gt; &lt;&lt;fn split_first_chunk#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/slice/fn.from_raw_parts.html" id="227">
      <title>from_raw_parts in core::slice - Rust#__#&lt;&lt;if any of the following conditions are violated:#red&gt;&gt; &lt;&lt;aligned even for zero-length slices#red&gt;&gt; &lt;&lt;enum layout optimizations may rely on references (including slices of any length) being aligned#red&gt;&gt; &lt;&lt;to distinguish&gt;&gt; &lt;&lt;obtain a pointer that is usable as data for zero-length slices using NonNull::dangling()&gt;&gt; &lt;&lt;must not be mutated#red&gt;&gt; &lt;&lt;except inside an UnsafeCell#green&gt;&gt; &lt;&lt;no larger than isize::MAX#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/slice/struct.Windows.html" id="228">
      <title>Windows in core::slice - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/slice/struct.Iter.html" id="229">
      <title>Iter in core::slice - Rust#__#&lt;&lt;subslice&gt;&gt; &lt;&lt;same lifetime as the original slice&gt;&gt; &lt;&lt;so the iterator can continue to be used&gt;&gt; &lt;&lt;move to the second element of the slice:&gt;&gt; &lt;&lt;Now `as_slice` returns &quot;[2, 3]&quot;:&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="50">
    <title>Closures</title>
    <bookmark href="https://stevedonovan.github.io/rustifications/2018/08/18/rust-closures-are-hard.html" id="230">
      <title>Why Rust Closures are (Somewhat) Hard - Rustifications#__#&lt;&lt;Rust closures are&gt;&gt; &lt;&lt;both statically and strongly typed#blue&gt;&gt; &lt;&lt;explicitly annotate these function types.#green&gt;&gt; &lt;&lt;Rust does not allocate silently#red&gt;&gt; &lt;&lt;be explicit#green&gt;&gt; &lt;&lt;system language#green&gt;&gt; &lt;&lt;closures share references with their environment#blue&gt;&gt; &lt;&lt;borrow checker needs to be able to track the lifetimes of these references#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch13-01-closures.html" id="231">
      <title>Closures: Anonymous Functions that Can Capture Their Environment - The Rust Programming Language#__#&lt;&lt;let’s say the data science team decides that we need to make some changes to the way we call the simulated_expensive_calculation function#red&gt;&gt; &lt;&lt;store the closure in a variable#green&gt;&gt; &lt;&lt;rather than storing the result of the function call#red&gt;&gt; &lt;&lt;curly brackets that hold the body of the closure—these are optional if the closure body is a single expression#green&gt;&gt; &lt;&lt;can add type annotations if we want to increase explicitness#green&gt;&gt; &lt;&lt;let expensive_closure = |num: u32| -&gt; u32 {#green&gt;&gt; &lt;&lt;Closure definitions will have one concrete type inferred for each of their parameters and for their return value.#green&gt;&gt; &lt;&lt;save the result of the expensive closure in a variable for reuse and use the variable in each place we need the result#red&gt;&gt; &lt;&lt;However, this method could result in a lot of repeated code.#red&gt;&gt; &lt;&lt;create a struct that will hold the closure and the resulting value of calling the closure#green&gt;&gt; &lt;&lt;cache the resulting value#green&gt;&gt; &lt;&lt;memoization or lazy evaluation.#green&gt;&gt; &lt;&lt;To make a struct that holds a closure, we need to specify the type of the closure#red&gt;&gt; &lt;&lt;struct Cacher&lt;T&gt;#green&gt;&gt; &lt;&lt;where@3#green&gt;&gt; &lt;&lt;T: Fn(u32) -&gt; u32#green&gt;&gt; &lt;&lt;If what we want to do doesn’t require capturing a value from the environment, we can use a function#green&gt;&gt; &lt;&lt;rather than a closure#red&gt;&gt; &lt;&lt;All closures implement FnOnce#green&gt;&gt; &lt;&lt;move keyword before the parameter list#green&gt;&gt; &lt;&lt;move closures may still implement Fn or FnMut#red&gt;&gt; &lt;&lt;let x = vec![1, 2, 3];#green&gt;&gt; &lt;&lt;when specifying one of the Fn trait bounds, you can start with Fn and the compiler will tell you#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="51">
    <title>Const Generics</title>
    <bookmark href="https://github.com/rust-lang/rust/issues/68436" id="232">
      <title>There&apos;s currently no way to specify bounds requiring constants in types to be well-formed · Issue #68436 · rust-lang/rust#__#&lt;&lt;Assert::&lt;{N &lt;= (usize::max_value() / std::mem::size_of::&lt;T&gt;())}&gt;: IsTrue,#green&gt;&gt; &lt;&lt;enum Assert&lt;const COND: bool&gt; {}#green&gt;&gt; &lt;&lt;trait IsTrue {}#green&gt;&gt; &lt;&lt;impl IsTrue for Assert&lt;true&gt; {}#green&gt;&gt; &lt;&lt;where Assert::&lt;{N &lt; usize::max_value() / 2}&gt;: IsTrue,#green&gt;&gt; &lt;&lt;may not get detected when running cargo check, as they only happen during codegen#red&gt;&gt; &lt;&lt;global reasoning, which is kind of bad when writing complex software#red&gt;&gt; &lt;&lt;#![feature(const_panic, const_generics, const_evaluatable_checked, untagged_unions)]#green&gt;&gt; &lt;&lt;struct ConstAssert&lt;const Assert: ()&gt;;#green&gt;&gt; &lt;&lt;const fn const_assert&lt;T: Sized, U: Sized&gt;(){#green&gt;&gt; &lt;&lt;assert!(mem::size_of::&lt;T&gt;() == mem::size_of::&lt;U&gt;(), &quot;T and U must have same size&quot;);#green&gt;&gt; &lt;&lt;where ConstAssert&lt;{const_assert::&lt;T, U&gt;()}&gt;: {#green&gt;&gt; &lt;&lt;where [T; {N-1}]: {#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rust-lang.github.io/rfcs/2000-const-generics.html" id="233">
      <title>2000-const-generics - The Rust RFC Book#__#&lt;&lt;this does not typecheck, because N + 1 appears in two different types:#red&gt;&gt; &lt;&lt;But this does, because it appears only once:#green&gt;&gt; &lt;&lt;type Foo&lt;const N: usize&gt; = [i32; N + 1];#green&gt;&gt; &lt;&lt;fn foo&lt;const N: usize&gt;() -&gt; Foo&lt;N&gt; {#green&gt;&gt; &lt;&lt;let x: Foo&lt;N&gt; = Default::default();#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/68630" id="234">
      <title>Unexpected error in const generics: constant expression depends on a generic parameter · Issue #68630 · rust-lang/rust#__##![feature(const_evaluatable_checked)]&lt;&lt;tracked at #68436,#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/vancouver-rs/talks/tree/master/const-generics" id="235">
      <title>talks/const-generics at master · vancouver-rs/talks</title>
    </bookmark>
  </folder>
  <folder id="52">
    <title>Coroutines / Generators</title>
    <bookmark href="https://doc.rust-lang.org/nightly/core/iter/fn.from_coroutine.html" id="236">
      <title>from_coroutine in core::iter - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/ops/trait.Coroutine.html" id="237">
      <title>Coroutine in core::ops - Rust#__#&lt;&lt;type Yield&gt;&gt; &lt;&lt;type Return&gt;&gt; &lt;&lt;self: Pin&lt;&amp;mut Self&gt;&gt;&gt; &lt;&lt;arg: R&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="53">
    <title>Existential Types</title>
    <bookmark href="https://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator" id="238">
      <title>How to write a Rust function that takes...#__#&lt;&lt;use generics#green&gt;&gt; &lt;&lt;I: Iterator&lt;Item = &amp;&apos;a u32&gt;,#red&gt;&gt; &lt;&lt;Traits can be used in two ways#red&gt;&gt; &lt;&lt;bounds on type parameters#green&gt;&gt; &lt;&lt;and as trait objects#red&gt;&gt; &lt;&lt;chapter on traits&gt;&gt; &lt;&lt;chapter on trait objects&gt;&gt; &lt;&lt;take something that implements IntoIterator#green&gt;&gt; &lt;&lt;fn find_min&lt;&apos;a, I&gt;(vals: I) -&gt; Option&lt;&amp;&apos;a u32&gt;@1#green&gt;&gt; &lt;&lt;where@1#green&gt;&gt; &lt;&lt;I: IntoIterator&lt;Item = &amp;&apos;a u32&gt;,#green&gt;&gt; &lt;&lt;using an impl Trait, impl Iterator#green&gt;&gt; &lt;&lt;fn find_min&lt;&apos;a&gt;(vals: impl Iterator&lt;Item = &amp;&apos;a u32&gt;) -&gt; Option&lt;&amp;&apos;a u32&gt; {#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="54">
    <title>Generics</title>
    <bookmark href="https://gist.github.com/rust-play/045b2c3a946f0a8e92da6a2b1347fba7" id="239">
      <title>Code shared from the Rust Playground</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/scope/lifetime/lifetime_bounds.html" id="240">
      <title>Bounds - Rust By Example - Lifetimes#__#&lt;&lt;T: &apos;a: All references in T must outlive lifetime &apos;a#green&gt;&gt; &lt;&lt;T: Trait + &apos;a: Type T must implement trait Trait and all references in T must outlive &apos;a#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://gist.github.com/rust-play/f8cd566d7baaad4ce9e2c47a70a514f5" id="241">
      <title>Code shared from the Rust Playground</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/iter/trait.Step.html" id="242">
      <title>core::iter::Step: How to limit traits...</title>
    </bookmark>
    <bookmark href="https://docs.rs/crate-metadata/latest/crate_metadata/fn.cargo_metadata.html" id="243">
      <title>cargo_metadata in crate_metadata - Rust#__#&lt;&lt;where&gt;&gt; &lt;&lt;for&lt;&apos;de&gt; Metadata: Deserialize&lt;&apos;de&gt;#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="55">
    <title>Lifetimes</title>
    <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/scope/borrow.html" id="244">
      <title>Borrowing - Rust By Example</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/box-with-a-trait-object-requires-static-lifetime/35261/2" id="245">
      <title>Box with a trait object requires static lifetime? - help - The Rust Programming Language Forum#__#&lt;&lt;Box&lt;dyn Trait&gt; is just sugar for Box&lt;dyn Trait + &apos;static&gt;&gt;&gt; &lt;&lt;trait object / type erased element has a : &apos;static bound&gt;&gt; &lt;&lt;meaning that it is not borrowing any local#green&gt;&gt; &lt;&lt;usable for as long as we wish&gt;&gt; &lt;&lt;forbid such short-lived references#green&gt;&gt; &lt;&lt;adding T : &apos;static#green&gt;&gt; &lt;&lt;decide that you do not need such a long-lived value; that borrowing for the lifetime &apos;a#green&gt;&gt; &lt;&lt;Box&lt;dyn Trait + &apos;lifetime&gt;#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/hashedone/borrow_checker_demyth_pl" id="246">
      <title>GitHub - hashedone/borrow_checker_demyth_pl: Slajdy z prezentacji na 25th level of code z dnia 11.06.2019</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch04-02-references-and-borrowing.html" id="247">
      <title>References and Borrowing - The Rust Programming Language#__#&lt;&lt;let mut s = String::from(&quot;hello&quot;);#green&gt;&gt; &lt;&lt;change(&amp;mut s);#green&gt;&gt; &lt;&lt;fn change(some_string: &amp;mut String)#green&gt;&gt; &lt;&lt;only one mutable reference to a particular piece of data in a particular scope#red&gt;&gt; &lt;&lt;let r1 = &amp;mut s;#red&gt;&gt; &lt;&lt;let r2 = &amp;mut s;#red&gt;&gt; &lt;&lt;benefit of having this restriction is that Rust can prevent data races at compile time#green&gt;&gt; &lt;&lt;it won’t even compile code with data races#red&gt;&gt; &lt;&lt;can use curly brackets to create a new scope, allowing for multiple mutable references#green&gt;&gt; &lt;&lt;just not simultaneous ones:#red&gt;&gt; &lt;&lt;similar rule exists for combining mutable and immutable references.#red&gt;&gt; &lt;&lt;let r1 = &amp;s;#green&gt;&gt; &lt;&lt;let r2 = &amp;s;#green&gt;&gt; &lt;&lt;let r3 = &amp;mut s; // BIG PROBLEM#red&gt;&gt; &lt;&lt;cannot borrow `s` as mutable because it is also borrowed as immutable#red&gt;&gt; &lt;&lt;cannot have a mutable reference while we have an immutable one#red&gt;&gt; &lt;&lt;multiple immutable references are okay#green&gt;&gt; &lt;&lt;a reference’s scope starts from where it is introduced and continues through the last time that reference is used#green&gt;&gt; &lt;&lt;println!(&quot;{}, {}, and {}&quot;, r1, r2, r3);#red&gt;&gt; &lt;&lt;// r1 and r2 are no longer used after this point#green&gt;&gt; &lt;&lt;let r3 = &amp;mut s; // no problem#green&gt;&gt; &lt;&lt;function&apos;s return type contains a borrowed value, but there is no value for it to be borrowed from#red&gt;&gt; &lt;&lt;solution here is to return the String directly:#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/scope/lifetime/lifetime_coercion.md" id="248">
      <title>rust-by-example/lifetime_coercion.md at master · rust-lang/rust-by-example#__#&lt;&lt;`&lt;&apos;a: &apos;b, &apos;b&gt;` reads as lifetime `&apos;a` is at least as long as `&apos;b`.#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/scope/move.md" id="249">
      <title>rust-by-example/move.md at master · rust-lang/rust-by-example#__#&lt;&lt;variables are in charge of freeing their own resources#green&gt;&gt; &lt;&lt;resources can only have one owner#red&gt;&gt; &lt;&lt;not all variables own resources (e.g. references)#red&gt;&gt; &lt;&lt;assignments (let x = y) or passing function arguments by value (foo(x)), the ownership of the resources is transferred#green&gt;&gt; &lt;&lt;In Rust-speak, this is known as a move#blue&gt;&gt; &lt;&lt;previous owner can no longer be used#red&gt;&gt; &lt;&lt;fn destroy_box(c: Box&lt;i32&gt;) {&gt;&gt; &lt;&lt;// `c` is destroyed and the memory freed#blue&gt;&gt; &lt;&lt;let x = 5u32;#green&gt;&gt; &lt;&lt;*Copy*#red&gt;&gt; &lt;&lt;let y = x;#blue&gt;&gt; &lt;&lt;// `a` is a pointer to a _heap_ allocated integer#blue&gt;&gt; &lt;&lt;let a = Box::new(5i32);#green&gt;&gt; &lt;&lt;*Move*#red&gt;&gt; &lt;&lt;let b = a;#green&gt;&gt; &lt;&lt;// The pointer address of `a` is copied (not the data) into `b`.#red&gt;&gt; &lt;&lt;// `b` now owns it.#red&gt;&gt; &lt;&lt;`a` can no longer access the data, because it no longer owns#red&gt;&gt; &lt;&lt;destroy_box(b);#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rustviz/rustviz" id="250">
      <title>rustviz/rustviz: Interactively Visualizing...</title>
    </bookmark>
    <bookmark href="https://blog.codeship.com/lifetimes-in-rust/" id="251">
      <title>Understanding Lifetimes in Rust - via @codeship | via @codeship#__#&lt;&lt;If an item is to exist beyond its usage within a method call, then the method needs to borrow it instead or take a copy#green&gt;&gt; &lt;&lt;borrow_it(&amp;money);&gt;&gt; &lt;&lt;fn borrow_it(qty: &amp;String)&gt;&gt; &lt;&lt;fn consume_it(qty: String)&gt;&gt; &lt;&lt;&quot;42&quot;.to_string()&gt;&gt; &lt;&lt;consume_it(money);&gt;&gt; &lt;&lt;move occurs because `money` has type `std::string::String`, which does not implement the `Copy` trait&gt;&gt; &lt;&lt;Dinosaur should not outlive Earth&gt;&gt; &lt;&lt;put more lifetime references in places where they perhaps didn’t need to go#green&gt;&gt; &lt;&lt;compiler’s error messages understood my intention better when the lifetime annotations were there and wrong#green&gt;&gt; &lt;&lt;than when they weren’t there and wrong#red&gt;&gt; &lt;&lt;println!(&quot;{:?}&quot;&gt;&gt; &lt;&lt;format!(&quot;{:?}&quot;, d)&gt;&gt; &lt;&lt;from lower/inner scopes, it is best to assign the desired result value to a variable in the higher scope#green&gt;&gt; &lt;&lt;: &amp;i32;&gt;&gt; &lt;&lt;cloning and copying to allow values to be returned#green&gt;&gt; &lt;&lt;you aren’t changing the behavior of lifetimes when you use them — they’re simply declaring them#blue&gt;&gt; &lt;&lt;lifetimes with annotations work the same way as when there aren’t written annotations#blue&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch10-03-lifetime-syntax.html" id="252">
      <title>Validating References with Lifetimes - The Rust Programming Language#__#&lt;&lt;fn longest&lt;&apos;a&gt;(x: &amp;&apos;a str, y: &amp;&apos;a str) -&gt; &amp;&apos;a str#green&gt;&gt; &lt;&lt;for structs to hold references#green&gt;&gt; &lt;&lt;add a lifetime annotation on every reference in the struct’s definition#green&gt;&gt; &lt;&lt;struct ImportantExcerpt&lt;&apos;a&gt; {#green&gt;&gt; &lt;&lt;part: &amp;&apos;a str,#green&gt;&gt; &lt;&lt;let i = ImportantExcerpt {#green&gt;&gt; &lt;&lt;part: first_sentence,#green&gt;&gt; &lt;&lt;compiled without lifetime annotations#green&gt;&gt; &lt;&lt;fn first_word(s: &amp;str) -&gt; &amp;str {#green&gt;&gt; &lt;&lt;return &amp;s[0..i];#green&gt;&gt; &lt;&lt;&amp;s[..]#green&gt;&gt; &lt;&lt;lifetime elision rules#green&gt;&gt; &lt;&lt;three rules to figure out what lifetimes references#green&gt;&gt; &lt;&lt;when there aren’t explicit annotations#green&gt;&gt; &lt;&lt;if there is exactly one input lifetime parameter#green&gt;&gt; &lt;&lt;hat lifetime is assigned to all output lifetime parameters: fn foo&lt;&apos;a&gt;(x: &amp;&apos;a i32) -&gt; &amp;&apos;a i32.#green&gt;&gt; &lt;&lt;if there are multiple input lifetime parameters#green&gt;&gt; &lt;&lt;but one of them is &amp;self or &amp;mut self#green&gt;&gt; &lt;&lt;because this is a method#green&gt;&gt; &lt;&lt;the lifetime of self is assigned to all output lifetime parameters.#green&gt;&gt; &lt;&lt;Lifetime names for struct fields always need to be declared after the impl keyword#green&gt;&gt; &lt;&lt;and then used after the struct’s name#green&gt;&gt;&lt;&lt;.as_str()#green&gt;&gt; &lt;&lt;When returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters.#green&gt;&gt; &lt;&lt;refer to a value created within this function, which would be a dangling reference#red&gt;&gt; &lt;&lt;let novel = String::from(#green&gt;&gt; &lt;&lt;novel.split(&apos;.&apos;).next().expect(#green&gt;&gt; &lt;&lt;fn first_word&lt;&apos;a&gt;(s: &amp;&apos;a str) -&gt; &amp;str#green&gt;&gt; &lt;&lt;might see suggestions to use the &apos;static lifetime in error messages#red&gt;&gt; &lt;&lt;But before specifying &apos;static as the lifetime#red&gt;&gt; &lt;&lt;think about whether the reference you have actually lives the entire lifetime of your program or not.#green&gt;&gt; &lt;&lt;You might consider whether you want it to live that long,#green&gt;&gt; &lt;&lt;even if it could.#red&gt;&gt; &lt;&lt;Most of the time, the problem results from attempting to create a dangling reference#red&gt;&gt; &lt;&lt;or a mismatch of the available lifetimes#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://ehsanmkermani.com/2019/03/16/variance-in-rust-an-intuitive-explanation/" id="253">
      <title>Variance in Rust: An intuitive explanation – Ehsan&apos;s Blog#__#&lt;&lt;Shorter lifetime: co-variance#blue&gt;&gt; &lt;&lt;Longer lifetime: contra-variance#blue&gt;&gt; &lt;&lt;Neither shorter nor longer lifetime: in-variance#blue&gt;&gt; &lt;&lt;variance in Rust, by default it means covariance#blue&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch04-01-what-is-ownership.html" id="1041">
      <title>What is Ownership? - The Rust Programming Language#__#&lt;&lt;unknown size at compile time#red&gt;&gt; &lt;&lt;abbreviated as just allocating#green&gt;&gt; &lt;&lt;faster if they jump around less in memory#red&gt;&gt; &lt;&lt;heap data is why ownership exists#green&gt;&gt; &lt;&lt;variable that’s called its owner#green&gt;&gt; &lt;&lt;one owner at a time#green&gt;&gt; &lt;&lt;owner goes out of scope, the value will be dropped#green&gt;&gt; &lt;&lt;unknown to us at compile time#red&gt;&gt; &lt;&lt;Rust calls drop automatically at the closing curly bracket.#green&gt;&gt; &lt;&lt;Resource Acquisition Is Initialization (RAII)#green&gt;&gt;&lt;&lt;Rust will never automatically create “deep” copies#red&gt;&gt; &lt;&lt;any automatic copying can be assumed to be inexpensive#green&gt;&gt; &lt;&lt;Rust won’t let us annotate a type with the Copy trait if the type, or any of its parts, has implemented the Drop#red&gt;&gt; &lt;&lt;some of the types that implement Copy:&gt;&gt; &lt;&lt;Tuples, if they only contain types that also implement Copy#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=315447" id="1042">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/any-way-to-return-an-closure-that-would-returns-a-reference-to-one-of-its-captured-variable/22652/3" id="1043">
      <title>Any way to return an closure that would returns a reference to one of its captured variable? - help - The Rust Programming Language Forum#__#&lt;&lt;fn foo(f: impl for&lt;&apos;a&gt; BorrowingFn&lt;&apos;a&gt;)#red&gt;&gt; &lt;&lt;fn bar() -&gt; impl for&lt;&apos;a&gt; BorrowingFn&lt;&apos;a&gt; {&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/70263" id="1044">
      <title>HRTBs: &quot;implementation is not general enough&quot;, but it is · Issue #70263 · rust-lang/rust#__#&lt;&lt;^^^ implementation of `MyFn` is not general enough#red&gt;&gt; &lt;&lt;fn foo&lt;F&gt;(f: F) where F: for&lt;&apos;a&gt; FnOnce(&amp;&apos;a i32) -&gt; &amp;&apos;a i32 {}#green&gt;&gt; &lt;&lt;can make closures work#green&gt;&gt; &lt;&lt;adding an extra bound:#green&gt;&gt; &lt;&lt;fn foo&lt;F&gt;(f: F) where F: for&lt;&apos;a&gt; MyFn&lt;&apos;a&gt; {}#red&gt;&gt; &lt;&lt;F: for&lt;&apos;a&gt; FnOnce(&amp;&apos;a i32) -&gt; &amp;&apos;a i32, // &lt;-- extra bound#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://gist.github.com/peter-kehl/315225a4ad86c6ec2a069a19be89676b" id="1045">
      <title>Rust lambdas returning a reference, stored in a function pointer</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/97362" id="1046">
      <title>Tracking Issue for RFC 3216: &quot;Allow using `for&lt;&apos;a&gt;` syntax when declaring closures&quot; · Issue #97362 · rust-lang/rust#__#&lt;&lt;closure_lifetime_binder&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/tjtgtr/why_is_it_no_possible_to_return_a_reference_from/" id="1047">
      <title>Why is it no possible to return a reference from a closure? : r/rust#__#&lt;&lt;doc.rust-lang.org/nomicon/hrtb.html&gt;&gt; &lt;&lt;for&lt;...&gt; syntax&gt;&gt; &lt;&lt;doc.rust-lang.org/reference/trait-bounds.html#higher-ranked-trait-bounds&gt;&gt; &lt;&lt;for&lt;&apos;lifetime&gt;&gt;&gt; &lt;&lt;func: Box&lt;dyn for&lt;&apos;a&gt; Fn(&amp;&apos;a str) -&gt; &amp;&apos;a str&gt;&gt;&gt; &lt;&lt;If you don&apos;t want to use dynamic dispatch with Box&gt;&gt; &lt;&lt;let lambda: for&lt;&apos;a&gt; fn(&amp;&apos;a str) -&gt; &amp;&apos;a str = |x| { x };&gt;&gt; &lt;&lt;closures can only be coerced to fn pointers if they do not capture any variables#red&gt;&gt; &lt;&lt;Interestingly, you don&apos;t need lifetimes when coercing to a fn pointer#green&gt;&gt; &lt;&lt;let lambda: fn(&amp;str) -&gt; &amp;str = |x| { x };#green&gt;&gt; &lt;&lt;higher ranked&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=856310" id="1048">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nomicon/dropck.html" id="1049">
      <title>Drop Check - The Rustonomicon#__#&lt;&lt;You can try changing the order of fields or use a tuple#red&gt;&gt; &lt;&lt;still not compile#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/unused-generic-type-duplicating-an-existing-bound-reported-as-causing-an-extra-bound/112857" id="1050">
      <title>Unused generic type, duplicating an existing bound, reported as causing an extra bound? - help - The Rust Programming Language Forum#__#&lt;&lt;peter-kehl&gt;&gt; &lt;&lt;lifetime generics of functions are chosen by the caller#blue&gt;&gt; &lt;&lt;always longer than the function body#red&gt;&gt; &lt;&lt;&apos;out is the parameter of a trait&gt;&gt; &lt;&lt;That makes it invariant#blue&gt;&gt; &lt;&lt;can&apos;t coerce it to something shorter#red&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="56">
    <title>Macros</title>
    <folder id="254">
      <title>Compile Failure Test/Verification</title>
      <bookmark href="https://github.com/Manishearth/compiletest-rs" id="663">
        <title>Manishearth/compiletest-rs: An extraction of the compiletest utility from the Rust compiler#__#&lt;&lt;nightly and want to use Rust&apos;s test crate directly#red&gt;&gt; &lt;&lt;need to have the rustc development libraries#red&gt;&gt; &lt;&lt;rustup component add rustc-dev --toolchain nightly#green&gt;&gt; &lt;&lt;Once you have the rustc development libraries installed, you can use the rustc feature to make compiletest use them#green&gt;&gt; &lt;&lt;instead of the tester crate#red&gt;&gt; &lt;&lt;tester fork of Rust&apos;s builtin test crate, so that we don&apos;t have require nightly#red&gt;&gt; &lt;&lt;Each mode corresponds to a folder with the same name in the tests folder&gt;&gt; &lt;&lt;should be able to run on both stable, beta and nightly#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/trybuild" id="664">
        <title>trybuild - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/compiletest_rs" id="665">
        <title>compiletest_rs - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/55327185/how-do-i-write-a-test-assuring-a-compilation-error" id="666">
        <title>unit testing - How do I write a test assuring a compilation error? - Stack Overflow#__#&lt;&lt;doc tests which are supposed to fail&gt;&gt; &lt;&lt;code snippet with compile_fail:&gt;&gt; &lt;&lt;/// ```compile_fail#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/compiletest_rs/0.7.1/compiletest_rs/" id="667">
        <title>compiletest_rs - Rust</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/9jh04r/how_to_test_procedural_macros/" id="668">
        <title>How to test procedural macros? : rust#__#&lt;&lt;separate crate for testing#green&gt;&gt; &lt;&lt;put it in the same workspace as the other crates#green&gt;&gt; &lt;&lt;run cargo t from the root#green&gt;&gt; &lt;&lt;it will run the tests for all the crates#green&gt;&gt; &lt;&lt;I wrote two custom test-harness that does the testing: compile-fail#green&gt;&gt; &lt;&lt;compiletest-rs#red&gt;&gt; &lt;&lt;hacky, assumes some internal knowledge#red&gt;&gt; &lt;&lt;already quite old#red&gt;&gt; &lt;&lt;using the build-plan feature of Cargo#green&gt;&gt; &lt;&lt;Via build plans, one can get all the information#green&gt;&gt; but deprecated!&lt;&lt;This is what compile-fail#green&gt;&gt; &lt;&lt;Sadly, that crate doesn&apos;t seem to be ready yet#red&gt;&gt; &lt;&lt;build plans are still unstable#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/trybuild" id="669">
        <title>dtolnay/trybuild: Test harness for ui tests of compiler diagnostics#__#&lt;&lt;Nothing here is specific to macros; trybuild would work equally well for testing misuse of non-macro APIs.#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="255">
      <title>Expressful</title>
      <bookmark href="https://github.com/obmarg/cynic" id="670">
        <title>obmarg/cynic: A bring your own types GraphQL client library for Rust</title>
      </bookmark>
    </folder>
    <folder id="256">
      <title>extern crate</title>
      <bookmark href="https://users.rust-lang.org/t/usage-of-extern-crate/73619/6" id="671">
        <title>Usage of `extern crate`? - help - The Rust Programming Language Forum#__#&lt;&lt;still necessary to use extern crate@1&gt;&gt; &lt;&lt;not pulled in as Cargo dependencies@1#red&gt;&gt; &lt;&lt;but are provided by the toolchain@1#red&gt;&gt; &lt;&lt;required for alloc#red&gt;&gt; &lt;&lt;I think also for test#red&gt;&gt; &lt;&lt;extern crate core as std;&gt;&gt; &lt;&lt;affect every module in the project&gt;&gt; &lt;&lt;inferred from your Cargo.toml, so in the 2018 edition it was decided to make this extern crate implicit&gt;&gt; &lt;&lt;some crates aren&apos;t present in your Cargo.toml because they are distributed with the Rust toolchain#red&gt;&gt; &lt;&lt;also do extern crate rustc to use the Rust compiler as a library, but that requires a #![feature(rustc_private)]&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="257">
      <title>Fast Compile</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/dhroyo/announcing_watt_nearzerocompiletime_proc_macros/" id="672">
        <title>Announcing Watt: near-zero-compile-time proc macros powered by wasm (proof of concept) : rust</title>
      </bookmark>
    </folder>
    <folder id="258">
      <title>In General</title>
      <bookmark href="https://github.com/dtolnay/cargo-expand" id="673">
        <title>dtolnay/cargo-expand: Subcommand to show result of macro expansion</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/watt/issues/43" id="674">
        <title>Addressing crate local state for procedural... &amp; wasm#__#&lt;&lt;no guarantee of ordering -- if do_it! needs data from all config! invocations, that&apos;s a problem.#red&gt;&gt; &lt;&lt;persistence of state without co-operation with cargo is a problem#red&gt;&gt; &lt;&lt;cargo doesn&apos;t know if and when it needs to invalidate#red&gt;&gt; &lt;&lt;also completely valid for the rustc process to have read-only access to all files except for the /tmp dir and the output artifacts#red&gt;&gt; &lt;&lt;bazel doesn&apos;t persist the state across rustc invocations#red&gt;&gt; &lt;&lt;Every rustc invocation gets it&apos;s own container.#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/syntax-extensions/expansion.html" id="675">
        <title>Expansion - The Little Book of Rust Macros#__#&lt;&lt;after the construction of the AST&gt;&gt; &lt;&lt;but before the compiler begins constructing its semantic&gt;&gt; &lt;&lt;will expand all macros&gt;&gt; &lt;&lt;syntax extension, it expects the result to be parsable as one of a limited set of syntax elements, based on context#red&gt;&gt; &lt;&lt;invoke a macro at module scope, the compiler will parse the result into an AST node that represents an item&gt;&gt; &lt;&lt;macro in expression position, the compiler will parse the result into an expression AST node&gt;&gt; &lt;&lt;can turn a syntax extension result into any of the following:#green&gt;&gt; &lt;&lt;an expression,#green&gt;&gt; &lt;&lt;a pattern,#green&gt;&gt; &lt;&lt;a type,#green&gt;&gt; &lt;&lt;zero or more items, or#green&gt;&gt; &lt;&lt;zero or more statements.#green&gt;&gt; &lt;&lt;where you can invoke a macro determines what its result will be interpreted as.&gt;&gt; &lt;&lt;we added parentheses despite them not being in the expansion&gt;&gt; &lt;&lt;compiler always treats the expansion of a macro as a complete AST node#green&gt;&gt; &lt;&lt;not as a mere sequence of tokens#red&gt;&gt; &lt;&lt;when a syntax extension expands to something that contains another syntax extension invocation&gt;&gt; &lt;&lt;macro recursion limit and defaults to 32#red&gt;&gt; &lt;&lt;#![recursion_limit=&quot;…&quot;]#green&gt;&gt; &lt;&lt;must be done crate-wide#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/tokens.html" id="676">
        <title>Tokens - The Rust Reference</title>
      </bookmark>
      <bookmark href="https://docs.rs/quote/1.0.9/quote/macro.quote.html" id="677">
        <title>quote::quote - Rust#__#&lt;&lt;#(#var)* — no separators#green&gt;&gt; &lt;&lt;#(#var),*#green&gt;&gt; &lt;&lt;proc_macro types are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro#red&gt;&gt; &lt;&lt;while proc_macro2 types may exist anywhere including tests#green&gt;&gt; &lt;&lt;non-macro code#green&gt;&gt; &lt;&lt;main.rs and build.rs#green&gt;&gt; &lt;&lt;let mut _#ident = 0;#red&gt;&gt; &lt;&lt;let varname = format_ident!(&quot;_{}&quot;, ident);#green&gt;&gt; &lt;&lt;let concatenated = format!(&quot;_{}&quot;, ident);#green&gt;&gt; &lt;&lt;let varname = syn::Ident::new(&amp;concatenated, ident.span());#green&gt;&gt; &lt;&lt;roughly equivalent to the above, but will not handle ident being a raw identifier#red&gt;&gt; &lt;&lt;#field_type::new()#red&gt;&gt; &lt;&lt;expanded code contains String::new()#green&gt;&gt; &lt;&lt;expanded code is Vec&lt;i32&gt;::new()#red&gt;&gt; &lt;&lt;Ordinarily in handwritten Rust we would write Vec::&lt;i32&gt;::new()#green&gt;&gt; &lt;&lt;&lt;#field_type&gt;::new()#red&gt;&gt; &lt;&lt;expands to &lt;Vec&lt;i32&gt;&gt;::new()#green&gt;&gt; &lt;&lt;Neither doc comments nor string literals get interpolation#red&gt;&gt; &lt;&lt;.map(syn::Index::from)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/macro.compile_error.html" id="678">
        <title>std::compile_error - Rust#__#&lt;&lt;macro_rules!@1#green&gt;&gt; &lt;&lt;compile_error!(&quot;This macro only accepts `foo` or `bar`&quot;);#green&gt;&gt; &lt;&lt;#[cfg(not(any(#green&gt;&gt; &lt;&lt;compile_error!(&quot;Either feature \&quot;foo\&quot; or \&quot;bar\&quot; must be enabled#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/quote/1.0.9/quote/" id="679">
        <title>quote - Rust</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/syntax-extensions/source-analysis.html" id="680">
        <title>Source Analysis - The Little Book of Rust Macros#__#&lt;&lt;@ has a purpose#green&gt;&gt; &lt;&lt;in patterns to bind a non-terminal part of the pattern to a name#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/syntax-extensions/debugging.html" id="681">
        <title>Debugging - The Little Book of Rust Macros#__#&lt;&lt;rustc@1&gt;&gt; &lt;&lt;-Zunpretty=expanded&gt;&gt; &lt;&lt;cargo-expand&gt;&gt; &lt;&lt;playground&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/34693847/fixing-no-rules-expected-the-token-macro-error" id="682">
        <title>rust - Fixing &quot;no rules expected the token&quot; macro error - Stack Overflow#__#&lt;&lt;cargo rustc -- -Z trace-macros#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://morioh.com/p/93f0f288f5ed" id="1234">
        <title>Macros in Rust - Everything You Need To Know</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/macro.concat_idents.html" id="1235">
        <title>concat_idents in std - Rust#__#&lt;&lt;hygiene#red&gt;&gt; &lt;&lt;this macro cannot capture local variables#red&gt;&gt; &lt;&lt;Also&gt;&gt; &lt;&lt;macros are only allowed in item, statement or expression position#red&gt;&gt; &lt;&lt;while you may use this macro for referring to existing variables, functions or modules etc#green&gt;&gt; &lt;&lt;cannot define a new one with it#red&gt;&gt; &lt;&lt;fn concat_idents!(new, fun, name) { }#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="259">
      <title>macro_rules</title>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/minutiae/metavar-and-expansion.html" id="683">
        <title>Metavariables and Expansion Redux - The Little Book of Rust Macros#__#&lt;&lt;Once the parser begins consuming tokens for a metavariable, it cannot stop or backtrack#red&gt;&gt; &lt;&lt;second rule of the following macro cannot ever match#red&gt;&gt; &lt;&lt;second token is also valid in an expression#red&gt;&gt; &lt;&lt;write macro rules from most-specific#green&gt;&gt; &lt;&lt;to least-specific#red&gt;&gt; &lt;&lt;macro_rules! restricts what can follow various metavariables#red&gt;&gt; &lt;&lt;Repetitions also adhere#red&gt;&gt; &lt;&lt;if a repetition can repeat multiple times (* or +), then the contents must be able to follow themselves#red&gt;&gt; &lt;&lt;If a repetition can repeat zero times (? or *) then what comes after the repetition must be able to follow what comes before#red&gt;&gt; &lt;&lt;not perform any kind of lookahead#red&gt;&gt; &lt;&lt;one token at a time#green&gt;&gt; &lt;&lt;substitution is not token-based#red&gt;&gt; &lt;&lt;despite very much looking like it#red&gt;&gt; &lt;&lt;By parsing the input into an AST node, the substituted result becomes un-destructible#red&gt;&gt; &lt;&lt;cannot examine the contents or match against it ever again#red&gt;&gt; &lt;&lt;{concat!(&quot;something else (&quot;, stringify!($($tts)*), &quot;)&quot;)};#green&gt;&gt; &lt;&lt;The only way to avoid this is to capture using the tt, ident or lifetime kinds.#green&gt;&gt; this includes :item, too!&lt;&lt;anything else, the only thing you can do with the result from then on is substitute it directly#red&gt;&gt; &lt;&lt;you might expect the parser to give up and try the next rule#red&gt;&gt; &lt;&lt;Instead, the parser will panic and abort the entire compilation#red&gt;&gt; &lt;&lt;if a repetition can repeat multiple times(* or +), then the contents must be able to follow themselves#red&gt;&gt; &lt;&lt;particularly confusing:#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/macros/minutiae/hygiene.html" id="684">
        <title>Hygiene - The Little Book of Rust Macros#__#&lt;&lt;macro_rules! macros in Rust are partially hygienic#red&gt;&gt; &lt;&lt;hygienic when it comes to most identifiers#red&gt;&gt; &lt;&lt;but not when#red&gt;&gt; &lt;&lt;generic type parameters or lifetimes#red&gt;&gt; &lt;&lt;invisible &quot;syntax context&quot; value to all identifiers#blue&gt;&gt; &lt;&lt;let a = 42;#red&gt;&gt; &lt;&lt;Each macro_rules! macro expansion is given a new, unique syntax context#red&gt;&gt; &lt;&lt;two different as in the expanded code#red&gt;&gt; &lt;&lt;($a:ident, $e:expr) =&gt; {#green&gt;&gt; &lt;&lt;() =&gt; { helper!() } // This might lead to an error due to &apos;helper&apos; not being in scope#red&gt;&gt; &lt;&lt;() =&gt; { $crate::helper!() }#green&gt;&gt; &lt;&lt;macro_rules! helper {#green&gt;&gt; &lt;&lt;// Usage in another crate.#green&gt;&gt; &lt;&lt;// Note that `helper_macro::helper` is not imported#green&gt;&gt; &lt;&lt;because $crate refers to the current crate, it must be used with a fully qualified module path#green&gt;&gt; &lt;&lt;when referring to non-macro items:#red&gt;&gt; &lt;&lt;() =&gt; { $crate::inner::foo() };#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/macros/minutiae/scoping.html" id="685">
        <title>Scoping - The Little Book of Rust Macros#__#&lt;&lt;function-like macros&gt;&gt; &lt;&lt;scoped can be somewhat unintuitive#red&gt;&gt; &lt;&lt;two forms of scope&gt;&gt; &lt;&lt;textual scope#green&gt;&gt; &lt;&lt;path-based scope#green&gt;&gt; &lt;&lt;When such a macro is invoked by an unqualified identifier&gt;&gt; &lt;&lt;first looked up in textual scoping#green&gt;&gt; &lt;&lt;then in path-based scoping#green&gt;&gt; &lt;&lt;If it is invoked by a qualified identifier&gt;&gt; &lt;&lt;skip the textual scoping lookup#green&gt;&gt; &lt;&lt;only do a look up in the path-based#green&gt;&gt; &lt;&lt;unlike everything else in the language, function-like macros will remain visible in sub-modules#red&gt;&gt; &lt;&lt;X!(); // defined#red&gt;&gt; &lt;&lt;also unlike everything else in the language, macro_rules! macros are only accessible after their definition#red&gt;&gt; &lt;&lt;mod b {@1#red&gt;&gt; &lt;&lt;// X!(); // undefined@1#red&gt;&gt; &lt;&lt;macro_rules! X { () =&gt;&gt;&gt; &lt;&lt;macro_rules! X { () =&gt; {}; }@1&gt;&gt; &lt;&lt;macro_rules! macros do not &quot;leak&quot; out of their defining scope#red&gt;&gt; &lt;&lt;this dependency does not apply to macros themselves:#green&gt;&gt; &lt;&lt;macro_rules! X { () =&gt; { Y!(); }; }#green&gt;&gt; &lt;&lt;macro_rules! Y { () =&gt; {}; }&gt;&gt; &lt;&lt;Defining macro_rules! macros multiple times is allowed#red&gt;&gt; &lt;&lt;the most recent declaration will simply shadow#red&gt;&gt; &lt;&lt;unless it has gone out of scope#red&gt;&gt; &lt;&lt;macro_rules! X { (2) =&gt; {}; }#red&gt;&gt; &lt;&lt;mod a {@4&gt;&gt; &lt;&lt;macro_rules! X { (3) =&gt; {}; }#red&gt;&gt; &lt;&lt;X!(3);#red&gt;&gt; &lt;&lt;// X!(3); // Error: no rule matches `3`#red&gt;&gt; &lt;&lt;exported from a module using the #[macro_use]&gt;&gt; &lt;&lt;Using this on a module is similar to saying that you do not want to have the module&apos;s macro&apos;s scope end with the module#green&gt;&gt; &lt;&lt;identifiers in a macro_rules!#red&gt;&gt; &lt;&lt;including other macros#red&gt;&gt; &lt;&lt;only resolved upon expansion:#red&gt;&gt; &lt;&lt;#[macro_use] applied to an extern crate does not behave this way#red&gt;&gt; &lt;&lt;such declarations are effectively hoisted to the top of the module.#red&gt;&gt; &lt;&lt;#[macro_use] extern crate macs;#red&gt;&gt; &lt;&lt;these scoping behaviors apply to functions as well#red&gt;&gt; &lt;&lt;By default, a macro_rules! macro has no path-based scope#red&gt;&gt; &lt;&lt;However, if it has the #[macro_export]#green&gt;&gt; &lt;&lt;then it is declared in the crate root#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/building-blocks/parsing.html" id="686">
        <title>Parsing Rust - The Little Book of Rust Macros#__#&lt;&lt;ignore things like generics#red&gt;&gt; &lt;&lt;main points of interest of these macros are their matchers#green&gt;&gt; &lt;&lt;ignores qualifiers like unsafe, async, ...#red&gt;&gt; &lt;&lt;generics and where#red&gt;&gt; &lt;&lt;If parsing those is required it is likely that you are better off using a proc-macro instead#red&gt;&gt; &lt;&lt;Ideally we would like to use a pattern fragment specifier instead of an ident for the arguments#green&gt;&gt; &lt;&lt;but this is currently not allowed#red&gt;&gt; &lt;&lt;Parsing enums is a bit more complex#red&gt;&gt; &lt;&lt;than structs#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/patterns/callbacks.html" id="687">
        <title>Callbacks - The Little Book of Rust Macros#__#&lt;&lt;impossible to pass information to a macro from the expansion of another macro#red&gt;&gt; &lt;&lt;use recursion and pass a callback#green&gt;&gt; &lt;&lt;macro_rules! expand_to_larch {#red&gt;&gt; &lt;&lt;() =&gt; { larch };#red&gt;&gt; &lt;&lt;macro_rules! call_with_larch {#green&gt;&gt; &lt;&lt;($callback:ident) =&gt; { $callback!(larch) };#green&gt;&gt; &lt;&lt;recognize_tree!(expand_to_larch!());#red&gt;&gt; &lt;&lt;call_with_larch!(recognize_tree);#green&gt;&gt; &lt;&lt;tt repetition, one can also forward arbitrary arguments to a callback#green&gt;&gt; &lt;&lt;macro_rules! callback {#green&gt;&gt; &lt;&lt;($callback:ident( $($args:tt)* )) =&gt; {#green&gt;&gt; &lt;&lt;$callback!( $($args)* )#green&gt;&gt; &lt;&lt;callback!(callback(println(&quot;Yes, this *was* unnecessary.&quot;)));#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/minutiae/debugging.html" id="688">
        <title>Debugging - The Little Book of Rust Macros#__#&lt;&lt;every macro_rules! macro invocation&gt;&gt; &lt;&lt;#![feature(trace_macros)]#green&gt;&gt; &lt;&lt;trace_macros!(true);#green&gt;&gt; &lt;&lt;trace_macros!(false);#green&gt;&gt; &lt;&lt;particularly invaluable when debugging deeply recursive macro_rules!#green&gt;&gt; &lt;&lt;can also enable this from the command-line by adding -Z trace-macros#green&gt;&gt; &lt;&lt;Secondly, there is log_syntax!#green&gt;&gt; &lt;&lt;compiler to output all tokens passed to it#green&gt;&gt; &lt;&lt;#![feature(log_syntax)]#green&gt;&gt; &lt;&lt;more targeted debugging#green&gt;&gt; &lt;&lt;than trace_macros!#red&gt;&gt; &lt;&lt;what the macro expands to#green&gt;&gt; &lt;&lt;--pretty argument to the compiler#green&gt;&gt; &lt;&lt;rustc -Z unstable-options --pretty expanded#green&gt;&gt; &lt;&lt;Other options to --pretty can be listed using rustc -Z unstable-options --help -v#green&gt;&gt; &lt;&lt;For the aforementioned --pretty=expanded option, there exists a nice cargo addon called cargo-expand#green&gt;&gt; &lt;&lt;use the playground#green&gt;&gt; &lt;&lt;its TOOLS button#green&gt;&gt; &lt;&lt;to expand macros#green&gt;&gt; &lt;&lt;amazing tool is lukaslueg&apos;s macro_railroad#green&gt;&gt; &lt;&lt;visualize and generate syntax diagrams for Rust&apos;s macro_rules! macros#green&gt;&gt; &lt;&lt;visualizes the accepted macro&apos;s grammar as an automata.#green&gt;&gt;&lt;&lt;trace_macros!&gt;&gt; &lt;&lt;prior to expansion#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/macros/macro_rules.html" id="689">
        <title>macro_rules! - The Little Book of Rust Macros#__#&lt;&lt;notice the trailing semicolon, will always be parsed as an item.&gt;&gt; &lt;&lt;expansion part of a rule is also called its transcriber&gt;&gt; &lt;&lt;macro_rules! invocation expands to... nothing&gt;&gt; &lt;&lt;you can technically use macro_rules! in any position where an empty expansion is valid.#green&gt;&gt; &lt;&lt;specific grouping tokens you use when you invoke the macro are not matched#red&gt;&gt; &lt;&lt;can invoke the above macro as four![] and it will still match&gt;&gt; &lt;&lt;Only the contents of the input token tree are considered.#red&gt;&gt; &lt;&lt;Matchers can also contain captures#green&gt;&gt;&lt;&lt;metavariables leverage the Rust compiler&apos;s parser, ensuring that they are always &quot;correct&quot;&gt;&gt; &lt;&lt;can also have multiple metavariables in a single matcher:#green&gt;&gt; &lt;&lt;($a:expr, $b:expr, $c:expr) =&gt; { $a * ($b + $c) };#green&gt;&gt; &lt;&lt;use them as often as you like in the expansion:#green&gt;&gt; &lt;&lt;($e:expr) =&gt; { $e; $e; $e; };#green&gt;&gt; &lt;&lt;special metavariable called $crate#green&gt;&gt; &lt;&lt;repeat operator#green&gt;&gt; &lt;&lt;?: indicating at most one repetition#green&gt;&gt; &lt;&lt;Since ? represents at most one occurrence, it cannot be used with a separator.#red&gt;&gt; &lt;&lt;can repeat multiple metavariables in a single repetition#green&gt;&gt; &lt;&lt;as long as all metavariables repeat equally often#red&gt;&gt; &lt;&lt;($($i:ident)*, $($i2:ident)*) =&gt; {#green&gt;&gt; &lt;&lt;$( let $i: (); let $i2: (); )*#green&gt;&gt; &lt;&lt;repeat_two!( a b c d e f, u v w x y z );#green&gt;&gt; &lt;&lt;repeat_two!( a b c d e f, x y z );#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/macros-by-example.html" id="690">
        <title>Macros By Example - The Rust Reference#__#&lt;&lt;separator token can be any token other than a delimiter or one of the repetition operators#green&gt;&gt; &lt;&lt;no lookahead#red&gt;&gt; &lt;&lt;one token at a time#green&gt;&gt; &lt;&lt;tries each macro rule#green&gt;&gt; &lt;&lt;transcribes the first successful match#green&gt;&gt; &lt;&lt;second macro can&apos;t use literal tokens to match the fragments#red&gt;&gt; &lt;&lt;only a fragment specifier of the same type#green&gt;&gt; &lt;&lt;ident, lifetime, and tt fragment types are an exception#green&gt;&gt; &lt;&lt;can be matched by literal tokens#green&gt;&gt; &lt;&lt;exception is that the outer delimiters for the matcher will match any pair of delimiters#green&gt;&gt; &lt;&lt;character $ cannot be matched or transcribed#red&gt;&gt;&lt;&lt;In both the matcher and the transcriber, the $#red&gt;&gt; &lt;&lt;$( $i:ident ),* ; $( $j:ident ),*#green&gt;&gt; &lt;&lt;$( ($i,$j) ),*#green&gt;&gt; &lt;&lt;must bind the same number of $i fragments as $j fragments#green&gt;&gt; &lt;&lt;invoked by an unqualified identifier (not part of a multi-part path), it is first looked up in textual scoping#red&gt;&gt; &lt;&lt;If the macro&apos;s name is qualified with a path, then it is only looked up in path-based scoping.#red&gt;&gt; &lt;&lt;self::lazy_static!{}#red&gt;&gt; &lt;&lt;Path-based lookup ignores our#red&gt;&gt; &lt;&lt;finds imported#red&gt;&gt; &lt;&lt;#[macro_export] attribute can have the local_inner_macros keyword added to automatically prefix&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/patterns/tt-muncher.html" id="691">
        <title>Incremental TT Munchers - The Little Book of Rust Macros#__#&lt;&lt;macro_rules! mixed_rules {&gt;&gt; &lt;&lt;$($tail:tt)*#green&gt;&gt; &lt;&lt;mixed_rules!($($tail)*);#green&gt;&gt; &lt;&lt;tt repetition is the only way to losslessly capture#green&gt;&gt; &lt;&lt;macro recursion limit#red&gt;&gt; &lt;&lt;not have any form of tail recursion elimination or optimization#red&gt;&gt; &lt;&lt;by adding additional rules to account for variation in the input#green&gt;&gt; &lt;&lt;or by making compromises on the input syntax#green&gt;&gt;&lt;&lt;perhaps the most powerful#green&gt;&gt; &lt;&lt;TT munchers are inherently quadratic#red&gt;&gt; &lt;&lt;recursion_limit&gt;&gt; &lt;&lt;between writing a TT muncher that can be called once to handle multiple things#red&gt;&gt; &lt;&lt;or a simpler macro that can be called multiple times to handle a single thing#green&gt;&gt; &lt;&lt;put the most frequently matched rules as early as possible#green&gt;&gt; &lt;&lt;normal repetition via * or +, that should be preferred#green&gt;&gt; &lt;&lt;to a TT muncher#red&gt;&gt; &lt;&lt;most likely if each invocation of the TT muncher would only process one token at a time#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/building-blocks/counting.html" id="692">
        <title>Counting - The Little Book of Rust Macros#__#&lt;&lt;Counting things in a macro is a surprisingly tricky#red&gt;&gt; &lt;&lt;simplest way is to use replacement with a repetition match#green&gt;&gt; &lt;&lt;crash the compiler with inputs of around 500 or so tokens#red&gt;&gt; &lt;&lt;AST, which will produce what is effectively a perfectly unbalanced binary tree 500+ levels deep#red&gt;&gt; &lt;&lt;As of rustc 1.2, the compiler has grievous performance problems when large numbers of integer literals of unknown type must undergo inference#red&gt;&gt; &lt;&lt;explicitly usize-typed literals#green&gt;&gt; &lt;&lt;help the compiler construct a shallow AST#green&gt;&gt; &lt;&lt;by constructing an array literal#green&gt;&gt; &lt;&lt;calling the len method#green&gt;&gt; &lt;&lt;count a set of mutually distinct identifiers#green&gt;&gt; &lt;&lt;enum Idents { $($idents,)* __CountIdentsLast }#green&gt;&gt; &lt;&lt;const COUNT: u32 = Idents::__CountIdentsLast as u32;#green&gt;&gt; &lt;&lt;COUNT@1#green&gt;&gt; &lt;&lt;recursive approach using bit operations:#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/macros/repeat.md" id="1236">
        <title>rust-by-example/repeat.md at master · rust-lang/rust-by-example#__#&lt;&lt;surrounding the matcher with $(...),+#green&gt;&gt; &lt;&lt;$($y:expr),+#green&gt;&gt; &lt;&lt;$($y),+#green&gt;&gt; &lt;&lt;find_min@2#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/macros/designators.md" id="1237">
        <title>rust-by-example/designators.md at master · rust-lang/rust-by-example#__#&lt;&lt;stringify!` macro converts an `ident`#green&gt;&gt; &lt;&lt;`stringify!` will convert the expression *as it is*#green&gt;&gt; &lt;&lt;blocks are expressions too#green&gt;&gt; &lt;&lt;a list of all the designators#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/building-blocks/counting.html" id="1238">
        <title>Counting - The Little Book of Rust Macros#__#&lt;&lt;Counting things in a macro is a surprisingly tricky#red&gt;&gt; &lt;&lt;simplest way is to use replacement with a repetition match#green&gt;&gt; &lt;&lt;crash the compiler with inputs of around 500 or so tokens#red&gt;&gt; &lt;&lt;AST, which will produce what is effectively a perfectly unbalanced binary tree 500+ levels deep#red&gt;&gt; &lt;&lt;As of rustc 1.2, the compiler has grievous performance problems when large numbers of integer literals of unknown type must undergo inference#red&gt;&gt; &lt;&lt;explicitly usize-typed literals#green&gt;&gt; &lt;&lt;help the compiler construct a shallow AST#green&gt;&gt; &lt;&lt;by constructing an array literal#green&gt;&gt; &lt;&lt;calling the len method#green&gt;&gt; &lt;&lt;count a set of mutually distinct identifiers#green&gt;&gt; &lt;&lt;enum Idents { $($idents,)* __CountIdentsLast }#green&gt;&gt; &lt;&lt;const COUNT: u32 = Idents::__CountIdentsLast as u32;#green&gt;&gt; &lt;&lt;COUNT@1#green&gt;&gt; &lt;&lt;recursive approach using bit operations:#green&gt;&gt;&lt;&lt;as (e.g. 0 as $ty, 1 as $ty, etc.#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/minutiae/fragment-specifiers.html" id="1239">
        <title>Fragment Specifiers - The Little Book of Rust Macros#__#&lt;&lt;any of Rust&apos;s item definitions#green&gt;&gt; &lt;&lt;not identifiers#red&gt;&gt; &lt;&lt;A Unit-Struct would be a simple one, as defining one requires a trailing semicolon.#red&gt;&gt; &lt;&lt;while the stmt fragment doesn&apos;t capture trailing semicolons#red&gt;&gt; &lt;&lt;it still emits them when required#green&gt;&gt; &lt;&lt;even if the statement is already followed by one&gt;&gt; &lt;&lt;semicolons on their own are already valid statements&gt;&gt; &lt;&lt;trailing semicolon of the struct Foo; item statement is being matched&gt;&gt; &lt;&lt;expressions get emitted back with a trailing semicolon#green&gt;&gt; &lt;&lt;unless the expression solely consists of only a block#red&gt;&gt; &lt;&lt;// _ &lt;- This is not an ident, it is a pattern#red&gt;&gt; &lt;&lt;$path:path#green&gt;&gt; &lt;&lt;G::&lt;eneri&gt;::C#green&gt;&gt; &lt;&lt;tt fragment is one of the most powerful fragments#green&gt;&gt; &lt;&lt;can match nearly anything#green&gt;&gt; &lt;&lt;while still allowing you to inspect the contents#blue&gt;&gt; &lt;&lt;metas! {#red&gt;&gt; &lt;&lt;doc comments: They are actually attributes in the form of #[doc=&quot;…&quot;]#green&gt;&gt; &lt;&lt;... is the actual comment string#green&gt;&gt; &lt;&lt;you can act on doc comments in macros!#green&gt;&gt; &lt;&lt;cannot, wrap it in a direct repetition#red&gt;&gt; &lt;&lt;Note this comma, since we cannot repeat a `vis` fragment on its own#red&gt;&gt; &lt;&lt;capturing with anything but#red&gt;&gt; &lt;&lt;ident, lifetime and tt#green&gt;&gt; &lt;&lt;will render the captured AST opaque#red&gt;&gt; &lt;&lt;impossible to further inspect it in future macro invocations.#red&gt;&gt; &lt;&lt;super::man#red&gt;&gt; &lt;&lt;path = &quot;home&quot;#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/macros-practical.html" id="1240">
        <title>A Practical Introduction - The Little Book of Rust Macros#__#&lt;&lt;restricts what tokens you&apos;re allowed to put after a matcher#red&gt;&gt; &lt;&lt;Typically, this comes up when trying to match expressions or statements&gt;&gt; &lt;&lt;can only be followed by one of =&gt;, ,, and ;#red&gt;&gt; &lt;&lt;limitation of the macro_rules#red&gt;&gt; &lt;&lt;second comma#red&gt;&gt; &lt;&lt;switch out the matchers used when you invoke a macro, but in a more limited#red&gt;&gt; &lt;&lt;macro invoked as { ... } or ( ... ); will always be parsed as an item#red&gt;&gt; &lt;&lt;like a struct or fn#red&gt;&gt; &lt;&lt;important when using macros in a function body#green&gt;&gt; &lt;&lt;helps disambiguate between &quot;parse like an expression&quot; and &quot;parse like a statement&quot;#green&gt;&gt; &lt;&lt;rustc +nightly -Zunpretty=expanded recurrence.rs#green&gt;&gt; &lt;&lt;#![feature(no_std)]#green&gt;&gt; core::mem::swap&lt;&lt;std::mem::swap#green&gt;&gt; &lt;&lt;errors about unexpected tokens#red&gt;&gt; &lt;&lt;try changing the order of the rules#green&gt;&gt; &lt;&lt;($e:expr) =&gt;@4#red&gt;&gt; &lt;&lt;let a = 42i;#red&gt;&gt; &lt;&lt;($a:ident, $e:expr) =&gt;#green&gt;&gt; &lt;&lt;let $a = 42;#green&gt;&gt; &lt;&lt;using_a!(a, a / 10)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/patterns/internal-rules.html" id="1241">
        <title>Internal Rules - The Little Book of Rust Macros#__#&lt;&lt;has started to become widespread#green&gt;&gt; &lt;&lt;unify multiple macro_rules! macros into one#green&gt;&gt; &lt;&lt;or to make it easier to read and write TT Munchers#green&gt;&gt; &lt;&lt;internal rules is that they can hurt compile times#red&gt;&gt; &lt;&lt;If a macro has many rules#red&gt;&gt; &lt;&lt;@as_expr-style identifier makes rules longer#red&gt;&gt; &lt;&lt;for best performance, avoiding internal rules#red&gt;&gt; &lt;&lt;Avoiding them often makes complex macros easier to read#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/minutiae/import-export.html" id="1242">
        <title>Import and Export - The Little Book of Rust Macros#__#&lt;&lt;can only #[macro_use] an external crate from the root module#red&gt;&gt; &lt;&lt;when importing macro_rules! macros from an external crate, you can control which macros you import#green&gt;&gt; &lt;&lt;// Import *only* the `X!` macro&gt;&gt; &lt;&lt;#[macro_use(X)] extern crate macs;#green&gt;&gt; &lt;&lt;$crate::Y! to refer to a particular macro within your crate&gt;&gt; &lt;&lt;always use absolute paths to non-macro names#green&gt;&gt; &lt;&lt;including names in the standard library#green&gt;&gt; &lt;&lt;Because crates can be renamed#red&gt;&gt; &lt;&lt;special substitution variable available: $crate#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/patterns/repetition-replacement.html" id="1243">
        <title>Repetition Replacement - The Little Book of Rust Macros#__#&lt;&lt;$_t:tt#green&gt;&gt; &lt;&lt;$sub:expr&gt;&gt; &lt;&lt;=&gt; {$sub}&gt;&gt; &lt;&lt;matched repetition sequence is simply discarded#green&gt;&gt; &lt;&lt;the variable being used to instead drive some repeated pattern#green&gt;&gt; &lt;&lt;related to the input only in terms of length#green&gt;&gt; &lt;&lt;don&apos;t care what the types are&gt;&gt; &lt;&lt;only how many#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html" id="1244">
        <title>Or patterns in macro-rules - The Edition Guide</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/macros-methodical.html" id="1245">
        <title>A Methodical Introduction - The Little Book of Rust Macros#__#&lt;&lt;at least one rule&gt;&gt; &lt;&lt;can omit the semicolon after the last rule#green&gt;&gt; &lt;&lt;function-like macros can be invoked with any kind of parentheses as well#green&gt;&gt; &lt;&lt;but invocations with { .. } and ( ... );, notice the trailing semicolon, are special in that their expansion will always be parsed as an item.#red&gt;&gt; &lt;&lt;rules one by one, in declaration order&gt;&gt; &lt;&lt;Metavariable Expressions&gt;&gt; &lt;&lt;#![feature(macro_metavar_expr)]&gt;&gt; &lt;&lt;$$: Expands to a single $#green&gt;&gt; &lt;&lt;optional separator#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/quote/blob/31c3be473d0457e29c4f47ab9cff73498ac804a7/src/lib.rs#L664-L746" id="1358">
        <title>quote/lib.rs at 31c3be473d0457e29c4f47ab9cff73498ac804a7 · dtolnay/quote</title>
      </bookmark>
      <bookmark href="https://github.com/lukaslueg/macro_railroad" id="1359">
        <title>lukaslueg/macro_railroad: A library to generate syntax diagrams for Rust macros.</title>
      </bookmark>
      <bookmark href="https://lukaslueg.github.io/macro_railroad_wasm_demo/" id="1360">
        <title>Syntax diagram generator</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rfcs/3086-macro-metavar-expr.html" id="1361">
        <title>3086-macro-metavar-expr - The Rust RFC Book#__#&lt;&lt;${ignore(ident)} metavariable acts as if ident was used for the purposes of repetition, but expands to nothing&gt;&gt; &lt;&lt;$( ${ignore(x)} a )*#green&gt;&gt; &lt;&lt;will expand@2#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/9m259y/how_create_a_macro_that_build_match_arms/" id="1362">
        <title>How create a macro that build match arms? : rust#__#&lt;&lt;Try $y:path#green&gt;&gt; &lt;&lt;rather than $y:ty.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/using-declarative-macros-in-match/58158/2" id="1363">
        <title>Using declarative macros in match - help - The Rust Programming Language Forum#__#&lt;&lt;why some of these limitations&gt;&gt; &lt;&lt;rust macros don&apos;t require tricks like wrapping the output in parentheses#green&gt;&gt; &lt;&lt;to be correctly nested after expansion#green&gt;&gt; &lt;&lt;macro calls are embedded into the AST before they are expanded#red&gt;&gt; &lt;&lt;If a macro was allowed to produce anything, then there would be ambiguities#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://adventures.michaelfbryan.com/posts/non-trivial-macros/" id="1364">
        <title>Writing Non-Trivial Macros in Rust · Michael-F-Bryan#__#&lt;&lt;handling &amp;self or &amp;mut self&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/patterns/push-down-acc.html" id="1365">
        <title>Push-down Accumulation - The Little Book of Rust Macros#__#&lt;&lt;All syntax extensions in Rust must result in a complete, supported syntax element#red&gt;&gt; &lt;&lt;impossible to have a syntax extension expand to a partial construct#red&gt;&gt; &lt;&lt;put the accumulator at the end of rules#green&gt;&gt; &lt;&lt;rather than the beginning.#red&gt;&gt; &lt;&lt;large difference to compile times#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/std/macro.concat_idents.html" id="1366">
        <title>concat_idents in std - Rust#__#&lt;&lt;cannot capture local#red&gt;&gt; &lt;&lt;macros are only allowed in item, statement or expression position#green&gt;&gt; &lt;&lt;while you may use this macro for referring to existing variables, functions or modules etc#green&gt;&gt; &lt;&lt;cannot define a new one#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/dtolnay/paste" id="1367">
        <title>dtolnay/paste: Macros for all your token pasting needs#__#&lt;&lt;[&lt;get_ $field&gt;]#green&gt;&gt; &lt;&lt;Case conversion&gt;&gt; &lt;&lt;$var:snake&gt;&gt; &lt;&lt;$var:camel&gt;&gt; &lt;&lt;compose#green&gt;&gt; &lt;&lt;$var:snake:upper#green&gt;&gt; &lt;&lt;Pasting documentation#green&gt;&gt; &lt;&lt;Within the paste!@1&gt;&gt; &lt;&lt;arguments to a #[doc ...] attribute are implicitly concatenated#green&gt;&gt; &lt;&lt;&quot;Create a new `&quot; $ret &quot;` object.&quot;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/eager/latest/eager/macro.eager.html" id="1491">
        <title>eager::eager - Rust#__#&lt;&lt;Debugging an eagerly expanded macro is very difficult#red&gt;&gt; &lt;&lt;error messages the compiler will emit are exponentially more cryptic#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="260">
      <title>macro_rules_2.0</title>
      <bookmark href="https://veykril.github.io/tlborm/decl-macros/macros2.html" id="693">
        <title>Macros 2.0 - The Little Book of Rust Macros#__#&lt;&lt;#![feature(decl_macro)]&gt;&gt; &lt;&lt;macro replace_expr($_t:tt $sub:expr) {&gt;&gt; &lt;&lt;macro count_tts {&gt;&gt; &lt;&lt;macros have two different forms&gt;&gt; &lt;&lt;rule separator is a ,#green&gt;&gt; &lt;&lt;instead of a ;#red&gt;&gt; &lt;&lt;shorthand for macros that only have one rule#green&gt;&gt; &lt;&lt;Unlike with macro_rules macros, which are textually scoped and require #[macro_export]#red&gt;&gt; &lt;&lt;macro macros behave like proper rust items#green&gt;&gt; &lt;&lt;can properly qualify them with visibility specifiers like pub, pub(crate), pub(in path)#green&gt;&gt; &lt;&lt;Unlike macro_rules which have mixed site hygiene#red&gt;&gt; &lt;&lt;macro have definition site hygiene#green&gt;&gt; &lt;&lt;not leak identifiers outside of their invocation#red&gt;&gt; &lt;&lt;may be plans to allow escaping hygiene&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="261">
      <title>Procedural proc macros</title>
      <folder id="694">
        <title>debug proc macros</title>
        <bookmark href="https://www.reddit.com/r/rust/comments/ixvbl7/how_do_you_debug_while_developing_proc_macros/" id="1051">
          <title>(4) How do you debug while developing proc macros? : rust#__#&lt;&lt;Result&lt;T, syn::Error&gt;&gt;&gt; &lt;&lt;syn::Error::to_compile_error()&gt;&gt; &lt;&lt;keep your macros as slim#green&gt;&gt; &lt;&lt;simple#green&gt;&gt; &lt;&lt;panic, just return a compiler error attached#green&gt;&gt; &lt;&lt;proc-macro2#green&gt;&gt; &lt;&lt;Err::&lt;(), _&gt;(&quot;some error&quot;).expect(&amp;line!().to_string());#green&gt;&gt; &lt;&lt;help: message: 166: &quot;some error&quot;#green&gt;&gt; &lt;&lt;66 is the line I wrote it on#green&gt;&gt; &lt;&lt;std::panic::Location::caller and the track_caller&gt;&gt; &lt;&lt;#[track_caller]#green&gt;&gt; &lt;&lt;change one syn::parse(...).unwrap()&gt;&gt; &lt;&lt;to syn::parse(...).expect(&quot;1&quot;)#green&gt;&gt; &lt;&lt;the next to expect(&quot;2&quot;), etc.#green&gt;&gt; &lt;&lt;the panic message will tell you which call to syn::parse() failed#green&gt;&gt; &lt;&lt;job done without generating output in the happy case#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://ferrous-systems.com/blog/testing-proc-macros/" id="1052">
          <title>Structuring, testing and debugging procedural macro crates - Ferrous Systems#__#&lt;&lt;dbg!(input)&gt;&gt; &lt;&lt;#right&gt;&gt; &lt;&lt;contracts crate@1#green&gt;&gt; &lt;&lt;proc-macro-error crate#green&gt;&gt; &lt;&lt;rustc-like abort! API&gt;&gt; &lt;&lt;instead of the usual Result#red&gt;&gt; &lt;&lt;last &apos;codegen&apos; stage#red&gt;&gt; &lt;&lt;hard to debug#red&gt;&gt; &lt;&lt;keeping it as simple#green&gt;&gt; &lt;&lt;cargo t --lib -- codegen::tests&gt;&gt; &lt;&lt;RUST_BACKTRACE won&apos;t show you the backtrace#red&gt;&gt; &lt;&lt;Your debugging tool#green&gt;&gt; &lt;&lt;seemingly trivial unit test#green&gt;&gt; &lt;&lt;produce Rust code that doesn&apos;t compile#red&gt;&gt; &lt;&lt;error message will often have subpar span#red&gt;&gt; &lt;&lt;October 19, 2021&gt;&gt; &lt;&lt;Rust-Analyzer&apos;s &apos;expand macro recursively&apos;#green&gt;&gt; &lt;&lt;cargo-expand tool, which uses the unstable -Z unpretty#green&gt;&gt; &lt;&lt;expands the whole file&gt;&gt; &lt;&lt;cargo expand --test precondition&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/rust-lang/rust-analyzer/issues/12494" id="1053">
          <title>How to catch proc-macro output in rust-analyzer · Issue #12494 · rust-lang/rust-analyzer#__#&lt;&lt;cargo will prevent you from publishing a crate that modifies the source directory#red&gt;&gt; &lt;&lt;Your crate can be published&gt;&gt; &lt;&lt;but users of proc macros that use your crate can&apos;t be#red&gt;&gt; &lt;&lt;isn&apos;t published as a proc-macro&gt;&gt; &lt;&lt;instead&gt;&gt; &lt;&lt;proc-macro utility&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="695">
        <title>watt</title>
        <bookmark href="https://github.com/dtolnay/watt/issues/8" id="1054">
          <title>Tooling for verifying wasm was compiled...</title>
        </bookmark>
        <bookmark href="https://github.com/jakobhellermann/watt-contrib" id="1055">
          <title>jakobhellermann/watt-contrib#__#&lt;&lt;advantage, that their only dependency is the watt#green&gt;&gt; &lt;&lt;saving compile time over compiling syn, quote#red&gt;&gt; &lt;&lt;[patch.crates-io]#green&gt;&gt; &lt;&lt;tokio-macros = { git = &quot;https://github.com/jakobhellermann/watt-contrib&quot; }#green&gt;&gt; &lt;&lt;thiserror-impl = { git = &quot;https://github.com/jakobhellermann/watt-contrib&quot; }#green&gt;&gt; &lt;&lt;to know why you depend on syn, run cargo tree -e no-dev -i syn#green&gt;&gt; &lt;&lt;cargo watt verify ctor/src/ctor.wasm --crate ctor#green&gt;&gt; &lt;&lt;download ctor from crates.io#green&gt;&gt; &lt;&lt;cargo watt build --crate $crate#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/jakobhellermann/cargo-watt" id="1056">
          <title>jakobhellermann/cargo-watt: cargo subcommand for building proc-macro crates with web assembly</title>
        </bookmark>
      </folder>
      <folder id="696">
        <title>with rust-analyzer</title>
        <bookmark href="https://github.com/rust-lang/rust-analyzer/issues/11859" id="1057">
          <title>How to make attribute proc macros more user-friendly with RA · Issue #11859 · rust-lang/rust-analyzer#__#config: rust-analyzer.procMacro.ignored&lt;&lt;#11193&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="697">
        <title>without syn</title>
        <bookmark href="https://veykril.github.io/tlborm/proc-macros/methodical/function-like.html" id="1058">
          <title>Function-like - The Little Book of Rust Macros</title>
        </bookmark>
        <bookmark href="https://veykril.github.io/tlborm/proc-macros/methodical/derive.html" id="1059">
          <title>Derive - The Little Book of Rust Macros#__#&lt;&lt;#[proc_macro_derive(TlbormDerive)]&gt;&gt; &lt;&lt;#[proc_macro_derive(TlbormDerive, attributes(tlborm_helper))]&gt;&gt; &lt;&lt;#[derive(TlbormDerive)]@2&gt;&gt; &lt;&lt;#[tlborm_helper]&gt;&gt; &lt;&lt;#[derive(TlbormDerive)]@3&gt;&gt; &lt;&lt;#[tlborm_helper]@1&gt;&gt; &lt;&lt;#[tlborm_helper] field: u32@1&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/proc_macro/struct.TokenStream.html" id="1060">
          <title>TokenStream in proc_macro - Rust</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/proc_macro/enum.TokenTree.html" id="1061">
          <title>TokenTree in proc_macro - Rust</title>
        </bookmark>
      </folder>
      <folder id="698">
        <title>Workshop</title>
        <bookmark href="https://github.com/dtolnay/proc-macro-workshop" id="1062">
          <title>dtolnay/proc-macro-workshop: Learn to write Rust procedural macros  [Rust Latam conference, Montevideo Uruguay, March 2019]#__#&lt;&lt;each of these projects goes into more depth&gt;&gt; &lt;&lt;especially if many of those fields are optional&gt;&gt; &lt;&lt;backward compatibly over time&gt;&gt; &lt;&lt;setter methods each receive and return &amp;mut self#green&gt;&gt; &lt;&lt;let command = Command::builder()#green&gt;&gt; &lt;&lt;&quot;cargo&quot;.to_owned()#green&gt;&gt; &lt;&lt;#[builder(each = &quot;arg&quot;)]#green&gt;&gt; &lt;&lt;.arg(#green&gt;&gt; &lt;&lt;.arg(@1#green&gt;&gt; &lt;&lt;.build()&gt;&gt; &lt;&lt;.unwrap();#green&gt;&gt; &lt;&lt;#[debug = &quot;0b{:08b}&quot;]#green&gt;&gt; &lt;&lt;bitmask: 0b00011100#green&gt;&gt; &lt;&lt;inferring trait bounds on generic parameters of trait impls#green&gt;&gt; &lt;&lt;limitations of derive&apos;s ability to emit universally correct trait bounds#red&gt;&gt; &lt;&lt;compile-time loop&gt;&gt; &lt;&lt;seq!(N in 0..512 {#green&gt;&gt; &lt;&lt;pub enum Processor {#green&gt;&gt; &lt;&lt;#(#green&gt;&gt; &lt;&lt;Cpu#N,#green&gt;&gt; &lt;&lt;)*#green&gt;&gt; &lt;&lt;detect unsorted variants at compile time#green&gt;&gt; &lt;&lt;to keep enum variants in sorted#green&gt;&gt; &lt;&lt;private byte array&gt;&gt; &lt;&lt;getter and setter methods for each field&gt;&gt; &lt;&lt;total number of bits N is required to be a multiple of 8#red&gt;&gt; &lt;&lt;compile-time assertions that require type information, by leveraging the trait#green&gt;&gt; https://github.com/dtolnay/remain&lt;&lt;macro: #[sorted]@1&gt;&gt;&lt;&lt;eprintln!(&quot;TOKENS: {}&quot;, tokens);&gt;&gt; &lt;&lt;eprintln!(&quot;INPUT: {:#?}&quot;, syntax_tree);&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://www.youtube.com/watch?v=KVWHT1TAirU" id="1063">
          <title>Procedural Macros in Rust (part 2) - YouTube</title>
        </bookmark>
        <bookmark href="https://www.youtube.com/watch?v=geovSK3wMB8" id="1064">
          <title>Procedural Macros in Rust (part 1) - YouTube</title>
        </bookmark>
        <bookmark href="https://github.com/jonhoo/proc-macro-workshop" id="1065">
          <title>jonhoo/proc-macro-workshop: Learn to write Rust procedural macros  [Rust Latam conference, Montevideo Uruguay, March 2019]</title>
        </bookmark>
        <bookmark href="https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/" id="1066">
          <title>Proc Macro Workshop: derive(Builder) [Part 1] – jverkamp.com</title>
        </bookmark>
      </folder>
      <folder id="699">
        <title>zOther</title>
        <bookmark href="https://github.com/fkohlgrueber/proc-macro-talk" id="1067">
          <title>fkohlgrueber/proc-macro-talk</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/reference/procedural-macros.html" id="1068">
          <title>Procedural Macros - The Rust Reference#__#&lt;&lt;file access#red&gt;&gt; &lt;&lt;security#red&gt;&gt; &lt;&lt;two ways of reporting errors#green&gt;&gt; &lt;&lt;first is to panic#green&gt;&gt; &lt;&lt;second is to emit a compile_error macro invocation#green&gt;&gt; &lt;&lt;TokenStream type@1#green&gt;&gt; &lt;&lt;unlike Vec&lt;TokenTree&gt;#red&gt;&gt; &lt;&lt;is cheap to clone#green&gt;&gt; &lt;&lt;Procedural macros are unhygienic#red&gt;&gt; &lt;&lt;using absolute paths to items in libraries#green&gt;&gt; &lt;&lt;::std::option::Option#green&gt;&gt; &lt;&lt;instead of Option#red&gt;&gt; &lt;&lt;or by ensuring that generated functions have names that are unlikely to clash#green&gt;&gt; &lt;&lt;__internal_foo#green&gt;&gt; &lt;&lt;instead of foo#red&gt;&gt; &lt;&lt;&quot;fn answer() -&gt; u32 { 42 }&quot;.parse().unwrap()#green&gt;&gt; &lt;&lt;output TokenStream replaces the entire macro invocation#green&gt;&gt; &lt;&lt;can create new items given the token stream of a struct, enum, or union#green&gt;&gt; &lt;&lt;can also define derive macro helper attributes.#green&gt;&gt; &lt;&lt;appended&gt;&gt; &lt;&lt;to the module or block that the item from the input TokenStream is in#green&gt;&gt; &lt;&lt;appends a function answer&gt;&gt; &lt;&lt;attributes key in the proc_macro_derive#green&gt;&gt; &lt;&lt;first TokenStream is the delimited token tree following the attribute&apos;s name#green&gt;&gt; &lt;&lt;If the attribute is written as a bare attribute name, the attribute TokenStream is empty#green&gt;&gt; &lt;&lt;second TokenStream is the rest of the item including other attributes#green&gt;&gt; &lt;&lt;returned TokenStream replaces the item with an arbitrary number of items#green&gt;&gt; &lt;&lt;multiple =&gt; tokens#green&gt;&gt; &lt;&lt;#[show_streams { delimiters }]#green&gt;&gt; &lt;&lt;&quot;fn answer() -&gt; u32 { 42 }&quot;.parse().unwrap()@1#green&gt;&gt; &lt;&lt;attributes(helper)#green&gt;&gt; &lt;&lt;#[helper]#green&gt;&gt; &lt;&lt;Derive macros can add additional attributes#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/trait/derive.md" id="1069">
          <title>rust-by-example/derive.md at master · rust-lang/rust-by-example#__#&lt;&lt;Eq, PartialEq, Ord, PartialOrd.#green&gt;&gt; &lt;&lt;let &amp;Inches(inches) = self;#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://docs.rs/syn/1.0.68/syn/macro.braced.html" id="1070">
          <title>syn::braced - Rust</title>
        </bookmark>
        <bookmark href="https://docs.rs/syn/1.0.68/syn/parse/struct.ParseBuffer.html" id="1071">
          <title>syn::parse::ParseBuffer - Rust</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/proc_macro/struct.Ident.html" id="1072">
          <title>Ident in proc_macro - Rust#__#&lt;&lt;including keywords&gt;&gt; &lt;&lt;self or fn&gt;&gt; &lt;&lt;including keywords, e.g. fn&gt;&gt; &lt;&lt;Keywords which are usable in path segments (e.g. self, super)#red&gt;&gt; &lt;&lt;not supported#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://mbuffett.com/posts/incomplete-macro-walkthrough/" id="1073">
          <title>An Incomplete Explanation of the Proc Macro That Saved Me 4000 Lines of Rust :: A blog — Just a blog</title>
        </bookmark>
        <bookmark href="https://developerlife.com/2022/03/30/rust-proc-macro/" id="1074">
          <title>Guide to Rust procedural macros | developerlife.com</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/52910783/is-it-possible-to-store-state-within-rusts-procedural-macros" id="1075">
          <title>Is it possible to store state within Rust&apos;s procedural macros? - Stack Overflow#__#&lt;&lt;to serialize and store state on the filesystem&gt;&gt; &lt;&lt;OUT_DIR#green&gt;&gt; &lt;&lt;by exporting the variable from a build script&gt;&gt; &lt;&lt;will allow cargo to automatically clean up the state for you when cargo clean#green&gt;&gt; &lt;&lt;will also play nice with security tools that sandbox cargo#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://fasterthanli.me/articles/proc-macro-support-in-rust-analyzer-for-nightly-rustc-versions" id="1076">
          <title>Proc macro support in rust-analyzer for nightly rustc versions#__#&lt;&lt;without incremental&gt;&gt; &lt;&lt;reduce the number of files&gt;&gt; &lt;&lt;CARGO_INCREMENTAL=0 cargo check&gt;&gt; &lt;&lt;.rlib, which, at least on this platform is an &quot;ar archive&quot;&gt;&gt; &lt;&lt;llvm-nm -C target/debug/deps/liblhash-83b88ad4daff567f.rlib&gt;&gt; &lt;&lt;pm, our proc-macro crate&gt;&gt; &lt;&lt;.so, which on Linux is a shared object (called a dynamic library / dylib on other platforms)&gt;&gt; &lt;&lt;llvm-nm -C target/debug/deps/libpm-29e65e9cc9cd67f3.so | grep proc_macro | head&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://towardsdatascience.com/nine-rules-for-creating-procedural-macros-in-rust-595aa476a7ff" id="1323">
          <title>Nine Rules for Creating Procedural Macros in Rust | by Carl M. Kadie | Towards Data Science</title>
        </bookmark>
        <bookmark href="https://www.freecodecamp.org/news/procedural-macros-in-rust/" id="1324">
          <title>Procedural Macros in Rust – A Handbook for Beginners</title>
        </bookmark>
      </folder>
    </folder>
    <folder id="262">
      <title>zOther</title>
      <bookmark href="https://github.com/TeXitoi/structopt" id="700">
        <title>TeXitoi/structopt: Parse command line arguments by defining a struct.</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/std/macro.format.html" id="701">
        <title>format in std - Rust#__#&lt;&lt;format!(&quot;@2&gt;&gt; &lt;&lt;y = {y}&quot;#green&gt;&gt; &lt;&lt;y = 30)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/macro.concat.html" id="702">
        <title>std::concat - Rust</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/quote" id="703">
        <title>quote - crates.io: Rust Package Registry#__#&lt;&lt;Within the quote! macro, interpolation is done with #var#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/macros/syntax/source-analysys.html" id="704">
        <title>Source Analysis - The Little Book of Rust Macros#__#&lt;&lt;In almost all cases, self is a keyword&gt;&gt; &lt;&lt;but it is possible for it to be treated as an identifier#red&gt;&gt; &lt;&lt;(along with much cursing)#red&gt;&gt; &lt;&lt;keywords includes some suspicious entries such as yield and macro&gt;&gt; &lt;&lt;reserved for future#red&gt;&gt; &lt;&lt;&lt;-#red&gt;&gt; &lt;&lt;:: is a distinct token&gt;&gt; &lt;&lt;not simply two adjacent : tokens#red&gt;&gt; &lt;&lt;all multi-character symbol tokens&gt;&gt; &lt;&lt;AST contains the structure of the entire program&gt;&gt; &lt;&lt;purely lexical information#red&gt;&gt; &lt;&lt;no way of knowing what a is, or even where it comes from#red&gt;&gt; &lt;&lt;after the AST has been constructed that macros are processed#blue&gt;&gt; &lt;&lt;The only basic tokens that are not leaves are the &quot;grouping&quot; tokens: (...), [...], and {...}&gt;&gt; &lt;&lt;no relationship to the AST#red&gt;&gt; &lt;&lt;distinction between the AST and token trees#red&gt;&gt; &lt;&lt;writing macros, you have to deal with both as distinct things#red&gt;&gt; &lt;&lt;impossible to have an unpaired paren, bracket or brace#red&gt;&gt; &lt;&lt;nor is it possible to have incorrectly nested groups in a token tree#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/std/macro.concat_idents.html" id="705">
        <title>concat_idents in std - Rust#__#&lt;&lt;cannot capture local#red&gt;&gt; &lt;&lt;macros are only allowed in item, statement or expression position#green&gt;&gt; &lt;&lt;while you may use this macro for referring to existing variables, functions or modules etc#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://veykril.github.io/tlborm/macros/syntax/ast.html" id="706">
        <title>Macros in the Ast - The Little Book of Rust Macros#__#&lt;&lt;macro processing in Rust happens after the construction of the AST#green&gt;&gt; &lt;&lt;syntax used to invoke a macro must be a proper part of the language#red&gt;&gt; &lt;&lt;&quot;syntax extension&quot; forms&gt;&gt; &lt;&lt;# [ $arg ]&gt;&gt; &lt;&lt;# ! [ $arg ]&gt;&gt; &lt;&lt;$name ! $arg#green&gt;&gt; &lt;&lt;$name ! $arg0 $arg1#red&gt;&gt; &lt;&lt;fourth is essentially a variation which is not available to macros#red&gt;&gt; &lt;&lt;only case where this form is used at all is with macro_rules! itself#red&gt;&gt; &lt;&lt;argument of a syntax extension invocation is&gt;&gt; &lt;&lt;single, non-leaf token tree; (...), [...], or {...}#green&gt;&gt; &lt;&lt;parser does not assume anything#red&gt;&gt; &lt;&lt;remembers the tokens&gt;&gt; &lt;&lt;but doesn&apos;t try to understand#red&gt;&gt; &lt;&lt;even invalid Rust#red&gt;&gt; &lt;&lt;Macros (really, syntax extensions in general) are parsed as part of the abstract syntax tree.#green&gt;&gt; &lt;&lt;macros can appear in place of#green&gt;&gt; &lt;&lt;Patterns@1#green&gt;&gt; &lt;&lt;Statements#green&gt;&gt; &lt;&lt;Expressions#green&gt;&gt; &lt;&lt;Items(this includes impl Items)#green&gt;&gt; &lt;&lt;Types#green&gt;&gt; &lt;&lt;Some things not on this list:#red&gt;&gt; &lt;&lt;Identifiers@1#red&gt;&gt; &lt;&lt;Match arms#red&gt;&gt; &lt;&lt;Struct fields#red&gt;&gt; &lt;&lt;absolutely, definitely no way to use macros in any position not on the first list.#red&gt;&gt;&lt;&lt;first two are attributes&gt;&gt; &lt;&lt;macro attributes and derive attributes&gt;&gt; &lt;&lt;latter two can be implemented with the second macro system that Rust offers, procedural macros#red&gt;&gt; &lt;&lt;can only appear in positions where they are explicitly supported#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/rust-explorer-playground-now-supports-rust-analyzer/88803/14" id="707">
        <title>Rust Explorer playground now supports Rust Analyzer - announcements - The Rust Programming Language Forum#__#&lt;&lt;if having to set up cargo expand on the server is deemed to be a maintainability burden#red&gt;&gt; &lt;&lt;manually expand macros#green&gt;&gt; &lt;&lt;cargo rustc -- -Zunpretty=expanded | rustfmt#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/trouble-with-z-macro-backtrace/61289/3" id="708">
        <title>Trouble with -Z macro-backtrace - help - The Rust Programming Language Forum#__#&lt;&lt;RUSTFLAGS=-Zmacro-backtrace cargo@1#blue&gt;&gt; &lt;&lt;as simple as check@1&gt;&gt; &lt;&lt;then you can@1#green&gt;&gt; &lt;&lt;cargo rustc -- -Zmacro-backtrace # --cfg test # (to check the unit tests)#blue&gt;&gt; &lt;&lt;faster to compile#green&gt;&gt; &lt;&lt;won&apos;t change the RUSTFLAGS used to compile the dependencies#red&gt;&gt; &lt;&lt;-Z macro-backtrace is an unstable&gt;&gt; &lt;&lt;with no nightly#red&gt;&gt; &lt;&lt;super unstable RUSTC_BOOTSTRAP=1#red&gt;&gt; &lt;&lt;temporarily imbue your current cargo toolchain with unstable#green&gt;&gt; &lt;&lt;macro debugging tips#green&gt;&gt; &lt;&lt;complex recursive macro#red&gt;&gt; &lt;&lt;even, just a chain of macro#red&gt;&gt; &lt;&lt;problematic invocation in the middle#red&gt;&gt; &lt;&lt;trace_macros!(true); before the problematic macro invocation#blue&gt;&gt; &lt;&lt;expands to syntactically invalid#red&gt;&gt; &lt;&lt;trace_macros! can still be useful#blue&gt;&gt; &lt;&lt;log_syntax! { … }#blue&gt;&gt; &lt;&lt;if it is a proc-macro&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://freedium.cfd/https://medium.com/@luishrsoares/exploring-rust-attributes-in-depth-ac172993d568" id="709">
        <title>Exploring Rust Attributes in Depth | by Luis Soares - Freedium#__#&lt;&lt;cfg_attr&gt;&gt; &lt;&lt;crate_name@1&gt;&gt; &lt;&lt;crate_type@1&gt;&gt; &lt;&lt;#[deprecated(since = &quot;1.1.0&quot;, note =#green&gt;&gt; &lt;&lt;derive ten different traits:&gt;&gt; &lt;&lt;Default&gt;&gt; &lt;&lt;Drop&gt;&gt; &lt;&lt;Hash&gt;&gt; &lt;&lt;Debug@3&gt;&gt; &lt;&lt;#[doc = &quot;&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="57">
    <title>Memory</title>
    <bookmark href="https://crates.io/crates/fallible_collections" id="263">
      <title>Fallible Collections#__#&lt;&lt;use this with try_clone_derive crate wich derive TryClone for your own types#green&gt;&gt; &lt;&lt;use fallible_collections::FallibleBox;#green&gt;&gt; &lt;&lt;let mut a = &lt;Box&lt;_&gt; as FallibleBox&lt;_&gt;&gt;::try_new(5).unwrap();#green&gt;&gt; &lt;&lt;let a: Vec&lt;Vec&lt;u8&gt;&gt; = try_vec![try_vec![42; 10].unwrap(); 100].unwrap();#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://vojtechkral.github.io/blag/rust-drop-order/" id="264">
      <title>Drop order in Rust: It&apos;s tricky - vojtechkral.github.io</title>
    </bookmark>
    <bookmark href="https://deepu.tech/memory-management-in-rust/" id="265">
      <title>🚀 Visualizing memory management in Rust | Technorage#__#&lt;&lt;one Stack per thread#red&gt;&gt; &lt;&lt;size of the value is unknown, i.e Structs like String&gt;&gt; &lt;&lt;grows in size over time&gt;&gt; &lt;&lt;any other dynamic&gt;&gt; &lt;&lt;When a box goes out of scope, its destructor is called, the inner object is destroyed&gt;&gt; &lt;&lt;memory on the Heap is freed&gt;&gt; &lt;&lt;Unlike Garbage collected languages, once the main process is complete, the objects on the Heap are destroyed as well#red&gt;&gt; &lt;&lt;Stack as you can see is automatically managed and is done so by the operating system#green&gt;&gt; &lt;&lt;rather than Rust itself#red&gt;&gt; &lt;&lt;Heap, on the other hand, is not automatically managed by the OS#red&gt;&gt; &lt;&lt;change the ownership from one variable to another and is called a move#blue&gt;&gt; &lt;&lt;when passing a variable into a function or when creating a new assignment#blue&gt;&gt; &lt;&lt;can pass a variable by either value or by reference&gt;&gt; &lt;&lt;passing a variable by reference is called borrowing#blue&gt;&gt; &lt;&lt;can have only one owner for a resource#blue&gt;&gt; &lt;&lt;borrow a resource to use it without taking ownership#green&gt;&gt; &lt;&lt;Unlike pointers which are references that only borrow data, smart pointers own the data they point to.#blue&gt;&gt; &lt;&lt;Box, String and Vec are examples of smart pointers#blue&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.crowdstrike.com/blog/dealing-with-out-of-memory-conditions-in-rust/" id="266">
      <title>How to Deal with Out-of-memory Conditions in Rust | CrowdStrike#__#&lt;&lt;how Rust deals with out-of-memory (OOM)#red&gt;&gt; &lt;&lt;might expect OOM events to result in a panic, but they don’t#red&gt;&gt; &lt;&lt;OOM events result in Rust immediately terminating the process without unwinding#red&gt;&gt; &lt;&lt;That RFC is a goldmine#green&gt;&gt; &lt;&lt;Early on in Rust’s history#red&gt;&gt; &lt;&lt;this stance is unsustainable#red&gt;&gt; &lt;&lt;some, but not all, are available on nightly#green&gt;&gt; &lt;&lt;may be unsafe code in the standard library or published crates that assumes allocation never fails#red&gt;&gt; &lt;&lt;C++ pieces can all recover from OOM#green&gt;&gt; &lt;&lt;try_* methods outlined in the RFC#green&gt;&gt; &lt;&lt;also third-party#green&gt;&gt; &lt;&lt;fallible_collections#green&gt;&gt; &lt;&lt;hashbrown (which is the standard library HashMap/HashSet#green&gt;&gt; &lt;&lt;exposes a try_reserve#green&gt;&gt; &lt;&lt;replacing the global allocator will affect allocations made by the test framework itself#red&gt;&gt; &lt;&lt;OOM injection test into its own test file with just a single #[test]#green&gt;&gt; &lt;&lt;tackle the multithreading concern#green&gt;&gt; &lt;&lt;Restricting our OOM injection to just call sites inside our library#green&gt;&gt; &lt;&lt;AtomicBool to enable/disable OOM injection#green&gt;&gt; &lt;&lt;yet another reason to restrict this to a single thread!#red&gt;&gt; &lt;&lt;unsafe impl GlobalAlloc for OomAllocator {#green&gt;&gt; &lt;&lt;unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8 {#green&gt;&gt; &lt;&lt;System.alloc(layout)#green&gt;&gt; &lt;&lt;unsafe fn dealloc(&amp;self, ptr: *mut u8, layout: Layout) {#green&gt;&gt; &lt;&lt;System.dealloc(ptr, layout)#green&gt;&gt; &lt;&lt;return ptr::null_mut();#red&gt;&gt; &lt;&lt;#[global_allocator]#green&gt;&gt; &lt;&lt;static GLOBAL: OomAllocator = OomAllocator {#green&gt;&gt; &lt;&lt;only have one #[test]#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/mem/fn.forget.html" id="267">
      <title>forget in core::mem - Rust#__#&lt;&lt;without running its destructor#red&gt;&gt; &lt;&lt;to dispose of a value properly&gt;&gt; &lt;&lt;mem::drop&gt;&gt; &lt;&lt;not marked as unsafe#red&gt;&gt; &lt;&lt;ManuallyDrop is typically preferred#green&gt;&gt; &lt;&lt;let s = unsafe { String::from_raw_parts(v.as_mut_ptr(), v.len(), v.capacity()) };#red&gt;&gt; &lt;&lt;mem::forget(v);  // ERROR - v is invalid#red&gt;&gt; &lt;&lt;After calling v.as_mut_ptr() and transmitting the ownership of the data to s, the v value is invalid#red&gt;&gt; &lt;&lt;let mut v = ManuallyDrop::new(v);#green&gt;&gt; &lt;&lt;ManuallyDrop robustly prevents double-free#green&gt;&gt; &lt;&lt;mem::forget() doesn’t allow this#red&gt;&gt; &lt;&lt;ManuallyDrop prevents us from having to “touch” v after transferring the ownership#green&gt;&gt; &lt;&lt;not guarantee that pointers to this memory will remain valid#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/mem/fn.replace.html" id="268">
      <title>replace in core::mem - Rust#__#&lt;&lt;returning the previous dest#green&gt;&gt; &lt;&lt;to replace the values of two variables, see swap#green&gt;&gt; &lt;&lt;to replace with a default value, see take#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/ops/trait.Drop.html" id="269">
      <title>Drop in core::ops - Rust#__#&lt;&lt;explicitly call the destructor of a value, mem::drop#green&gt;&gt; &lt;&lt;Copy and Drop are exclusive#red&gt;&gt; &lt;&lt;even if this panics, the value is considered to be dropped#red&gt;&gt; &lt;&lt;you must not cause drop to be called again#red&gt;&gt; &lt;&lt;unintentionally, particularly when using ptr::drop_in_place#red&gt;&gt; &lt;&lt;cannot call Drop::drop yourself#red&gt;&gt; &lt;&lt;Dropping interacts with the borrow checker in subtle#red&gt;&gt; &lt;&lt;(Cell&lt;Option&lt;&amp;&apos;a S&lt;&apos;a&gt;&gt;&gt;, Box&lt;i32&gt;)&gt;&gt; &lt;&lt;“drop check”#red&gt;&gt; &lt;&lt;not yet stably guaranteed#red&gt;&gt; &lt;&lt;unstable way&gt;&gt; &lt;&lt;opt-out of the last clause#green&gt;&gt; &lt;&lt;may_dangle#green&gt;&gt; &lt;&lt;avoid panic!ing#red&gt;&gt; &lt;&lt;“double panic”#red&gt;&gt; &lt;&lt;check panicking() first#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/destructors.html" id="270">
      <title>Destructors - The Rust Reference#__#&lt;&lt;core::mem::forget(partial_move.1);#green&gt;&gt; &lt;&lt;reverse order&gt;&gt; &lt;&lt;declaration (for variables)&gt;&gt; &lt;&lt;creation (for temporaries)&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="58">
    <title>Operators</title>
    <bookmark href="https://doc.rust-lang.org/nightly/book/appendix-02-operators.html" id="271">
      <title>B - Operators and Symbols - The Rust Programming Language#__#NOT sorted by precedence!&lt;&lt;Table B-1@1#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/expressions.html" id="272">
      <title>Expressions - The Rust Reference#__#&lt;&lt;precedence of Rust operators and expressions&gt;&gt;&lt;&lt;Unary -#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-by-example/issues/1181" id="273">
      <title>std/result/question_mark.html ? for Enum</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/unstable-book/language-features/yeet-expr.html" id="274">
      <title>yeet_expr - The Rust Unstable Book</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/96373" id="275">
      <title>Tracking Issue for experimental `yeet` expressions (`feature(yeet_expr)`) · Issue #96373 · rust-lang/rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/ops/struct.Yeet.html" id="276">
      <title>Yeet in core::ops - Rust</title>
    </bookmark>
  </folder>
  <folder id="1411">
    <title>Pattern Matching/Destructuring</title>
    <bookmark href="https://stackoverflow.com/questions/34304341/can-i-destructure-a-tuple-without-binding-the-result-to-a-new-variable-in-a-let" id="1455">
      <title>rust - Can I destructure a tuple without binding the result to a new variable in a let/match/for statement? - Stack Overflow#__#&lt;&lt;#![feature(destructuring_assignment)]#green&gt;&gt; &lt;&lt;(head, list) = list.split_at(1);@3#green&gt;&gt; &lt;&lt;while let [head, rest @ ..] = list {#green&gt;&gt; &lt;&lt;let mut list = &amp;[0, 1, 2, 3][..];@3&gt;&gt; &lt;&lt;list = rest;&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/EmilHernvall/flagrant/blob/main/src/main.rs" id="1456">
      <title>flagrant/main.rs at main · EmilHernvall/flagrant#__#&lt;&lt;match sexpr {&gt;&gt; &lt;&lt;None if c.is_whitespace() =&gt;#green&gt;&gt; &lt;&lt;Some(SExpr::List(ref mut list)) =&gt;#green&gt;&gt; &lt;&lt;fn to_flag_geometry(&amp;self) -&gt; Option&gt;&gt; &lt;&lt;self.list()?#green&gt;&gt; &lt;&lt;match list {&gt;&gt; &lt;&lt;[op, c] if op.literal()? == &quot;s&quot; =&gt;#green&gt;&gt; SLICE PATTERN MATCH&lt;&lt;[op, pivot, car, cdr] =&gt; {#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://gradebot.org/doc/ipur/enum.html" id="1457">
      <title>Enumerations and Pattern Matching - Introduction to Programming Using Rust#__#&lt;&lt;When matching an enum variant with data, a program may use .. to ignore some data.#green&gt;&gt; &lt;&lt;// Bind new names `a`, `b`, `c`#green&gt;&gt; &lt;&lt;Shape::Circle{ x: a, y: b, r: c } =&gt; format!(&quot;Circle {} {} {}&quot;, a, b, c),#green&gt;&gt; &lt;&lt;// Ignore all the fields except `x` and `y`#green&gt;&gt; &lt;&lt;Shape::Rectangle{ x, y, .. } =&gt; format!(&quot;Rectangle {} {}&quot;, x, y),#green&gt;&gt; &lt;&lt;When binding a name, the program moves the value, which may sometimes be undesirable.#red&gt;&gt; &lt;&lt;may have been partially moved#red&gt;&gt; &lt;&lt;To avoid moving values in variants, use ref or ref mut in the pattern.#green&gt;&gt; &lt;&lt;match guard to conditionally match patterns#green&gt;&gt; &lt;&lt;Fruit::Banana(ripe) if ripe =&gt; println!(&quot;Ripe banana&quot;),#green&gt;&gt; &lt;&lt;Fruit::Banana(ripe) =&gt; println!(&quot;Raw Banana&quot;),#green&gt;&gt; &lt;&lt;If a program is interested in only one variant of an enum and wishes to test if a variable has this variant, it can use if let:#green&gt;&gt; &lt;&lt;if let Fruit::Banana(ripe) = x {#green&gt;&gt; &lt;&lt;use if let sparingly. Use it only when you are interested in only one variant and don&apos;t care about the others.#blue&gt;&gt; &lt;&lt;match enforces exhaustive#green&gt;&gt; &lt;&lt;but if let doesn&apos;t#red&gt;&gt; &lt;&lt;Each variant has one of three forms:#green&gt;&gt; &lt;&lt;name and a sequence of (name: value) pairs#green&gt;&gt; &lt;&lt;enum Object {#green&gt;&gt; &lt;&lt;Baz{ x: i32, y: bool },#green&gt;&gt; &lt;&lt;a name and a set of values#green&gt;&gt; &lt;&lt;When a variant has a name and a set of values (the second form above), it may be used as a function#green&gt;&gt; &lt;&lt;Bar(i32, bool),#green&gt;&gt; &lt;&lt;let f: fn(i32, bool) -&gt; Object = Object::Bar;#green&gt;&gt; &lt;&lt;println!(&quot;{:?}&quot;, f(1, true));&gt;&gt; &lt;&lt;5 ... 9 =&gt;#green&gt;&gt; &lt;&lt;Fruit::Apple{ color } =&gt;@1#red&gt;&gt; &lt;&lt;Fruit::Apple{ ref color } =&gt;#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html" id="1458">
      <title>2909-destructuring-assignment - The Rust RFC Book</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rfcs/pull/2593" id="1459">
      <title>Enum variant types by varkor · Pull Request #2593 · rust-lang/rfcs#__#&lt;&lt;match c {&gt;&gt; &lt;&lt;x @ Zero | x @ One =&gt; println!(&quot;{:?}&quot;, x),&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/BrooksPatton/learning-rust/issues/3" id="1460">
      <title>Pattern matching in function arguments · Issue #3 · BrooksPatton/learning-rust#__#&lt;&lt;fn print_tuple((x, y): (u32, u32))#green&gt;&gt; &lt;&lt;Destructuring of more complex values like structs or enums#green&gt;&gt; &lt;&lt;fn print_coords(Coords{ x, y, z }: Coords)#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://runrust.miraheze.org/wiki/Underscore" id="1461">
      <title>Underscore - Rust Community Wiki</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch18-01-all-the-places-for-patterns.html" id="1462">
      <title>All the Places Patterns Can Be Used - The Rust Programming Language#__#&lt;&lt;ignore one or more#green&gt;&gt; &lt;&lt;values in the tuple&gt;&gt; &lt;&lt;_ or ..#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/patterns.html" id="1463">
      <title>Patterns - The Rust Reference#__#&lt;&lt;match both arrays of fixed#green&gt;&gt; &lt;&lt;and slices of dynamic size#green&gt;&gt; &lt;&lt;// Fixed size&gt;&gt; &lt;&lt;[a, b, c] =&gt; &quot;starts with something else&quot;#green&gt;&gt; &lt;&lt;// Dynamic size&gt;&gt; &lt;&lt;[a, b] =&gt; { /* this arm will not apply because the length doesn&apos;t match */ }#red&gt;&gt; &lt;&lt;_ =&gt; { /* this wildcard is required, since the length is not known statically */ }#red&gt;&gt; &lt;&lt;if let@1#green&gt;&gt; &lt;&lt;Person {#green&gt;&gt; &lt;&lt;car: Some(_),#green&gt;&gt; &lt;&lt;age: person_age@13#green&gt;&gt; &lt;&lt;name: ref person_name,#green&gt;&gt; &lt;&lt;..@1#green&gt;&gt; &lt;&lt;} = person#green&gt;&gt; &lt;&lt;a placeholder (_) stands in for a single data field#green&gt;&gt; &lt;&lt;whereas a wildcard .. stands in for all the remaining fields of a particular variant#green&gt;&gt; &lt;&lt;Message::Move{ x, y: 0 } =&gt;#green&gt;&gt; &lt;&lt;Message::Move{ .. } =&gt;#green&gt;&gt; &lt;&lt;refutable, and will not match#red&gt;&gt; &lt;&lt;refutable, and will match#red&gt;&gt; &lt;&lt;2|4 =&gt;#green&gt;&gt; &lt;&lt;To bind the matched value of a pattern to a variable#green&gt;&gt; &lt;&lt;variable#green&gt;&gt; &lt;&lt;binds the value 2 to e#green&gt;&gt; &lt;&lt;(not the entire range: the range here is a range subpattern)#red&gt;&gt; &lt;&lt;let x = 2;&gt;&gt; &lt;&lt;match x {&gt;&gt; &lt;&lt;e@1#green&gt;&gt; &lt;&lt;bind to a reference by using the ref#green&gt;&gt; &lt;&lt;to a mutable reference using ref mut#green&gt;&gt;&lt;&lt;`start` is a slice of everything except the last element&gt;&gt; &lt;&lt;whole @ [.., last] =&gt;&gt;&gt; &lt;&lt;if let [.., penultimate, _] = slice {&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/iter/" id="1464">
      <title>std::iter - Rust iterators#__#&lt;&lt;methods of these traits are worth putting some extra study&gt;&gt; &lt;&lt;look at the method that creates the struct#green&gt;&gt; &lt;&lt;rather than the struct itself#red&gt;&gt; &lt;&lt;iter(), which iterates over &amp;T&gt;&gt; &lt;&lt;iter_mut()&gt;&gt; &lt;&lt;into_iter(), which iterates over T&gt;&gt; &lt;&lt;possible to write a custom implementation of methods like nth and fold#green&gt;&gt; &lt;&lt;match IntoIterator::into_iter(values) {&gt;&gt; &lt;&lt;mut iter =&gt; loop {#green&gt;&gt; &lt;&lt;into_iter() takes self by value, using a for loop to iterate over a collection consumes that collection#red&gt;&gt; &lt;&lt;If a collection type C provides iter(), it usually also implements IntoIterator for &amp;C, with an implementation that just calls iter()#green&gt;&gt; &lt;&lt;Likewise, a collection C that provides iter_mut() generally implements IntoIterator for &amp;mut C by delegating to iter_mut()#green&gt;&gt; &lt;&lt;for x in &amp;mut values { // same as `values.iter_mut()`#green&gt;&gt; &lt;&lt;for x in &amp;values { // same as `values.iter()`#green&gt;&gt; &lt;&lt;many collections offer iter()#green&gt;&gt; &lt;&lt;not all offer iter_mut()#red&gt;&gt; &lt;&lt;mutating the keys of a HashSet&lt;T&gt; or HashMap&lt;K, V&gt; could put the collection into an inconsistent state if the key hashes change#red&gt;&gt; &lt;&lt;Functions which take an Iterator and return another Iterator are often called &apos;iterator adapters&apos;&gt;&gt; &lt;&lt;Common iterator adapters include map, take, and filter&gt;&gt; &lt;&lt;when creating an iterator solely for its side effects#red&gt;&gt; &lt;&lt;map method calls a closure on each element it iterates over#blue&gt;&gt; &lt;&lt;v.iter().map(|x| println!(&quot;{}&quot;, x));#red&gt;&gt; &lt;&lt;will not print any#red&gt;&gt; &lt;&lt;only created an iterator#red&gt;&gt; &lt;&lt;rather than using it#green&gt;&gt; &lt;&lt;warning: unused result that must be used#red&gt;&gt; &lt;&lt;idiomatic way&gt;&gt; &lt;&lt;use a for loop#green&gt;&gt; &lt;&lt;for_each method#green&gt;&gt; &lt;&lt;v.iter().for_each(|x|#green&gt;&gt; &lt;&lt;Another common way to evaluate an iterator&gt;&gt; &lt;&lt;use the collect method to produce a new collection#green&gt;&gt; &lt;&lt;Iterators do not have to be finite#red&gt;&gt; &lt;&lt;open-ended range is an infinite#red&gt;&gt; &lt;&lt;numbers = 0..#red&gt;&gt; &lt;&lt;five_numbers = numbers.take(5);#green&gt;&gt; &lt;&lt;std::iter::repeat(1)&gt;&gt; &lt;&lt;ones.min().unwrap()&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://gradebot.org/doc/ipur/ownership.html" id="1738">
      <title>Ownership, Borrowing, and Lifetime - Introduction to Programming Using Rust</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/flow_control/match/destructuring/destructure_tuple.md" id="1739">
      <title>rust-by-example/destructure_tuple.md at master · rust-lang/rust-by-example#__#&lt;&lt;Match can be used to destructure#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/peter-kehl/rust-by-example/blob/master/src/flow_control/match/guard.md" id="1740">
      <title>rust-by-example/guard.md at master · peter-kehl/rust-by-example#__#&lt;&lt;(x, y) if x == y =&gt;#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch18-03-pattern-syntax.html" id="1741">
      <title>Pattern Syntax - The Rust Programming Language#__#&lt;&lt;syntax .. will expand to as many values as it needs&gt;&gt; &lt;&lt;use .. with a tuple&gt;&gt; &lt;&lt;(first, .., last) =&gt; {&gt;&gt; &lt;&lt;`..` can only be used once per tuple pattern#red&gt;&gt; &lt;&lt;if condition applies to the whole pattern 4 | 5 | 6#green&gt;&gt; &lt;&lt;not only to the last value 6#red&gt;&gt; &lt;&lt;behaves like this:&gt;&gt; &lt;&lt;(4 | 5 | 6) if y =&gt;#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch06-02-match.html" id="1742">
      <title>The match Control Flow Construct - The Rust Programming Language#__#&lt;&lt;using the unit value#green&gt;&gt; &lt;&lt;as the code that goes with the _ arm:&gt;&gt; &lt;&lt;_ =&gt; (),#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html" id="1743">
      <title>Announcing Rust 1.59.0 | Rust Blog#__#&lt;&lt;Inline assembly&gt;&gt; &lt;&lt;std::arch::asm;&gt;&gt; &lt;&lt;format string syntax used to name registers&gt;&gt; &lt;&lt;asm! and global_asm!&gt;&gt; &lt;&lt;same used in Rust format strings,&gt;&gt; &lt;&lt;x86 and x86-64&gt;&gt; &lt;&lt;ARM&gt;&gt; &lt;&lt;AArch64&gt;&gt; &lt;&lt;RISC-V&gt;&gt; &lt;&lt;Destructuring assignments&gt;&gt; &lt;&lt;(a, b) = (1, 2);&gt;&gt; &lt;&lt;[c, .., d, _] = [1, 2, 3, 4, 5];#green&gt;&gt; &lt;&lt;destructuring assignments with operators such as += are not#red&gt;&gt; &lt;&lt;let (a, b, c, d, e);&gt;&gt; &lt;&lt;Previously, type parameters were required to come before all const#red&gt;&gt; &lt;&lt;can now interleave them#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1412">
    <title>Pointers</title>
    <bookmark href="https://users.rust-lang.org/t/the-copy-trait-what-does-it-actually-copy/18730/3" id="1465">
      <title>The Copy trait - what does it actually...#__#&lt;&lt;In the &amp;str case (i.e. “hello world” literal), the value is a (fat) ptr#green&gt;&gt; &lt;&lt;In the String case, the value is the 24 bytes (on 64bit) container object that holds the ptr to the heap data, length, and capacity of the backing heap allocation#green&gt;&gt; &lt;&lt;a String is actually a Vec&lt;u8&gt; internally#green&gt;&gt; &lt;&lt;References (i.e. &amp;T) are copy types#green&gt;&gt; &lt;&lt;values are not necessarily (String isn’t)#red&gt;&gt; &lt;&lt;a “copy” and a “move” are, mechanically, the same thing - bitwise copy#green&gt;&gt; &lt;&lt;sole difference is, with Copy, the source value is still usable after the copy is taken#red&gt;&gt; &lt;&lt;in Rust you cannot override a copy or a move operation#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/the-copy-trait-what-does-it-actually-copy/18730/18" id="1466">
      <title>The Copy trait - what does it actually...#__#&lt;&lt;size_of_val(&amp;T) returns the size of T#green&gt;&gt; &lt;&lt;let hello = &quot;Hello, world!&quot;;#green&gt;&gt; &lt;&lt;size_of_val(&amp;str) returns the size of the str being referred to#green&gt;&gt; &lt;&lt;i.e. the underlying character buffer#green&gt;&gt; &lt;&lt;println!(&quot;{}&quot;, std::mem::size_of_val(hello));#green&gt;&gt; &lt;&lt;size_of_val(&amp;&amp;str) returns the size of the &amp;str#green&gt;&gt; &lt;&lt;i.e. the fat pointer (pointer and length) on the stack#green&gt;&gt; &lt;&lt;println!(&quot;{}&quot;, std::mem::size_of_val(&amp;hello));#green&gt;&gt; &lt;&lt;13@1#green&gt;&gt; &lt;&lt;16#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/primitive.pointer.html" id="1467">
      <title>pointer - Rust#__#&lt;&lt;Raw, unsafe pointers, *const T, and *mut T#red&gt;&gt; &lt;&lt;in Rust, every (stack-allocated) variable is considered a separate allocated object#blue&gt;&gt; &lt;&lt;computed offset, in bytes, cannot overflow an isize#red&gt;&gt; &lt;&lt;Vec and Box ensure they never allocate more than isize::MAX bytes#red&gt;&gt; &lt;&lt;vec.as_ptr().add(vec.len()) is always safe.#green&gt;&gt;&lt;&lt;can be unaligned#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://i.redd.it/moxxoeir7iqz.png" id="1468">
      <title>Rust container cheat sheet</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/types/pointer.html" id="1469">
      <title>Pointer types - The Rust Reference#__#&lt;&lt;Dereferencing a raw pointer is an unsafe#red&gt;&gt; &lt;&lt;Shared references (&amp;)#blue&gt;&gt; &lt;&lt;point to memory owned by some other value#green&gt;&gt; &lt;&lt;Copying a reference is a &quot;shallow&quot; operation: it involves only copying the pointer itself, that is, pointers are Copy#green&gt;&gt; &lt;&lt;mutable reference (that hasn&apos;t been borrowed) is the only way to access the value it points to, so is not Copy#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/the-copy-trait-what-does-it-actually-copy/18730/4" id="1470">
      <title>The Copy trait - what does it actually copy? - help - The Rust Programming Language Forum#__#&lt;&lt;let a = &amp;42;#green&gt;&gt; &lt;&lt;println!(&quot;{:?}&quot;, a as *const i32 as usize);#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1413">
    <title>Traits</title>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch10-02-traits.html" id="1471">
      <title>Traits: Defining Shared Behavior - The Rust Programming Language#__#&lt;&lt;we can implement a trait on a type only if either the trait or the type is local to our crate#red&gt;&gt; &lt;&lt;Without the rule, two crates could implement the same trait for the same type#red&gt;&gt; &lt;&lt;To use a default implementation to summarize instances of NewsArticle instead of defining a custom implementation, we specify an empty impl block with impl Summary for NewsArticle {}.#green&gt;&gt; &lt;&lt;it isn’t possible to call the default implementation from an overriding implementation of that same method#red&gt;&gt; &lt;&lt;Traits as Parameters#green&gt;&gt; &lt;&lt;pub fn notify(item: &amp;impl Summary)#green&gt;&gt; &lt;&lt;Trait Bound Syntax#green&gt;&gt; &lt;&lt;impl Trait syntax works for straightforward cases but is actually syntax sugar for a longer form, which is called a trait bound#green&gt;&gt; &lt;&lt;pub fn notify&lt;T: Summary&gt;(item: &amp;T)#green&gt;&gt; &lt;&lt;If we wanted this function to allow item1 and item2 to have different types, using impl Trait would be appropriate#red&gt;&gt; &lt;&lt;to force both parameters to have the same type, that’s only possible to express using a trait bound#red&gt;&gt; &lt;&lt;pub fn notify&lt;T: Summary&gt;(item1: &amp;T, item2: &amp;T)#green&gt;&gt; &lt;&lt;Multiple Trait Bounds with the + Syntax#green&gt;&gt; &lt;&lt;pub fn notify(item: &amp;(impl Summary + Display))#green&gt;&gt; &lt;&lt;pub fn notify&lt;T: Summary + Display&gt;(item: &amp;T)#green&gt;&gt; &lt;&lt;function name, parameter list, and return type are close together#green&gt;&gt; &lt;&lt;similar to a function without lots of trait bounds.#green&gt;&gt; &lt;&lt;Trait Bounds with where Clauses#green&gt;&gt; &lt;&lt;cannot move out of type `[T]`, a non-copy slice#red&gt;&gt; &lt;&lt;fn largest&lt;T: PartialOrd + Copy&gt;(list: &amp;[T]) -&gt; T#green&gt;&gt; &lt;&lt;we could specify that T has the trait bound Clone instead of Copy#green&gt;&gt; &lt;&lt;clone function means we’re potentially making more heap allocations#red&gt;&gt; &lt;&lt;Another way we could implement largest is for the function to return a reference to a T value in the slice#green&gt;&gt; &lt;&lt;can also conditionally implement a trait for any type that implements another trait#green&gt;&gt; &lt;&lt;called blanket implementations#blue&gt;&gt; &lt;&lt;impl&lt;T: Display&gt; ToString for T {#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/iter/trait.IntoIterator.html" id="1472">
      <title>std::iter::IntoIterator - Rust#__#&lt;&lt;fn collect_as_strings&lt;T&gt;(collection: T) -&gt; Vec&lt;String&gt;#green&gt;&gt; &lt;&lt;where&gt;&gt; &lt;&lt;T: IntoIterator,#green&gt;&gt; &lt;&lt;T::Item: std::fmt::Debug#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/trait/disambiguating.md" id="1473">
      <title>rust-by-example/disambiguating.md at master · rust-lang/rust-by-example#__#&lt;&lt;fn get(&amp;self) -&gt; String;&gt;&gt; &lt;&lt;&lt;Form as UsernameWidget&gt;::get(&amp;form)#green&gt;&gt; &lt;&lt;&lt;Form as AgeWidget&gt;::get(&amp;form)#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch19-03-advanced-traits.html" id="1474">
      <title>Advanced Traits - The Rust Programming Language#__#&lt;&lt;fn fly(&amp;self);&gt;&gt; &lt;&lt;Pilot::fly(&amp;person);#green&gt;&gt; &lt;&lt;doesn’t have a self parameter#red&gt;&gt; &lt;&lt;trait Animal {#red&gt;&gt; &lt;&lt;fn baby_name() -&gt; String;#red&gt;&gt; &lt;&lt;impl Dog {#red&gt;&gt; &lt;&lt;fn baby_name() -&gt; String {#red&gt;&gt; &lt;&lt;impl Animal for Dog {#red&gt;&gt; &lt;&lt;fn baby_name() -&gt; String {@1#red&gt;&gt; &lt;&lt;&lt;Dog as Animal&gt;::baby_name()#green&gt;&gt; &lt;&lt;Newtype Pattern to Implement External Traits on External Types@1#green&gt;&gt; &lt;&lt;no runtime performance&gt;&gt; &lt;&lt;wrapper type is elided at compile time#green&gt;&gt; &lt;&lt;methods delegate to self.0&gt;&gt; &lt;&lt;new type to have every method the inner type has, implementing the Deref#green&gt;&gt; &lt;&lt;tuple struct@3&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/best-way-to-reuse-partial-trait-implementation/6840/6" id="1475">
      <title>Best way to reuse partial trait implementation? - help - The Rust Programming Language Forum#__#&lt;&lt;can’t do type ColouredShape = Moveable + Shape + HasColor;#red&gt;&gt; &lt;&lt;can do trait ColouredShape: Moveable + Shape + HasColor {}#green&gt;&gt; &lt;&lt;By breaking the trait you gain the ability to write fn a&lt;K: HasColor&gt;(&amp;self, k: K)#green&gt;&gt; &lt;&lt;combine implementations out of different pieces:#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://gist.github.com/qinwf/55f651daece54a6fdfa2" id="1476">
      <title>Code Reuse in Rust#__#&lt;&lt;impl Trait for Box&lt;MyType&gt;#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/danielhenrymantilla/inheritance-rs" id="1477">
      <title>danielhenrymantilla/inheritance-rs: Avoiding code reuse in Rust with OOP inheritance</title>
    </bookmark>
    <bookmark href="https://brson.github.io/rust-anthology/1/rust-reuse-and-recycle.html" id="1478">
      <title>The Many Kinds of Code Reuse in Rust -</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/o9w6rl/rust_traits_and_static/" id="1479">
      <title>Rust traits and &quot;+ &apos;static&quot; : rust#__#&lt;&lt;means it doesn&apos;t/can&apos;t contain any non-static references#green&gt;&gt; &lt;&lt;can only have owned types#green&gt;&gt; &lt;&lt;and/or &apos;static references#green&gt;&gt; &lt;&lt;could live for the whole duration of the program#green&gt;&gt; &lt;&lt;if the receiver so chooses&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/pretzelhammer/rust-blog/blob/master/posts/common-rust-lifetime-misconceptions.md" id="1480">
      <title>rust-blog/common-rust-lifetime-misconceptions.md at master · pretzelhammer/rust-blog</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md" id="1744">
      <title>rfcs/1023-rebalancing-coherence.md at master · rust-lang/rfcs · GitHub#__#&lt;&lt;Feature Name: fundamental_attribute&gt;&gt; &lt;&lt;#[fundamental]&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://predr.ag/blog/definitive-guide-to-sealed-traits-in-rust/" id="1745">
      <title>A definitive guide to sealed traits in Rust</title>
    </bookmark>
  </folder>
  <folder id="1414">
    <title>zOther</title>
    <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/custom_types/enum/testcase_linked_list.html" id="1481">
      <title>Testcase: linked-list via an Enum with...</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/attributes.html" id="1482">
      <title>Attributes - The Rust Reference#__#&lt;&lt;Inner attributes, written with a bang (!) after the hash (#), apply to the item that the attribute is declared within#blue&gt;&gt; &lt;&lt;Outer attributes, written without the bang after the hash, apply to the thing that follows the attribute#blue&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch18-00-patterns.html" id="1483">
      <title>Patterns and Matching - The Rust Programming...</title>
    </bookmark>
    <bookmark href="https://internals.rust-lang.org/t/use-a-more-clear-suffix-for-isize-and-usize-literals-isz-and-usz/1279" id="1484">
      <title>Use a more clear suffix for isize and...#__#&lt;&lt;isize and usize (yay!), the respective literal suffixes were renamed to is and us#green&gt;&gt;&lt;&lt;A single ‘s’ isn’t really enough to evoke ‘size’#red&gt;&gt; &lt;&lt;‘is’ and ‘us’ have other, more common meanings#red&gt;&gt; &lt;&lt;could additionally be interpreted#red&gt;&gt; &lt;&lt;loses some meaning#red&gt;&gt; &lt;&lt;convention#green&gt;&gt; &lt;&lt;doesn’t leave any room for misinterpretation#red&gt;&gt; &lt;&lt;ergonomic#green&gt;&gt; &lt;&lt;better at evoking#green&gt;&gt; &lt;&lt;overloaded meanings#red&gt;&gt; &lt;&lt;If we had to go with a two character suffix#blue&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html" id="1485">
      <title>TypeId in core::any - Rust#__#&lt;&lt;operations such as cloning, comparison, printing, and showing.#green&gt;&gt; &lt;&lt;currently only available for types which ascribe to &apos;static#red&gt;&gt; &lt;&lt;but this limitation may be removed in the future.#green&gt;&gt; &lt;&lt;implements Hash, PartialOrd, and Ord#green&gt;&gt; &lt;&lt;hashes and ordering will vary between Rust releases#red&gt;&gt; &lt;&lt;std::any::{Any, TypeId}#green&gt;&gt; &lt;&lt;fn is_string&lt;T: ?Sized + Any&gt;(_s: &amp;T) -&gt; bool {#green&gt;&gt; &lt;&lt;TypeId::of::&lt;String&gt;() == TypeId::of::&lt;T&gt;()#green&gt;&gt; &lt;&lt;assert_eq!(is_string(&amp;&quot;cookie monster&quot;.to_string()), true);#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch03-02-data-types.html" id="1486">
      <title>Data Types - The Rust Programming Language#__#&lt;&lt;In cases when many types are possible#green&gt;&gt; &lt;&lt;let guess: u32 = &quot;42&quot;.parse().expect(&quot;Not a number!&quot;);#green&gt;&gt; &lt;&lt;scalar types: integers, floating-point numbers, Booleans, and characters#green&gt;&gt; &lt;&lt;i128#green&gt;&gt; &lt;&lt;u128#green&gt;&gt; &lt;&lt;isize#green&gt;&gt; &lt;&lt;usize#green&gt;&gt; &lt;&lt;Byte (u8 only)#green&gt;&gt; &lt;&lt;b&apos;A&apos;#green&gt;&gt; &lt;&lt;i32: this type is generally the fastest, even on 64-bit systems#green&gt;&gt; &lt;&lt;isize or usize is when indexing some sort of collection#green&gt;&gt; &lt;&lt;in debug mode, Rust includes checks for integer overflow#green&gt;&gt; &lt;&lt;panic at runtime#green&gt;&gt; &lt;&lt;in release mode with the --release#green&gt;&gt; &lt;&lt;not include checks for integer overflow#red&gt;&gt; &lt;&lt;u8, 256 becomes 0#red&gt;&gt; &lt;&lt;Relying on integer overflow’s wrapping behavior is considered an error#red&gt;&gt; &lt;&lt;default type is f64 because on modern CPUs it’s roughly the same speed as f32#green&gt;&gt; &lt;&lt;remainder = 43 % 5#green&gt;&gt; &lt;&lt;Booleans are one byte in size#red&gt;&gt; &lt;&lt;let f: bool#green&gt;&gt; &lt;&lt;char type is four bytes#red&gt;&gt; &lt;&lt;types of the different values in the tuple don’t have to be the same#green&gt;&gt; &lt;&lt;let tup: (i32, f64, u8) = (500, 6.4, 1);#green&gt;&gt; &lt;&lt;access a tuple element directly by using a period (.) followed by the index#green&gt;&gt; &lt;&lt;first index in a tuple is 0#green&gt;&gt; &lt;&lt;Arrays are useful when you want your data allocated on the stack#green&gt;&gt; &lt;&lt;rather than the heap#red&gt;&gt; &lt;&lt;let a: [i32; 5] = [1, 2, 3, 4, 5];#green&gt;&gt; &lt;&lt;to create an array that contains the same value for each element#green&gt;&gt; &lt;&lt;specify the initial#green&gt;&gt; &lt;&lt;followed by a semicolon#green&gt;&gt; &lt;&lt;then the length#green&gt;&gt; &lt;&lt;let a = [3; 5];#green&gt;&gt; &lt;&lt;array is@1#green&gt;&gt; &lt;&lt;allocated on the stack@1#green&gt;&gt;&lt;&lt;To explicitly handle the possibility of overflow#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/types/numeric.html" id="1487">
      <title>Numeric types - The Rust Reference#__#&lt;&lt;isize type is a signed integer type with the same number of bits as the platform&apos;s pointer type. The theoretical upper bound on object and array size is the maximum isize value.#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/prelude/" id="1488">
      <title>std::prelude - Rust#__#&lt;&lt;other preludes in the standard library, such as std::io::prelude#green&gt;&gt; &lt;&lt;Various libraries in the Rust ecosystem may also define their own preludes.#green&gt;&gt; &lt;&lt;they are not automatically use&apos;d#red&gt;&gt; &lt;&lt;must be imported manually#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch03-05-control-flow.html" id="1489">
      <title>Control Flow - The Rust Programming Language#__#&lt;&lt;immediately after the condition inside curly brackets#green&gt;&gt; &lt;&lt;Rust will not automatically try to convert non-Boolean types to a Boolean#red&gt;&gt; &lt;&lt;condition in this code must be a bool#red&gt;&gt; &lt;&lt;combining if and else in an else if#green&gt;&gt; &lt;&lt;branching construct called match#green&gt;&gt; &lt;&lt;if is an expression#green&gt;&gt; &lt;&lt;let number = if condition { 5 } else { 6 };#green&gt;&gt; &lt;&lt;Returning Values from Loops#green&gt;&gt; &lt;&lt;to retry an operation you know might fail#green&gt;&gt; &lt;&lt;let result = loop {#green&gt;&gt; &lt;&lt;break counter * 2;#green&gt;&gt; &lt;&lt;while index &lt; 5 {#red&gt;&gt; &lt;&lt;slow, because the compiler adds runtime code to perform the conditional check#red&gt;&gt; &lt;&lt;for loop and#green&gt;&gt; &lt;&lt;let a = [10, 20, 30, 40, 50];@1#green&gt;&gt; &lt;&lt;for element in a.iter() {#green&gt;&gt; &lt;&lt;use a Range#green&gt;&gt; &lt;&lt;rev, to reverse the range#green&gt;&gt; &lt;&lt;for number in (1..4).rev() {#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust-by-example/blob/master/src/macros/overload.md" id="1490">
      <title>rust-by-example/overload.md at master · rust-lang/rust-by-example#__#&lt;&lt;and@2#green&gt;&gt; &lt;&lt;and@4#green&gt;&gt; &lt;&lt;or@8#green&gt;&gt; &lt;&lt;or@6#green&gt;&gt; &lt;&lt;arm must end with a semicolon#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://momori-nakano.hashnode.dev/building-a-lisp-like-language-from-scratch-in-rust" id="1746">
      <title>Building a Lisp-like Language from Scratch in Rust#__#&lt;&lt;match expr {@1&gt;&gt; &lt;&lt;Expr::If(cond, then, r#else) =&gt; {#green&gt;&gt; &lt;&lt;eval(if cond { then } else { r#else })#green&gt;&gt; &lt;&lt;raw identifier with r#else#blue&gt;&gt; &lt;&lt;to use else as a variable.#green&gt;&gt;</title>
    </bookmark>
  </folder>
</folder>
<folder id="8">
  <title>Performance</title>
  <folder id="59">
    <title>alloc, libc, kernel, syscalls, target</title>
    <folder id="277">
      <title>adding target</title>
      <bookmark href="https://rustc-dev-guide.rust-lang.org/building/new-target.html" id="710">
        <title>Adding a new target - Guide to Rustc Development#__#&lt;&lt;very new targets#red&gt;&gt; &lt;&lt;pre-built LLVM&gt;&gt; &lt;&lt;llvm-config =&gt;&gt; &lt;&lt;LLVM FileCheck tool#green&gt;&gt; &lt;&lt;for codegen tests&gt;&gt; &lt;&lt;normally built with LLVM&gt;&gt; &lt;&lt;but if you use your own preinstalled LLVM#red&gt;&gt; &lt;&lt;target specification&gt;&gt; &lt;&lt;target JSON&gt;&gt; &lt;&lt;see the specification for an existing&gt;&gt; &lt;&lt;rustc -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json&gt;&gt; &lt;&lt;target section of config.toml:#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rust-embedded.org/embedonomicon/custom-target.html" id="711">
        <title>Creating a custom target - The Embedonomicon#__#&lt;&lt;nightly compiler to build the core library#green&gt;&gt; &lt;&lt;use the same triple that LLVM&gt;&gt; &lt;&lt;VENDOR part is optional&gt;&gt; &lt;&lt;Omitting this field is the same as using unknown&gt;&gt; &lt;&lt;SYS part describes the OS#green&gt;&gt; &lt;&lt;none is used for bare-meta&gt;&gt; &lt;&lt;ABI part describes how the process starts up#green&gt;&gt; &lt;&lt;eabi is used for bare metal&gt;&gt; &lt;&lt;gnu is used for glibc&gt;&gt; &lt;&lt;musl for musl&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rfcs/0131-target-specification.html" id="712">
        <title>0131-target-specification - The Rust RFC Book</title>
      </bookmark>
    </folder>
    <folder id="278">
      <title>alloc, core::alloc, std::alloc</title>
      <bookmark href="https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html" id="713">
        <title>Allocator in core::alloc - Rust#__#&lt;&lt;Unlike GlobalAlloc#green&gt;&gt; &lt;&lt;zero-sized allocations are allowed in Allocator#red&gt;&gt; &lt;&lt;If an underlying allocator does not support this (like jemalloc#red&gt;&gt; &lt;&lt;or return a null pointer (such as libc::malloc#red&gt;&gt; &lt;&lt;must be caught by the implementation#red&gt;&gt; &lt;&lt;If grow or shrink have returned Err, the passed pointer remains valid#green&gt;&gt; &lt;&lt;instance and all of its clones#red&gt;&gt; &lt;&lt;cloning or moving the allocator#red&gt;&gt; ???&lt;&lt;Allocator is designed to be implemented on ZSTs, references, or smart pointers#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/alloc/struct.System.html" id="714">
        <title>System in std::alloc - Rust#__#&lt;&lt;default memory allocator&gt;&gt; &lt;&lt;not valid to mix use of the backing system allocator with System#red&gt;&gt; &lt;&lt;as this implementation may include extra#red&gt;&gt; &lt;&lt;implements the GlobalAlloc trait&gt;&gt; &lt;&lt;Rust programs by default work as if&gt;&gt; &lt;&lt;your own wrapper around System&gt;&gt; &lt;&lt;unsafe impl GlobalAlloc for Counter {&gt;&gt; &lt;&lt;#[global_allocator]&gt;&gt; &lt;&lt;also be used directly to allocate memory independently of whatever global allocator#green&gt;&gt; &lt;&lt;if a Rust program opts in to using jemalloc as the global&gt;&gt; &lt;&lt;System will still allocate memory using malloc and HeapAlloc#green&gt;&gt; &lt;&lt;static A: Counter = Counter;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/alloc/alloc/index.html" id="715">
        <title>alloc::alloc - Rust#__#&lt;&lt;with the global#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/alloc/trait.GlobalAlloc.html" id="716">
        <title>GlobalAlloc in core::alloc - Rust</title>
      </bookmark>
    </folder>
    <folder id="279">
      <title>allocators for Rust</title>
      <bookmark href="https://github.com/tikv/jemallocator/blob/main/jemallocator/src/lib.rs" id="717">
        <title>jemallocator/lib.rs at main · tikv/jemallocator</title>
      </bookmark>
      <bookmark href="https://docs.rs/owned-alloc/latest/owned_alloc/" id="718">
        <title>owned_alloc - Rust#__#&lt;&lt;unlike a Box#red&gt;&gt; &lt;&lt;you may move the value out from the OwnedAlloc and getting an UninitAlloc back#green&gt;&gt; &lt;&lt;vec-like structures, a type RawVec&gt;&gt; &lt;&lt;Currently, no other help is provided for arrays/vectors.#red&gt;&gt; &lt;&lt;Cache, which is actually more genera#green&gt;&gt; &lt;&lt;save unused allocations requested on a tight loop#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/keywords/malloc?sort=downloads" id="719">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;&apos;malloc&apos;&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/keywords/allocator?sort=downloads" id="720">
        <title>allocator - Keywords - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/malloced" id="721">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;malloc-ed box&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/mbox" id="722">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;#![no_std]&gt;&gt; &lt;&lt;MBox does not support custom allocator#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/dpdk-global-allocator" id="723">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;NUMA-aware#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/ma_proper" id="724">
        <title>ma_proper - crates.io: Rust Package Registry#__#&lt;&lt;secure&gt;&gt; &lt;&lt;erased before it is deallocated#green&gt;&gt; &lt;&lt;memset_s/SecureZeroMemory/explicit_bzero/explicit_memset#green&gt;&gt; &lt;&lt;stack items are not erased#red&gt;&gt; &lt;&lt;MAProper::erase_slice and MAProper::erase_ptr&lt;T&gt;#green&gt;&gt; &lt;&lt;erase them manually&gt;&gt; &lt;&lt;panic-policy#red&gt;&gt; &lt;&lt;Rc/Arc use (retain-cycles)#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/keywords/alloc?sort=downloads" id="725">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;&apos;alloc&apos;&gt;&gt; &lt;&lt;instrumenting global allocators&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/keywords/memory-management" id="726">
        <title>memory-management - Keywords - crates.io: Rust Package Registry#__#&lt;&lt;&apos;memory-management&apos;&gt;&gt; Updated: 5 months ago&lt;&lt;fast allocator for short-lived&gt;&gt; &lt;&lt;memory-sharing completion-based I/O&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/keywords/memory?page=1" id="1246">
        <title>memory - Keywords - crates.io: Rust Package Registry#__#&lt;&lt;&apos;memory&apos;&gt;&gt; &lt;&lt;zeroize&gt;&gt; &lt;&lt;clear secrets&gt;&gt; &lt;&lt;simple trait&gt;&gt; &lt;&lt;will not be &apos;optimized away&apos; by the compiler#red&gt;&gt; &lt;&lt;portable#green&gt;&gt; &lt;&lt;secrecy&gt;&gt; &lt;&lt;aren&apos;t accidentally copied, logged#red&gt;&gt; &lt;&lt;also ensure secrets are securely wiped#green&gt;&gt; &lt;&lt;sys-info&gt;&gt; &lt;&lt;Get system information#green&gt;&gt; &lt;&lt;Linux, Mac OS X, illumos, Solaris, FreeBSD, OpenBSD&gt;&gt; &lt;&lt;compact_str&gt;&gt; uses unsafe!&lt;&lt;memory efficient string#green&gt;&gt; &lt;&lt;stack, when possible#green&gt;&gt; &lt;&lt;page_size&gt;&gt; &lt;&lt;cross-platform way to retrieve the memory page size#green&gt;&gt; &lt;&lt;shared_memory&gt;&gt; &lt;&lt;user friendly#green&gt;&gt; &lt;&lt;share memory between processes#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/keywords/allocator?page=1" id="1247">
        <title>allocator - Keywords - crates.io: Rust Package Registry#__#&lt;&lt;tikv-jemalloc&gt;&gt; &lt;&lt;libmimalloc&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/crate/alloc-no-stdlib/latest" id="1248">
        <title>alloc-no-stdlib 2.0.4 - Docs.rs</title>
      </bookmark>
      <bookmark href="https://crates.io/keywords/malloc?page=1" id="1249">
        <title>malloc - Keywords - crates.io: Rust Package Registry#__#&lt;&lt;&apos;malloc&apos;&gt;&gt; &lt;&lt;rs-libc&gt;&gt; &lt;&lt;subset of libc&gt;&gt; &lt;&lt;freestanding environments.&gt;&gt; &lt;&lt;libc_alloc&gt;&gt; &lt;&lt;libc&apos;s malloc/free&gt;&gt; &lt;&lt;slabmalloc&gt;&gt; &lt;&lt;malloc implementation#red&gt;&gt; &lt;&lt;stand-alone or&gt;&gt; &lt;&lt;provide the necessary interface to rusts liballoc#green&gt;&gt; &lt;&lt;only relies on libcore.#green&gt;&gt; &lt;&lt;good_memory_allocator&gt;&gt; &lt;&lt;fast and memory efficient#green&gt;&gt; &lt;&lt;`no_std`#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/linear-malloc/latest/linear_malloc/" id="1250">
        <title>linear_malloc - Rust#__#&lt;&lt;simple&gt;&gt; &lt;&lt;single-threaded linear&gt;&gt; &lt;&lt;Useful for applications running under cachegrind/callgrind&gt;&gt; &lt;&lt;simple&gt;&gt; &lt;&lt;single-threaded&gt;&gt; &lt;&lt;Useful for applications running under cachegrind/callgrind.&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/good_memory_allocator/latest/good_memory_allocator/" id="1251">
        <title>good_memory_allocator - Rust#__#&lt;&lt;linked list#green&gt;&gt; &lt;&lt;inspired by the dlmalloc&gt;&gt; &lt;&lt;no_std#green&gt;&gt; &lt;&lt;overhead for each allocation is a single usize&gt;&gt; &lt;&lt;over memory efficiency#red&gt;&gt; &lt;&lt;but also provides very good memory utilization#green&gt;&gt; &lt;&lt;smallbins, they are data structures used by the allocator to keep track of free chunks&gt;&gt; &lt;&lt;Each smallbin&gt;&gt; &lt;&lt;multiple alignment sub-bins&gt;&gt; &lt;&lt;lot of relatively small allocation&gt;&gt; &lt;&lt;lot of allocations with relatively large&gt;&gt; &lt;&lt;power of 2 for the alignemnt sub-bins amount&gt;&gt; &lt;&lt;utilization of the smallbins&gt;&gt; &lt;&lt;amount of alignment sub bins must be at least 2&gt;&gt; &lt;&lt;uch as operating system kernels#blue&gt;&gt; &lt;&lt;heavily tested&gt;&gt; &lt;&lt;fuzzing&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=109717" id="1252">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.rs/slab/latest/slab/" id="1253">
        <title>slab - Rust#__#&lt;&lt;backed by a Vec&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/hawkw/sharded-slab/blob/main/README.md" id="1254">
        <title>sharded-slab/README.md at main · hawkw/sharded-slab</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=678113" id="1255">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://redis.io/blog/using-the-redis-allocator-in-rust/" id="1368">
        <title>Using the Redis Allocator in Rust - Redis#__#&lt;&lt;shared libraries&gt;&gt; &lt;&lt;Rust will use the System allocator&gt;&gt; &lt;&lt;provided by the OS&gt;&gt; &lt;&lt;malloc(3) function&gt;&gt; &lt;&lt;Redis may not be using the system allocator at all, relying on jemalloc instead#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://smallcultfollowing.com/babysteps/blog/2014/11/14/allocators-in-rust/" id="1369">
        <title>Allocators in Rust · baby steps#__#&lt;&lt;two partial truths:&gt;&gt; &lt;&lt;better to have one global allocator#green&gt;&gt; &lt;&lt;than two#red&gt;&gt; &lt;&lt;all designed to be&gt;&gt; &lt;&lt;the only allocator in the system#blue&gt;&gt; &lt;&lt;“slop”, allocating more memory than they need#blue&gt;&gt; &lt;&lt;amortizing the cost of metadata#green&gt;&gt; &lt;&lt;over many allocations&gt;&gt; &lt;&lt;two different allocators, you are paying those costs twice#red&gt;&gt; &lt;&lt;allocator tends to be a hot path#blue&gt;&gt; &lt;&lt;two copies of it#red&gt;&gt; &lt;&lt;less room in the instruction cache#red&gt;&gt; &lt;&lt;Some allocators are more efficient&gt;&gt; &lt;&lt;default allocators shipped with libc#red&gt;&gt; &lt;&lt;not to be very good#red&gt;&gt; &lt;&lt;One particularly good allocator is jemalloc#green&gt;&gt; &lt;&lt;both in performance#green&gt;&gt; &lt;&lt;memory use#green&gt;&gt; &lt;&lt;jemalloc offers an extended interface#green&gt;&gt; &lt;&lt;Rust can take advantage of#green&gt;&gt; &lt;&lt;specifying the sizes of a memory block when it is freed#green&gt;&gt; &lt;&lt;eallocate memory in place when possible#green&gt;&gt; &lt;&lt;linked into a larger C program#red&gt;&gt; &lt;&lt;Rust use jemalloc&gt;&gt; &lt;&lt;even when the C program within which Rust is embedded does not?#red&gt;&gt; &lt;&lt;core question&gt;&gt; &lt;&lt;discussing here is really the default behavior#blue&gt;&gt; &lt;&lt;users can opt#green&gt;&gt; &lt;&lt;However, it would require recompiling Rust itself#red&gt;&gt; &lt;&lt;jemalloc APIs for sized deallocation and reallocation&gt;&gt; &lt;&lt;measureable effect in micro-benchmarks#green&gt;&gt; &lt;&lt;not aware of any measurements on larger scale Rust applications#red&gt;&gt; &lt;&lt;but there are definitely scenarios#green&gt;&gt; &lt;&lt;advanced APIs&gt;&gt; &lt;&lt;November 2014&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://itfanr.gitbooks.io/rust-doc-en/content/custom-allocators.html" id="1370">
        <title>Custom Allocators · rust-doc-en#__#&lt;&lt;Binaries generated by the compiler will use alloc_jemalloc by default&gt;&gt; &lt;&lt;Dynamic and static libraries, however, will use alloc_system by default.&gt;&gt; &lt;&lt;#![feature(alloc_system)]&gt;&gt; &lt;&lt;extern crate alloc_system;&gt;&gt; &lt;&lt;the binary generated will not link to jemalloc#red&gt;&gt; &lt;&lt;but instead use the system allocator#green&gt;&gt; &lt;&lt;a dynamic library which uses jemalloc by default#green&gt;&gt; &lt;&lt;#![feature(alloc_jemalloc)]&gt;&gt; &lt;&lt;#![crate_type = &quot;dylib&quot;]&gt;&gt; &lt;&lt;extern crate alloc_jemalloc;&gt;&gt; &lt;&lt;/ Only needed for rustdoc --test&gt;&gt; &lt;&lt;#![feature(lang_items)]&gt;&gt; &lt;&lt;instructed that this crate is an allocator&gt;&gt; &lt;&lt;#![feature(allocator)]&gt;&gt; &lt;&lt;#![allocator]&gt;&gt; &lt;&lt;// Allocators are not allowed to depend on the standard library#red&gt;&gt; &lt;&lt;#![no_std]&gt;&gt; &lt;&lt;#![crate_name = &quot;my_allocator&quot;]&gt;&gt; &lt;&lt;#![crate_type = &quot;rlib&quot;]&gt;&gt; &lt;&lt;/ Our system allocator will use the in-tree libc crate for FFI&gt;&gt; &lt;&lt;currently the external (crates.io) libc cannot be used#red&gt;&gt; &lt;&lt;`#![no_std]` isn&apos;t stable yet#red&gt;&gt; &lt;&lt;#![feature(libc)]&gt;&gt; &lt;&lt;extern crate libc;&gt;&gt; &lt;&lt;standard `malloc` and `realloc`#red&gt;&gt; &lt;&lt;not provide#red&gt;&gt; &lt;&lt;communicate alignment#red&gt;&gt; &lt;&lt;Any one artifact may only be linked to at most one allocator.#red&gt;&gt; &lt;&lt;Binaries, dylibs, and staticlibs must link to exactly one#red&gt;&gt; &lt;&lt;if none have been explicitly chosen&gt;&gt; &lt;&lt;compiler will choose one#green&gt;&gt; &lt;&lt;rlibs do not need to link to an allocator&gt;&gt; &lt;&lt;(but still can)#green&gt;&gt; &lt;&lt;consumer of an allocator is tagged with #![needs_allocator]&gt;&gt; &lt;&lt;e.g. the liballoc crate currently&gt;&gt; &lt;&lt;#[allocator] crate cannot transitively depend on a crate which needs an allocator#red&gt;&gt; &lt;&lt;allocators must restrict themselves to libcore currently#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=700193" id="1371">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://ysantos.com/blog/malloc-in-rust" id="1372">
        <title>Investigating Memory Allocations in Rust | Y. Santos Personal Page#__#&lt;&lt;Jan, 2022&gt;&gt; &lt;&lt;parse&gt;&gt; &lt;&lt;arithmetic expressions&gt;&gt; &lt;&lt;simple arithmetic&gt;&gt; &lt;&lt;only numbers, the 4 basic operations, and parentheses&gt;&gt; &lt;&lt;performance bottleneck of this library&gt;&gt; &lt;&lt;not be in the loops and comparisons of the parser,#green&gt;&gt; &lt;&lt;much slower memory allocations#red&gt;&gt; &lt;&lt;Tracing Memory Allocation Syscalls&gt;&gt; &lt;&lt;In Linux&gt;&gt; &lt;&lt;system calls brk, mmap and mmap2&gt;&gt; &lt;&lt;strace&gt;&gt; &lt;&lt;built it in release#green&gt;&gt; &lt;&lt;strace -f -e brk,mmap,mmap2 -- ./target/release/alloc-test#green&gt;&gt; &lt;&lt;2&gt;&amp;1 | grep &apos;brk\|mmap&apos; | sed -e &apos;s/^\(.*\)(.*/\1/&apos; | sort | uniq -c#green&gt;&gt; &lt;&lt;just count the allocations:&gt;&gt; &lt;&lt;22 memory allocation syscalls#red&gt;&gt; &lt;&lt;a program that does nothing#red&gt;&gt; &lt;&lt;C (which has “no runtime”) makes these 6 calls#red&gt;&gt; &lt;&lt;in assembly&gt;&gt; &lt;&lt;assembly program does not make any memory syscalls by default#green&gt;&gt; &lt;&lt;C executable has some dynamically linked&gt;&gt; &lt;&lt;ldd success_c&gt;&gt; &lt;&lt;linux-vdso.so.1&gt;&gt; &lt;&lt;libc.so.6&gt;&gt; &lt;&lt;Rust program:&gt;&gt; &lt;&lt;ldd target/release/alloc-test&gt;&gt; &lt;&lt;linux-vdso.so.1 (0x00007ffd&gt;&gt; &lt;&lt;libgcc_s.so.1&gt;&gt; &lt;&lt;librt.so.1&gt;&gt; &lt;&lt;libpthread.so.0&gt;&gt; &lt;&lt;libm.so.6&gt;&gt; &lt;&lt;libdl.so.2&gt;&gt; &lt;&lt;libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1&gt;&gt; &lt;&lt;/lib64/ld-linux-x86-64.so.2&gt;&gt; &lt;&lt;/lib64/ld-linux-x86-64.so.2 (0x00007f1&gt;&gt; &lt;&lt;success_asm: ELF 64-bit LSB exe&gt;&gt; &lt;&lt;success_c: ELF 64-bit LSB shared&gt;&gt; &lt;&lt;target/release/alloc-test: ELF 64-bit LSB shared&gt;&gt; &lt;&lt;object symbols metadata&gt;&gt; &lt;&lt;not stripped#green&gt;&gt; &lt;&lt;non-stripped binary may contain metadata#green&gt;&gt; &lt;&lt;seen with the nm utility&gt;&gt; &lt;&lt;nm success_c&gt;&gt; &lt;&lt;Rust binary in comparison has 677#red&gt;&gt; github.com/johnthagen/min-sized-rust&lt;&lt;guide on how to reduce the size of our Rust binary#red&gt;&gt; &lt;&lt;strip target/release/alloc-test&gt;&gt; &lt;&lt;release binary has 3.5MB#red&gt;&gt; &lt;&lt;strip reduced our binary to only 287KB#green&gt;&gt; &lt;&lt;C binary though, which only has 8168 bytes#blue&gt;&gt; &lt;&lt;After stripping, the C binary goes to 6056 bytes#green&gt;&gt; &lt;&lt;binary size to 239KB:&gt;&gt; &lt;&lt;opt-level = &quot;z&quot;&gt;&gt; &lt;&lt;lto = true&gt;&gt; &lt;&lt;codegen-units = 1&gt;&gt; &lt;&lt;panic = &quot;abort&quot;&gt;&gt; &lt;&lt;also fewer memory allocation syscalls:#green&gt;&gt; &lt;&lt;removing the panic = &quot;abort&quot; did not change those numbers&gt;&gt; &lt;&lt;Failed Attempt with ltrace&gt;&gt; &lt;&lt;build in debug mode&gt;&gt; &lt;&lt;gdb target/debug/alloc-test&gt;&gt; &lt;&lt;put a breakpoint&gt;&gt; &lt;&lt;b malloc&gt;&gt; &lt;&lt;Function &quot;malloc&quot; not defined.#blue&gt;&gt; &lt;&lt;r (run)&gt;&gt; &lt;&lt;bt (backtrace)&gt;&gt; &lt;&lt;dl-minimal.c&gt;&gt; &lt;&lt;Linux dynamic linker/loader&gt;&gt; &lt;&lt;New syscalls will only be made if malloc needs more space&gt;&gt; &lt;&lt;library/std/src/panicking.rs@2&gt;&gt; &lt;&lt;lang_start_internal@1&gt;&gt; &lt;&lt;#[inline(never)]#green&gt;&gt; &lt;&lt;#[inline(never)] because this function was being inlined#red&gt;&gt; &lt;&lt;I could not set a breakpoint at actual_code#red&gt;&gt; &lt;&lt;nm did not show any symbol for it in the binary#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://notes.iveselov.info/programming/allocation-api-and-allocators" id="1373">
        <title>Allocation API, allocators and virtual memory | IV Notes#__#to be SKIMMED&lt;&lt;casually perused&gt;&gt; &lt;&lt;standard library doc&gt;&gt; &lt;&lt;section &quot;How to read this documentation&quot;&gt;&gt; &lt;&lt;dynamic memory even before running main&gt;&gt; &lt;&lt;virtual memory@2&gt;&gt; &lt;&lt;paging&gt;&gt; &lt;&lt;brk&gt;&gt; &lt;&lt;mmap&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/71264965/what-is-the-difference-between-the-allocators-global-and-system" id="1374">
        <title>rust - What is the difference between the allocators &quot;Global&quot; and &quot;System&quot;? - Stack Overflow#__#&lt;&lt;Rust 1.60 nightly&gt;&gt; &lt;&lt;std::alloc::System&gt;&gt; &lt;&lt;standard library types&gt;&gt; &lt;&lt;allocation mechanism of the operating system&gt;&gt; &lt;&lt;libc: malloc -&gt; brk()/mmap()&gt;&gt; &lt;&lt;alloc::alloc::Global is the default implementation for the allocator_api&gt;&gt; &lt;&lt;Vectors, Boxes, etc&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=758611" id="1375">
        <title>-----</title>
      </bookmark>
    </folder>
    <folder id="280">
      <title>allocators on Unix</title>
      <bookmark href="https://news.ycombinator.com/item?id=23080290" id="727">
        <title>Why does musl make my Rust code so slow? | Hacker News#__#&lt;&lt;May 5, 2020@25#red&gt;&gt; &lt;&lt;Under most workloads jemalloc will use much more memory#red&gt;&gt; &lt;&lt;than ptmalloc (glibc)#green&gt;&gt; &lt;&lt;Jemalloc uses a lot less (virtual&gt;&gt; &lt;&lt;glibc allocator wastes quite a lot of memory mappings#red&gt;&gt; &lt;&lt;never cleans them up even if a thread only had a burst#red&gt;&gt; &lt;&lt;nobody cares about virtual#red&gt;&gt; &lt;&lt;Most allocators, including jemalloc, tcmalloc, mimalloc, etc. have a &quot;hardened&quot; mode, that people can opt into#green&gt;&gt; &lt;&lt;If I&apos;m using Rust#green&gt;&gt; &lt;&lt;double frees are caught at compile-time&gt;&gt; &lt;&lt;rather not pay for them at run-time.#red&gt;&gt; &lt;&lt;5kloc is about 10x larger than musl&apos;s existing (old) mallo#red&gt;&gt; &lt;&lt;mimalloc is around 6k&gt;&gt; &lt;&lt;Rust compiler is making really heavy use of rapid allocation/freeing cycles#red&gt;&gt; &lt;&lt;strace#green&gt;&gt; &lt;&lt;only overhead you have in Docker&gt;&gt; &lt;&lt;syscalls (due to permission checks, namespaces, ...#green&gt;&gt; &lt;&lt;everything else runs at 100%#green&gt;&gt; &lt;&lt;unlike assisted virtualization#red&gt;&gt; &lt;&lt;at least IOMMU overhead plus overhead for anything involving the filesystem#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://dev.haiku-os.org/ticket/13554" id="728">
        <title>#13554 (Switch system allocator) – Haiku#__#As of Dec 2022: Last modified in Nov 2021!&lt;&lt;Last modified#red&gt;&gt; &lt;&lt;jemalloc@1&gt;&gt; &lt;&lt;tweakable, very fast#green&gt;&gt; &lt;&lt;Bigger memory footprint#red&gt;&gt; &lt;&lt;optimized for speed over memory, up to 33% overhead for smaller (~30MB)&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/libc_alloc/latest/libc_alloc/" id="729">
        <title>libc_alloc - Rust</title>
      </bookmark>
    </folder>
    <folder id="281">
      <title>build rustc</title>
      <bookmark href="https://rustc-dev-guide.rust-lang.org/building/prerequisites.html" id="730">
        <title>Prerequisites - Guide to Rustc Development#__#&lt;&lt;If building LLVM from source (the default)#red&gt;&gt; &lt;&lt;ninja is recommended#green&gt;&gt; &lt;&lt;only use ./x.py check on your local#green&gt;&gt; &lt;&lt;let the CI build test your changes when you push to a PR branch.#green&gt;&gt;&lt;&lt;some Linux distributions such as Fedora and Ubuntu#red&gt;&gt; &lt;&lt;30GB+ of free disk#red&gt;&gt; &lt;&lt;Otherwise, you will have to keep clearing incremental caches#red&gt;&gt; &lt;&lt;half an hour on my moderately powerful laptop#red&gt;&gt; &lt;&lt;Like cargo, the build system will use as many cores as possible&gt;&gt; &lt;&lt;this can cause you to run low on memory#red&gt;&gt; &lt;&lt;use -j to adjust the number concurrent#green&gt;&gt; &lt;&lt;~45 minutes to an hour, you are probably spending most of the time swapping#red&gt;&gt; &lt;&lt;try using -j1#green&gt;&gt; &lt;&lt;first time you build the compiler, LLVM will also be built#red&gt;&gt; &lt;&lt;unless you use CI-built LLVM (see#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rustc-dev-guide.rust-lang.org/building/suggested.html" id="731">
        <title>Suggested Workflows - Guide to Rustc Development#__#&lt;&lt;pinned, nightly versions of tools like rustfmt&gt;&gt; &lt;&lt;cargo fmt work correctly in your repo, run#green&gt;&gt; &lt;&lt;cd &lt;path to rustc repo&gt;&gt; &lt;&lt;rustup override set nightly#green&gt;&gt; &lt;&lt;This does not allow you to build rustc with cargo directly.#red&gt;&gt; &lt;&lt;still have to use x.py#green&gt;&gt; &lt;&lt;this just lets you use cargo fmt#green&gt;&gt; &lt;&lt;optimize = false makes the compiler too slow for tests#red&gt;&gt; &lt;&lt;However, to improve the test cycle#green&gt;&gt; &lt;&lt;disable optimizations selectively only for the crates you&apos;ll have to rebuild#green&gt;&gt; &lt;&lt;For example@1#red&gt;&gt; &lt;&lt;rustc_driver crates take the most time to incrementally rebuild#red&gt;&gt; &lt;&lt;in the root Cargo.toml:#green&gt;&gt; &lt;&lt;[profile.release.package.rustc_driver]#green&gt;&gt; &lt;&lt;opt-level = 0@1#green&gt;&gt; &lt;&lt;multiple branches at the same time#green&gt;&gt; &lt;&lt;multiple clones of the repository, but that would mean storing the Git metadata multiple times#red&gt;&gt; &lt;&lt;Git has a better solution called worktrees#green&gt;&gt; &lt;&lt;because all of the worktrees share the same object database, if you update a branch (e.g. master) in any of them, you can use the new commits from any of the worktrees#green&gt;&gt; &lt;&lt;submodules do not get shared#red&gt;&gt; &lt;&lt;still be cloned multiple times#red&gt;&gt; &lt;&lt;inside the root directory#green&gt;&gt; &lt;&lt;git worktree add ../rust2#green&gt;&gt; &lt;&lt;new worktree for a new branch based on master#green&gt;&gt; &lt;&lt;git worktree add -b my-feature ../rust2 master#green&gt;&gt; &lt;&lt;pre-commit file in .git/hooks#green&gt;&gt; &lt;&lt;x.py test tidy --bless on each commit#green&gt;&gt; &lt;&lt;prebuilt git hook#green&gt;&gt; &lt;&lt;By default, rust-analyzer runs the cargo check and rustfmt#green&gt;&gt; &lt;&lt;hacking on rustc#green&gt;&gt; &lt;&lt;&quot;rust-analyzer.checkOnSave.overrideCommand&quot;: [#green&gt;&gt; &lt;&lt;&quot;rust-analyzer.rustfmt.overrideCommand&quot;: [#green&gt;&gt; &lt;&lt;If running x.py check on save is inconvenient#red&gt;&gt; &lt;&lt;VS Code you can use a Build Task#green&gt;&gt; &lt;&lt;git bisect#green&gt;&gt; &lt;&lt;sometimes useful to put off tests#green&gt;&gt; &lt;&lt;even when you are not 100% sure the code will work#red&gt;&gt; &lt;&lt;fine-grained set of commits#green&gt;&gt;&lt;&lt;--keep-stage 1 is that we just assume that the old standard library can be re-used&gt;&gt; &lt;&lt;if you are editing the &quot;metadata&quot; part of the compiler#red&gt;&gt; &lt;&lt;Faster builds with --keep-stage#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rustc-dev-guide.rust-lang.org/getting-started.html" id="732">
        <title>Getting Started - Guide to Rustc Development#__#&lt;&lt;-j to adjust the number concurrent jobs#green&gt;&gt; &lt;&lt;If a full build takes more than ~45 minutes to an hour, you are probably spending most of the time swapping memory#red&gt;&gt; &lt;&lt;try using -j1#green&gt;&gt; &lt;&lt;Like cargo, the build system will use as many cores as possible&gt;&gt; &lt;&lt;On a slow machine#red&gt;&gt; &lt;&lt;./x.py check#green&gt;&gt; &lt;&lt;tests run when you push to GitHub#green&gt;&gt; &lt;&lt;&gt;=30GB of free disk#red&gt;&gt; &lt;&lt;If you don&apos;t have too much free disk space#red&gt;&gt; &lt;&lt;turn off incremental compilation#red&gt;&gt; &lt;&lt;make compilation take longer (especially after a rebase)#red&gt;&gt; &lt;&lt;but will save a ton of space#green&gt;&gt; &lt;&lt;incremental caches@1#red&gt;&gt; &lt;&lt;don&apos;t need to clone the submodules at this time&gt;&gt; &lt;&lt;But if you want to, you can#green&gt;&gt; &lt;&lt;# first time&gt;&gt; &lt;&lt;git submodule update --init --recursive#green&gt;&gt; &lt;&lt;# subsequent times&gt;&gt; &lt;&lt;git submodule update@1#green&gt;&gt; &lt;&lt;rustc is a bootstrapping compiler, which means that it is written in Rust#blue&gt;&gt; &lt;&lt;use the current beta compiler#blue&gt;&gt; &lt;&lt;Then, we use that compiler to build itself#green&gt;&gt; &lt;&lt;tool ./x.py&gt;&gt; &lt;&lt;building the compiler, the standard libraries, and rustdoc&gt;&gt; &lt;&lt;also used for driving CI#green&gt;&gt; &lt;&lt;building the final release artifacts#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="282">
      <title>compiler</title>
      <bookmark href="https://forge.rust-lang.org/infra/other-installation-methods.html" id="733">
        <title>Other Installation Methods - Rust Forge#__#&lt;&lt;directly download rustup-init for the platform of your choice:#green&gt;&gt; &lt;&lt;i686-unknown-linux-gnu#green&gt;&gt; &lt;&lt;rustup-init can be configured interactively#green&gt;&gt; &lt;&lt;--help to rustup-init#green&gt;&gt;&lt;&lt;come with rustc, cargo, rustdoc, the standard library#green&gt;&gt; &lt;&lt;but do not provide access to additional cross-targets like rustup#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html" id="734">
        <title>How to build and run the compiler - Rust Compiler Development Guide#__#&lt;&lt;cargo install --path src/tools/x#green&gt;&gt; &lt;&lt;x.py setup#green&gt;&gt; &lt;&lt;will create a config.toml#green&gt;&gt; &lt;&lt;llvm.ccache#green&gt;&gt; &lt;&lt;[llvm]&gt;&gt; &lt;&lt;download-ci-llvm = true#green&gt;&gt; &lt;&lt;assertions = true#red&gt;&gt; &lt;&lt;[rust]#green&gt;&gt; &lt;&lt;debug-logging = true#red&gt;&gt; &lt;&lt;debug-assertions#red&gt;&gt; &lt;&lt;incremental = true#green&gt;&gt; &lt;&lt;change settings related to LLVM, then#red&gt;&gt; &lt;&lt;rm -rf build#green&gt;&gt; &lt;&lt;./x.py clean will not cause a rebuild of LLVM.#red&gt;&gt; &lt;&lt;src/tools/x#green&gt;&gt; &lt;&lt;./x.py build#green&gt;&gt; &lt;&lt;cutting down compile times#green&gt;&gt; &lt;&lt;--stage N       stage to build#green&gt;&gt; &lt;&lt;--keep-stage N#green&gt;&gt; &lt;&lt;For hacking, often building the stage 1#green&gt;&gt; &lt;&lt;for final testing and release, the stage 2#green&gt;&gt; &lt;&lt;./x.py check is really fast#green&gt;&gt; &lt;&lt;&quot;go to&quot; command for building a local rust:&gt;&gt; &lt;&lt;./x.py build -i library/std#green&gt;&gt; &lt;&lt;look like it only builds std#red&gt;&gt; &lt;&lt;unless you use #![no_std] or #![no_core]#red&gt;&gt; &lt;&lt;-i, --incremental#green&gt;&gt; &lt;&lt;-j, --jobs JOBS#green&gt;&gt; &lt;&lt;incremental cannot be used to speed up making the stage1 libraries#red&gt;&gt; &lt;&lt;building the stage1 std is a bottleneck#red&gt;&gt; &lt;&lt;full rustc build#green&gt;&gt; &lt;&lt;./x.py build --stage 2 compiler/rustc#green&gt;&gt; &lt;&lt;--build BUILD   build target of the stage0#green&gt;&gt; &lt;&lt;only the core library#green&gt;&gt; &lt;&lt;./x.py build --stage 0 library/core#green&gt;&gt; &lt;&lt;only the core and proc_macro libraries#green&gt;&gt; &lt;&lt;./x.py build --stage 0 library/core library/proc_macro#green&gt;&gt; &lt;&lt;Build std using the stage1#green&gt;&gt; &lt;&lt;rustup toolchain link stage1 build/&lt;host-triple&gt;/stage1#green&gt;&gt; &lt;&lt;--host HOST     host targets#green&gt;&gt; &lt;&lt;--target TARGET target targets#green&gt;&gt; &lt;&lt;incremental only works when you run the same compiler twice#red&gt;&gt; &lt;&lt;can also pass flags at the end#green&gt;&gt; &lt;&lt;rustc +stage1 -vV#green&gt;&gt; &lt;&lt;rustc 1.48.0-dev#green&gt;&gt; &lt;&lt;./x.py clean@1#green&gt;&gt; &lt;&lt;rm -rf build works too, but then you have to rebuild LLVM, which can take a long time#red&gt;&gt; &lt;&lt;to start fresh, but this is normally not the case#red&gt;&gt; &lt;&lt;may look like it only builds the standard library#red&gt;&gt; &lt;&lt;toolchain we&apos;ve built does not include cargo#red&gt;&gt; &lt;&lt;rustup will fall back to using cargo from the installed#green&gt;&gt; &lt;&lt;path suffixes for compiler, library, and src/tools directories#green&gt;&gt; &lt;&lt;x test tidy#green&gt;&gt; &lt;&lt;instead of x test src/tools/tidy#red&gt;&gt; &lt;&lt;x build std#green&gt;&gt; &lt;&lt;instead of x build library/std#red&gt;&gt; &lt;&lt;rustup toolchain link&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="283">
      <title>Kernel, OS, syscall...</title>
      <bookmark href="https://os.phil-opp.com/" id="735">
        <title>Writing an OS in Rust</title>
      </bookmark>
      <bookmark href="https://os.phil-opp.com/kernel-heap/" id="736">
        <title>Kernel Heap | Writing an OS in Rust (First Edition)</title>
      </bookmark>
      <bookmark href="https://intermezzos.github.io/book/second-edition/" id="737">
        <title>Preface - The intermezzOS Book#__#&lt;&lt;hobby operating system&gt;&gt; &lt;&lt;some assembly&gt;&gt; &lt;&lt;Writing an OS in Rust&gt;&gt; &lt;&lt;Philipp Oppermann&gt;&gt; &lt;&lt;doesn’t treat you as being stupid for not knowing&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.zdnet.com/article/rust-in-linux-where-we-are-and-where-were-going-next/#Steven%20Vaughan-Nichols" id="738">
        <title>Rust in Linux: Where we are and where we&apos;re going next | ZDNET</title>
      </bookmark>
      <bookmark href="https://www.jackos.io/rust-kernel/rust-for-linux.html" id="1935">
        <title>Linux kernel development | JackOS#__#&lt;&lt;vscode and docker&gt;&gt; &lt;&lt;connect into the docker#green&gt;&gt; &lt;&lt;Remote Development&gt;&gt; &lt;&lt;extension&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=564056" id="739">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/theseus-os/Theseus/blob/theseus_main/README.md" id="740">
        <title>Theseus/README.md at theseus_main · theseus-os/Theseus#__#&lt;&lt;shift OS responsibilities&gt;&gt; &lt;&lt;resource management&gt;&gt; &lt;&lt;into the compiler#green&gt;&gt; &lt;&lt;qemu qemu-kvm#red&gt;&gt; &lt;&lt;git submodule update --init --recursive&gt;&gt; &lt;&lt;64-bit Debian-based#red&gt;&gt; &lt;&lt;Arch Linux and Fedora have also been reported to work#green&gt;&gt; &lt;&lt;KVM will speed up the execution of QEMU#green&gt;&gt; &lt;&lt;To enable KVM support, add host=yes&gt;&gt; &lt;&lt;KVM acceleration is only supported on native Linux hosts&gt;&gt; &lt;&lt;VS Code&gt;&gt; &lt;&lt;x86 and x86_64 Assembly, by 13xforever&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.theseus-os.com/Theseus/book/index.html" id="741">
        <title>Introduction to Theseus OS - The Theseus OS Book#__#&lt;&lt;wish to enable any and every OS component to be replaced&gt;&gt; &lt;&lt;all layers of the system&gt;&gt; &lt;&lt;at runtime&gt;&gt; &lt;&lt;live evolution&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.theseus-os.com/Theseus/book/app/app.html" id="742">
        <title>Developing a Theseus Application - The Theseus OS Book#__#&lt;&lt;safe applications&gt;&gt; &lt;&lt;loaded into the same single address space as the rest of the OS&gt;&gt; &lt;&lt;run at the same kernel privilege level&gt;&gt; &lt;&lt;just like any other kernel crate&gt;&gt; &lt;&lt;unsafe code is forbidden)#red&gt;&gt; &lt;&lt;pub fn main(args: Vec&lt;String&gt;) -&gt; isize&gt;&gt; &lt;&lt;Theseus&apos;s build system will automatically build any crates in the applications/&gt;&gt; &lt;&lt;all you have to do is place your new application crate there&gt;&gt; &lt;&lt;name of the directory holding your crate&gt;&gt; &lt;&lt;must be the same as the name of the crate as specified in its Cargo.toml name#red&gt;&gt; &lt;&lt;a ported version of getopts&gt;&gt; &lt;&lt;Currently, applications can use any Theseus kernel crate as a direct dependency (via its Cargo.tom&gt;&gt; &lt;&lt;temporary&gt;&gt; &lt;&lt;this will be replaced with libtheseus&gt;&gt; &lt;&lt;with Rust&apos;s standard library&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.theseus-os.com/Theseus/book/subsystems/memory.html" id="743">
        <title>Memory Management - The Theseus OS Book#__#&lt;&lt;Single Address Space (SAS) OS&gt;&gt; &lt;&lt;Theseus&apos;s single address space&gt;&gt; &lt;&lt;is a virtual address space#green&gt;&gt; &lt;&lt;not a physical address space#red&gt;&gt; &lt;&lt;contiguous memory allocation#green&gt;&gt; &lt;&lt;guard pages to catch stack overflow#green&gt;&gt; &lt;&lt;precise, specific terminology and dedicated types#blue&gt;&gt; &lt;&lt;avoid confusion#red&gt;&gt; &lt;&lt;mixing up physical and virtual memory#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.theseus-os.com/Theseus/book/subsystems/heap.html" id="744">
        <title>Heap Allocators - The Theseus OS Book#__#&lt;&lt;can request a large allocation from the heap&gt;&gt; &lt;&lt;but in Theseus it will be backed by an individually-created MappedPages object of newly-allocated pages and frames#red&gt;&gt; &lt;&lt;generally less efficient to use the heap#red&gt;&gt; &lt;&lt;Heap allocators must implement Rust&apos;s GlobalAlloc&gt;&gt; &lt;&lt;heap: the default heap implementation&gt;&gt; &lt;&lt;a static singleton fixed-size block allocator&gt;&gt; &lt;&lt;the first heap initialized and created during early OS boot&gt;&gt; &lt;&lt;block_allocator: the underlying allocator&gt;&gt; &lt;&lt;optimizes allocations of common power-of-two sizes#red&gt;&gt; &lt;&lt;8 bytes, 32 bytes, etc.#red&gt;&gt; &lt;&lt;Uses the linked_list_allocator crate as a fallback for uncommon allocation sizes#red&gt;&gt; &lt;&lt;multiple_heaps: a more complex allocator that implements multiple heaps&gt;&gt; &lt;&lt;arbitrary sizes&gt;&gt; &lt;&lt;usage patterns&gt;&gt; &lt;&lt;Each internal heap instance is based on a zone allocator&gt;&gt; &lt;&lt;modified versions of slab allocators from the slabmalloc crate&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=739378" id="1256">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://www.drone-os.com/" id="1257">
        <title>Drone | An Embedded Operating System for writing real-time applications in Rust.</title>
      </bookmark>
      <bookmark href="https://gitlab.redox-os.org/redox-os/parallel" id="1258">
        <title>redox-os / Redox Parallel · GitLab</title>
      </bookmark>
      <bookmark href="https://github.com/mre/fcat" id="1259">
        <title>mre/fcat: A 3x faster implementation of cat, using splice</title>
      </bookmark>
      <bookmark href="https://github.com/rust-meetup-munich/slides/tree/master/2021" id="1260">
        <title>slides/2021 at master · rust-meetup-munich/slides</title>
      </bookmark>
      <bookmark href="https://github.com/cloudflare/boringtun" id="1261">
        <title>cloudflare/boringtun: Userspace WireGuard® Implementation in Rust</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/num_cpus" id="1262">
        <title>num_cpus - crates.io: cores threads#__#&lt;&lt;logical cores#green&gt;&gt; &lt;&lt;num_cpus::get()#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/sassman/rust-munich-meetup-5" id="1263">
        <title>sassman/rust-munich-meetup-5 - security</title>
      </bookmark>
      <bookmark href="https://github.com/harababurel/gcsf" id="1264">
        <title>harababurel/gcsf: a FUSE file system based on Google Drive</title>
      </bookmark>
      <bookmark href="https://www.tockos.org/" id="1265">
        <title>Tock Embedded Operating System</title>
      </bookmark>
      <bookmark href="https://github.com/kpcyrd/rshijack" id="1376">
        <title>kpcyrd/rshijack: tcp connection hijacker, rust rewrite of shijack - security</title>
      </bookmark>
      <bookmark href="https://github.com/hermitcore/rusty-hermit" id="1377">
        <title>hermitcore/rusty-hermit: RustyHermit - A Rust-based, lightweight unikernel</title>
      </bookmark>
      <bookmark href="https://github.com/sunfishcode/mustang" id="1378">
        <title>sunfishcode/mustang: Rust programs written entirely in Rust#__#&lt;&lt;isn&apos;t about making anything safer, for the foreseeable future#red&gt;&gt; &lt;&lt;major libc implementations are extraordinarily well tested and mature#green&gt;&gt; &lt;&lt;Linux on x86-64, x86, aarch64, and riscv64&gt;&gt; &lt;&lt;all Linux versions supported by Rust&gt;&gt; &lt;&lt;mustang::can_run_this!();&gt;&gt; &lt;&lt;does nothing in non-mustang-target builds&gt;&gt; &lt;&lt;using std as-is#green&gt;&gt; &lt;&lt;avoid ever having to reimplement std#red&gt;&gt; &lt;&lt;origin can do program startup in Rust#green&gt;&gt; &lt;&lt;rustix can do system calls in Rust#green&gt;&gt; &lt;&lt;new ABIs&gt;&gt; &lt;&lt;aren&apos;t limited to passing C-style argc/argv(/envp) convention#red&gt;&gt; mustang is related to bytecodealliance&lt;&lt;the chat&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/bytecodealliance/rustix" id="1379">
        <title>bytecodealliance/rustix: Safe Rust bindings to POSIX-ish APIs#__#&lt;&lt;syscalls&gt;&gt; &lt;&lt;references, slices#green&gt;&gt; &lt;&lt;io-lifetimes instead of raw file descriptors#green&gt;&gt; &lt;&lt;low-level#red&gt;&gt; &lt;&lt;two backends&gt;&gt; &lt;&lt;linux_raw&gt;&gt; &lt;&lt;x86-64, x86, aarch64, riscv64gc, powerpc64le, arm (v5 onwards), mipsel, and mips64el&gt;&gt; &lt;&lt;stable&gt;&gt; &lt;&lt;entirely in Rust#green&gt;&gt; &lt;&lt;avoiding libc, errno, and pthread cancellation#red&gt;&gt; &lt;&lt;specialized optimizations#green&gt;&gt; &lt;&lt;very efficient#green&gt;&gt; &lt;&lt;nightly Rust, they can often be fully inlined#green&gt;&gt; &lt;&lt;linux_raw backend is enabled by default&gt;&gt; &lt;&lt;io_uring&gt;&gt; &lt;&lt;I/O safety, and provenance#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/tock/tock/blob/master/doc/Design.md" id="1380">
        <title>tock/Design.md at master · tock/tock</title>
      </bookmark>
      <bookmark href="https://github.com/tock/tock" id="1381">
        <title>tock/tock: A secure embedded operating system for microcontrollers#__#&lt;&lt;embedded&gt;&gt; &lt;&lt;multiple concurrent#green&gt;&gt; &lt;&lt;Cortex-M and RISC-V&gt;&gt; &lt;&lt;protection, both from potentially malicious applications&gt;&gt; &lt;&lt;from device drivers.&gt;&gt; &lt;&lt;kernel and device drivers are written in Rust&gt;&gt; &lt;&lt;memory protection units to isolate applications&gt;&gt; &lt;&lt;each other and the kernel&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/sc" id="1382">
        <title>sc - crates.io: Rust Package Registry#__#&lt;&lt;stable (as of 1.59)&gt;&gt; &lt;&lt;aarch64&gt;&gt; &lt;&lt;riscv64&gt;&gt; &lt;&lt;x86_64&gt;&gt; &lt;&lt;supported platforms&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/cptpcrd/scall" id="1383">
        <title>cptpcrd/scall: Friendlier raw system calls for Rust.#__#&lt;&lt;fork of sc&gt;&gt; &lt;&lt;syscall! macro returns a Result&lt;usize, i32&gt;&gt;&gt; &lt;&lt;properly supports x86_64 FreeBSD and macOS&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/z4epwa/redox_os_080_is_now_released/" id="1384">
        <title>Redox OS 0.8.0 is now released! : rust#__#&lt;&lt;aarch64 is still broken with 0.8.0#red&gt;&gt; &lt;&lt;doc.redox-os.org/book/ch04-13-microkernels.html&gt;&gt; &lt;&lt;doc.redox-os.org/book/ch01-06-how-redox-compares.html&gt;&gt; &lt;&lt;porting nix to Redox&gt;&gt; &lt;&lt;Functions in relibc are implemented on demand.#green&gt;&gt; &lt;&lt;Compared to arm#red&gt;&gt; &lt;&lt;x86 is a walk in the park#green&gt;&gt; &lt;&lt;wiki.osdev.org#green&gt;&gt; &lt;&lt;Os.phil-opp.com#green&gt;&gt; &lt;&lt;for doing this in Rust&gt;&gt; &lt;&lt;Almost every ARM device needs a customized OS#red&gt;&gt; &lt;&lt;For x86, there is always osdev.org#green&gt;&gt; &lt;&lt;no major standards for ARM#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://medium.com/@cristianzsh/submitting-your-first-patch-to-the-linux-kernel-e81d2541fac6" id="1385">
        <title>Submitting your first patch to the Linux kernel | by Cristian Souza | Medium</title>
      </bookmark>
      <bookmark href="https://www.infoq.com/presentations/os-rust/" id="1494">
        <title>Is It Time to Rewrite the Operating System in Rust? - InfoQ#__#&lt;&lt;operating system is bigger than just a kernel#blue&gt;&gt; &lt;&lt;in JavaScript, it&apos;s very easy to accidentally have a closure that has a reference into this big object graph#red&gt;&gt; &lt;&lt;none of this can go away#red&gt;&gt; &lt;&lt;not a garbage collector#red&gt;&gt; &lt;&lt;heap scanner&gt;&gt; &lt;&lt;predictable performance&gt;&gt; &lt;&lt;latencies&gt;&gt; &lt;&lt;force the programmer to really think&gt;&gt; &lt;&lt;operating system, for that infrastructure&gt;&gt; &lt;&lt;self-preservation&gt;&gt; &lt;&lt;not going back to C++@1#red&gt;&gt; &lt;&lt;arithmetic overflows#red&gt;&gt; &lt;&lt;those are super hard#red&gt;&gt; &lt;&lt;you know how to free memory properly, and I know#red&gt;&gt; &lt;&lt;but I didn&apos;t realize that in that error condition, I was supposed to free the handle that you had given me, not you#red&gt;&gt; &lt;&lt;C is very, very hard to compose properly#red&gt;&gt; &lt;&lt;intrusive data structures&gt;&gt; &lt;&lt;terrible for Rust#red&gt;&gt; &lt;&lt;truly compose#green&gt;&gt; &lt;&lt;do what I&apos;d done in C#red&gt;&gt; &lt;&lt;I did it was so dumb&gt;&gt; &lt;&lt;outperformed my C@1#green&gt;&gt; &lt;&lt;this particular code spends all of its time searching&gt;&gt; &lt;&lt;in my C implementation was an AVL tree#red&gt;&gt; &lt;&lt;Rust uses B trees#green&gt;&gt; &lt;&lt;cache line&gt;&gt; &lt;&lt;B trees in Rust is total rocket science#green&gt;&gt; &lt;&lt;rocky.” And if there&apos;s a memory corruption#red&gt;&gt; &lt;&lt;throw out dead processes until we&apos;ve got memory freed up&gt;&gt; &lt;&lt;divergence between Linux and other kernels#red&gt;&gt; &lt;&lt;fail allocations in some isolated cases&gt;&gt; &lt;&lt;sleeping allocations&gt;&gt; &lt;&lt;unsettled area for Rust#red&gt;&gt; &lt;&lt;Redox&gt;&gt; &lt;&lt;Philip Opperman&apos;s&gt;&gt; &lt;&lt;uni-kernels, like QuiltOS&gt;&gt; &lt;&lt;only are going to allow for Rust programs&gt;&gt; &lt;&lt;Linux binary compatibility#red&gt;&gt; &lt;&lt;vfork and SIGCHLD#red&gt;&gt; &lt;&lt;for kernel developers, not because the safety argument isn&apos;t#blue&gt;&gt; &lt;&lt;tooling to not have these problems&gt;&gt; &lt;&lt;kernel, which has multiply owned data#red&gt;&gt; &lt;&lt;Why do we want to replace this working code#red&gt;&gt; &lt;&lt;Everything is on many lists#red&gt;&gt; &lt;&lt;don&apos;t want to rewrite ZFS in Rust#red&gt;&gt; &lt;&lt;unsafe@4#red&gt;&gt; &lt;&lt;ZIO pipeline#red&gt;&gt; &lt;&lt;FreeBSD#green&gt;&gt; &lt;&lt;harder to write user level#red&gt;&gt; &lt;&lt;operational failures#green&gt;&gt; &lt;&lt;Jan 16, 2019&gt;&gt; &lt;&lt;Bryan Cantrill is the CTO at Joyent&gt;&gt; &lt;&lt;SmartOS&gt;&gt; &lt;&lt;preprocessor is really essential; it’s essential for DTrace&gt;&gt; &lt;&lt;to ZFS&gt;&gt; &lt;&lt;the &apos;80s, C&gt;&gt; &lt;&lt;excellent fit for operating systems&gt;&gt; &lt;&lt;object-oriented industrial complex#red&gt;&gt; &lt;&lt;architects are going to architect this great#red&gt;&gt; &lt;&lt;Second System Syndrome@1#red&gt;&gt; &lt;&lt;Apple&apos;s Copland#red&gt;&gt; &lt;&lt;Sun had Spring#red&gt;&gt; &lt;&lt;all in C++.#red&gt;&gt; &lt;&lt;a hard drive stress test?#red&gt;&gt; &lt;&lt;at the time, this is a souped-up machine that had 32 megabytes#red&gt;&gt; &lt;&lt;need to have 128 meg#red&gt;&gt; &lt;&lt;Who has that?&gt;&gt; &lt;&lt;all of the Spring developers had that.#red&gt;&gt; &lt;&lt;Taligent was IBM and Apple#red&gt;&gt; &lt;&lt;from-scratch approach#red&gt;&gt; &lt;&lt;attracts all sorts of abstraction garbage#red&gt;&gt; &lt;&lt;JavaOS#red&gt;&gt; &lt;&lt;C++ efforts. They all kind of withered#red&gt;&gt; &lt;&lt;Haiku is an exception#green&gt;&gt; &lt;&lt;C++ kernels withered#red&gt;&gt; &lt;&lt;problems making a Ruby OS or a Python OS#red&gt;&gt; &lt;&lt;Go from an operating system perspective&gt;&gt; &lt;&lt;garbage collected#red&gt;&gt; &lt;&lt;memory leak#red&gt;&gt; &lt;&lt;a given C structure that&apos;s on 15 different AVL trees at the same time#red&gt;&gt; &lt;&lt;a B tree is@1#blue&gt;&gt; &lt;&lt;very intrusive#green&gt;&gt; &lt;&lt;run-time characteristics of an operating system#green&gt;&gt; &lt;&lt;development time#red&gt;&gt; &lt;&lt;Nobody cares how long it took you to develop#red&gt;&gt; &lt;&lt;care how fast it is#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/flosse/rust-os-comparison" id="1495">
        <title>flosse/rust-os-comparison: A comparison of operating systems written in Rust#__#&lt;&lt;written in Rust&gt;&gt; &lt;&lt;Most of them are proofs of concepts#red&gt;&gt; &lt;&lt;redox#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=453680" id="1496">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/ytrpss/aero_a_new_modern_os_made_in_rust_and_is_now_able/" id="1497">
        <title>Aero, a new modern OS made in rust and is now able to run Xorg! :) : rust#__#&lt;&lt;I am the creator of Redox&gt;&gt; &lt;&lt;impressive progress on Aero&gt;&gt; &lt;&lt;long mode#green&gt;&gt; &lt;&lt;5-level paging#green&gt;&gt; &lt;&lt;Xorg@1#green&gt;&gt; &lt;&lt;DWM (as an example for a window manager#green&gt;&gt; &lt;&lt;Good source-level compatibility with Linux#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/12p2rf7/aero_os_a_new_modern_operating_system_made_in/" id="1498">
        <title>(5) Aero OS: A new modern operating system made in Rust, now able to run the Links browser, Alacritty and much more! : rust#__#&lt;&lt;Alacritty@1&gt;&gt; &lt;&lt;mesa&gt;&gt; &lt;&lt;GIT&gt;&gt; &lt;&lt;GTK+-3&gt;&gt; &lt;&lt;source-level compatibility with Linux#blue&gt;&gt; &lt;&lt;run on real hardware#green&gt;&gt; &lt;&lt;not just on emulators or virtual machines#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=165150" id="1499">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://blog.lenot.re/a/introduction" id="1500">
        <title>Maestro - Introduction#__#&lt;&lt;x86&gt;&gt; &lt;&lt;32 bit&gt;&gt; &lt;&lt;135 out of 437 Linux system calls&gt;&gt; &lt;&lt;48 800 lines of code across 615 files&gt;&gt; &lt;&lt;counted using the cloc command&gt;&gt; &lt;&lt;Solfège: a boot system and daemon manager (kind of similar to systemd, but lighter)&gt;&gt; &lt;&lt;musl&gt;&gt; &lt;&lt;blimp: a package manager&gt;&gt; &lt;&lt;neofetch&gt;&gt; &lt;&lt;originally implemented using the C&gt;&gt; &lt;&lt;continued to be for roughly a year and a half&gt;&gt; &lt;&lt;became too hard to keep clean#red&gt;&gt; &lt;&lt;switch to Rust&gt;&gt; &lt;&lt;Restart the project from the beginning#green&gt;&gt; &lt;&lt;more innovative&gt;&gt; &lt;&lt;than just writing a Linux-like kernel in C#red&gt;&gt; &lt;&lt;safety of the Rust#green&gt;&gt; &lt;&lt;leverage some difficulty of kernel programming#green&gt;&gt; &lt;&lt;shift some responsibility#green&gt;&gt; &lt;&lt;over memory safety#red&gt;&gt; &lt;&lt;from the programmer#red&gt;&gt; &lt;&lt;to the compiler#green&gt;&gt; &lt;&lt;kernel development, debugging is very hard#red&gt;&gt; &lt;&lt;Documentation is often hard to find#red&gt;&gt; &lt;&lt;BIOS implementations may be flawed#red&gt;&gt; &lt;&lt;On boot, the kernel has full access to the memory#red&gt;&gt; &lt;&lt;allowed to write where it should not#red&gt;&gt; &lt;&lt;its own code, for example#red&gt;&gt; &lt;&lt;Troubleshooting memory leaks#red&gt;&gt; &lt;&lt;Tools such as valgrind cannot be used#red&gt;&gt; &lt;&lt;gdb can be used with QEMU and VMWare&gt;&gt; &lt;&lt;but the kernel may have a different behaviour#red&gt;&gt; &lt;&lt;on a different emulator or virtual#red&gt;&gt; &lt;&lt;those emulators may not support gdb (example VirtualBox)#red&gt;&gt; &lt;&lt;Some features in the support for gdb in QEMU or VMWare are missing#red&gt;&gt; &lt;&lt;gdb might even crash sometimes#red&gt;&gt; &lt;&lt;to this day, the best decision I have made for this project&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.research-collection.ethz.ch/handle/20.500.11850/155725" id="1501">
        <title>OS Development in Rust - Research Collection</title>
      </bookmark>
    </folder>
    <folder id="284">
      <title>musl &amp; allocator/jemalloc</title>
      <bookmark href="https://andygrove.io/2020/05/why-musl-extremely-slow/" id="745">
        <title>Why does musl make my Rust code so slow?#__#BEFORE jemalloc 1.2.1 (in August 2020)&lt;&lt;May 05, 2020#red&gt;&gt; &lt;&lt;RUN cargo build --release --target x86_64-unknown-linux-musl&gt;&gt; &lt;&lt;FROM alpine:&gt;&gt; &lt;&lt;ENTRYPOINT [&quot;/sbin/tini&quot;, &quot;--&quot;]&gt;&gt; &lt;&lt;Tini for better signal handling&gt;&gt; &lt;&lt;COPY --from=build /tmp/ballista/target/x86_64-unknown-linux-musl/release/executor /#green&gt;&gt; &lt;&lt;multi-threaded benchmarks on a 24-core desktop&gt;&gt; &lt;&lt;docker run --cpus=12#green&gt;&gt; &lt;&lt;30x longer than expected#red&gt;&gt; &lt;&lt;many threads using between 20% and 40% CPU#red&gt;&gt; &lt;&lt;jemalloc when compiled with musl on 64-bit#red&gt;&gt; &lt;&lt;segmentation faults#red&gt;&gt; &lt;&lt;possibly due to unsafe code in one of my dependencies#red&gt;&gt; &lt;&lt;fundamental issues with threading in musl#red&gt;&gt; &lt;&lt;debian:buster-slim@1#green&gt;&gt; &lt;&lt;Base image extends rust:nightly which extends debian:buster-slim@1#green&gt;&gt; &lt;&lt;FROM ballistacompute/rust-cached-deps:0.2.3 as build@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.facebook.com/notes/10158791475077200/" id="746">
        <title>(20+) Facebook</title>
      </bookmark>
      <bookmark href="https://www.christianfscott.com/making-rust-as-fast-as-go/" id="747">
        <title>Making rust as fast as go: Memory Allocator#__#&lt;&lt;more idiomatic the better#green&gt;&gt; &lt;&lt;zero cost abstractions#green&gt;&gt; &lt;&lt;lean on#blue&gt;&gt; &lt;&lt;No static global variables#red&gt;&gt; &lt;&lt;containers need to be heap allocated &amp; dynamically sized#green&gt;&gt; &lt;&lt;Don’t eliminate bounds checks#red&gt;&gt; &lt;&lt;string allocation#green&gt;&gt; &lt;&lt;have tests#green&gt;&gt; &lt;&lt;switch the allocator in the rust program to jemalloc#green&gt;&gt; &lt;&lt;extern crate jemallocator;#green&gt;&gt; &lt;&lt;#[global_allocator]#green&gt;&gt; &lt;&lt;static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;#green&gt;&gt; &lt;&lt;flamegraphs (generated with flamegraph-rs/flamegraph)#green&gt;&gt; &lt;&lt;system allocator on macos#red&gt;&gt; &lt;&lt;go uses a custom allocator#green&gt;&gt; &lt;&lt;If you’re writing a rust program that does a lot of allocation#blue&gt;&gt; &lt;&lt;consider using a non-system allocator#green&gt;&gt; &lt;&lt;Don’t make the mistake of extrapolating beyond that simple point#red&gt;&gt; &lt;&lt;microbenchmark#red&gt;&gt; &lt;&lt;perf gains from jemalloc are real#green&gt;&gt; &lt;&lt;go program parses the string once#green&gt;&gt; &lt;&lt;rust program parses it repeatedly inside every loop#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="285">
      <title>musl, glibc, relibc</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/oh2k8l/rust_musl_and_glibc_in_2021/" id="748">
        <title>Rust, musl and glibc in 2021 : rust#__#&lt;&lt;tcmalloc#green&gt;&gt; &lt;&lt;statically link glibc#red&gt;&gt; &lt;&lt;Since 1.2.1 (Release date: August 4, 2020) musl uses new allocator#green&gt;&gt; &lt;&lt;still looses to jemalloc#red&gt;&gt; &lt;&lt;OsString/OsStr#red&gt;&gt; &lt;&lt;Linux, we use getdents64, which lets you amortize syscalls#green&gt;&gt; &lt;&lt;and allocation#green&gt;&gt; &lt;&lt;I burnt out#red&gt;&gt; &lt;&lt;gruesome#red&gt;&gt; &lt;&lt;roll your own path types#red&gt;&gt; &lt;&lt;to preserve your sanity#red&gt;&gt; &lt;&lt;encapsulate any unsafe#red&gt;&gt; &lt;&lt;Windows version of the raw#red&gt;&gt; &lt;&lt;where I burnt out#red&gt;&gt; &lt;&lt;only doing custom support for some platforms#green&gt;&gt; &lt;&lt;std for the rest#green&gt;&gt; &lt;&lt;haven&apos;t worked on this branch in around 2 years#red&gt;&gt; &lt;&lt;just POSIX#green&gt;&gt; &lt;&lt;I like nix#green&gt;&gt; &lt;&lt;NixPath trait doesn&apos;t require memory allocation#green&gt;&gt; &lt;&lt;Depending on the concrete type&gt;&gt; &lt;&lt;may copy into a PATH_BUF-sized buffer on the stack#green&gt;&gt; &lt;&lt;nix::dir#green&gt;&gt; &lt;&lt;measuring CLI performance https://github.com/sharkdp/hyperfine#green&gt;&gt; &lt;&lt;progress bar, multiple runs#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://wiki.musl-libc.org/functional-differences-from-glibc.html" id="749">
        <title>musl libc - Functional differences from glibc</title>
      </bookmark>
      <bookmark href="https://kobzol.github.io/rust/ci/2021/05/07/building-rust-binaries-in-ci-that-work-with-older-glibc.html" id="750">
        <title>Building Rust binaries in CI that work with older GLIBC | Kobzol’s blog#__#&lt;&lt;GLIBC is not really amenable to static#red&gt;&gt; &lt;&lt;jemalloc allocator, and it refused to compile with musl#red&gt;&gt; &lt;&lt;default musl allocator can be quite slow#red&gt;&gt; &lt;&lt;find out what was causing my binary to require GLIBC 2.18&gt;&gt; &lt;&lt;objdump -T ./program | grep GLIBC_2.18&gt;&gt; &lt;&lt;printed the version of GLIBC&gt;&gt; &lt;&lt;ldd --version&gt;&gt; &lt;&lt;May 7, 2021&gt;&gt; &lt;&lt;Using cross&gt;&gt; &lt;&lt;still didn’t work#red&gt;&gt; &lt;&lt;Docker container with an older GLIBC version#green&gt;&gt; &lt;&lt;GitHub CI even offered#green&gt;&gt; &lt;&lt;container attribute of my CI#green&gt;&gt; &lt;&lt;container: quay.io/pypa/manylinux2010_x86_64#green&gt;&gt; &lt;&lt;NodeJS 12, which required at least GLIBC 2.17#red&gt;&gt; &lt;&lt;debugging GitHub Actions#green&gt;&gt; &lt;&lt;act. It allows you to run your GitHub workflows locally#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gitlab.redox-os.org/redox-os/relibc" id="751">
        <title>redox-os / relibc · GitLab#__#&lt;&lt;Redox and Linux@1&gt;&gt; &lt;&lt;mainly designed to be used under redox#green&gt;&gt; &lt;&lt;alternative to newlib#red&gt;&gt; &lt;&lt;also supports linux syscalls via the sc crate#red&gt;&gt; &lt;&lt;WIP#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://git.musl-libc.org/cgit/musl" id="752">
        <title>musl - musl - an implementation of the standard library for Linux-based systems</title>
      </bookmark>
      <bookmark href="https://www.etalabs.net/compare_libcs.html" id="753">
        <title>Comparison of C/POSIX standard library implementations for Linux#__#&lt;&lt;Performance comparison&gt;&gt; &lt;&lt;Debian-based distributions were using the eglibc&gt;&gt; &lt;&lt;“bloat” is used to refer to overhead#red&gt;&gt; &lt;&lt;glibc include the size of iconv modules, roughly 5M#red&gt;&gt; &lt;&lt;should be installed whether static or dynamic#red&gt;&gt; &lt;&lt;Overhead is measured in dirty pages, i.e. the amount of swap-backed physical memory&gt;&gt; &lt;&lt;Dynamic linking overhead is largely dependent on the dynamic linker#blue&gt;&gt; &lt;&lt;bug (design flaw) in uClibc#red&gt;&gt; &lt;&lt;glibc&apos;s bad performance could be fixed trivially&gt;&gt; &lt;&lt;substring search&gt;&gt; &lt;&lt;two-way algorithm is O(n)&gt;&gt; &lt;&lt;Boyer-Moore-like improvements&gt;&gt; &lt;&lt;typical runtime is proportional to n/m&gt;&gt; &lt;&lt;naive algorithm is O(nm)#red&gt;&gt; &lt;&lt;naive quicksort dietlibc uses has O(n) space#red&gt;&gt; &lt;&lt;stack, meaning it can and will lead to stack-overflow#red&gt;&gt; &lt;&lt;Quicksort is also O(n²) in time#red&gt;&gt; &lt;&lt;Shell sort is typically O(nα) where 1&lt;α&lt;2#green&gt;&gt; &lt;&lt;Some of the libraries reviewed are virtually impossible to use#red&gt;&gt; &lt;&lt;GNU binutils and gcc#red&gt;&gt; &lt;&lt;native toolchain@1#red&gt;&gt; &lt;&lt;LGPL v2.1-or-later is very flexible#green&gt;&gt; &lt;&lt;Over-use of mallo#red&gt;&gt; &lt;&lt;malloc&gt;&gt; &lt;&lt;too much malloc#red&gt;&gt; &lt;&lt;LGPL 2.1#red&gt;&gt; &lt;&lt;GPL 2@1#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://wiki.musl-libc.org/" id="754">
        <title>musl libc#__#&lt;&lt;musl’s major advantages#green&gt;&gt; &lt;&lt;over glibc and uClibc/uClibc-ng#red&gt;&gt; &lt;&lt;correctness, static linking support#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/optimizing-rust-binaries-observation-of-musl-versus-glibc-and-jemalloc-versus-system-alloc/8499?1=true" id="755">
        <title>Optimizing Rust Binaries: Observation of Musl versus Glibc and Jemalloc versus System Alloc - community - The Rust Programming Language Forum#__#&lt;&lt;Dec 2016#red&gt;&gt; &lt;&lt;musl-compiled Rust binaries are significantly faster#blue&gt;&gt; &lt;&lt;than their glibc#red&gt;&gt; &lt;&lt;50% to 1000% faster#blue&gt;&gt; &lt;&lt;ditching jemalloc#red&gt;&gt; &lt;&lt;for the system allocator#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/optimizing-rust-binaries-observation-of-musl-versus-glibc-and-jemalloc-versus-system-alloc/8499/9" id="756">
        <title>Optimizing Rust Binaries: Observation of Musl versus Glibc and Jemalloc versus System Alloc - community - The Rust Programming Language Forum#__#&lt;&lt;musl binary statically linked#blue&gt;&gt; &lt;&lt;fewer relocations#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="286">
      <title>Redox, ReLibc, Ralloc</title>
      <bookmark href="https://gitlab.redox-os.org/redox-os/relibc/-/blob/master/README.md" id="757">
        <title>README.md · master · redox-os / relibc · GitLab#__#&lt;&lt;Redox@1&gt;&gt; &lt;&lt;Linux&gt;&gt; &lt;&lt;mainly designed to be used under Redox&gt;&gt; &lt;&lt;alternative to newlib#green&gt;&gt; &lt;&lt;newlib&gt;&gt; &lt;&lt;but it also supports Linux system calls#green&gt;&gt; &lt;&lt;sc crate#green&gt;&gt; &lt;&lt;i686&gt;&gt; &lt;&lt;x86_64@6&gt;&gt; &lt;&lt;Aarch64 (ARM64)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gitlab.redox-os.org/redox-os/ralloc/-/project_members" id="758">
        <title>Members · redox-os / ralloc · GitLab</title>
      </bookmark>
      <bookmark href="https://gitlab.redox-os.org/redox-os/ralloc/-/blob/master/README.md" id="759">
        <title>README.md · master · redox-os / ralloc · GitLab#__#&lt;&lt;code quality very good#green&gt;&gt; &lt;&lt;as the default Redox#green&gt;&gt; &lt;&lt;userspace allocator#green&gt;&gt; &lt;&lt;Thread-local allocation&gt;&gt; &lt;&lt;global-local#green&gt;&gt; &lt;&lt;First-class debugger#green&gt;&gt; &lt;&lt;default: valgrind#green&gt;&gt; &lt;&lt;detect memory leaks and uninitialized use out-of-the-box&gt;&gt; &lt;&lt;Logging#green&gt;&gt; &lt;&lt;leak the vector&gt;&gt; &lt;&lt;splitting the original vector&gt;&gt; &lt;&lt;Vec::from_raw_parts(ptr, 100, 100)&gt;&gt; &lt;&lt;multi-stage verification#green&gt;&gt; &lt;&lt;ralloc cannot coexist with another allocator#red&gt;&gt; &lt;&lt;unless they&apos;re deliberately compatible#blue&gt;&gt; &lt;&lt;configure#green&gt;&gt; &lt;&lt;By changing the shim module#green&gt;&gt; &lt;&lt;reallocation strategy#green&gt;&gt; &lt;&lt;memtrim limits#green&gt;&gt; &lt;&lt;log target,#green&gt;&gt; &lt;&lt;ralloc::set_oom_handler#green&gt;&gt; &lt;&lt;ralloc::set_thread_oom_handler#green&gt;&gt; &lt;&lt;Partial deallocation#green&gt;&gt; &lt;&lt;split it#green&gt;&gt; &lt;&lt;create two vectors#green&gt;&gt; &lt;&lt;destructor of a and b is called#green&gt;&gt; &lt;&lt;security flag#green&gt;&gt; &lt;&lt;frees zeroing#green&gt;&gt; &lt;&lt;type checker#green&gt;&gt; &lt;&lt;affine types#green&gt;&gt; &lt;&lt;unit tests, even for private#green&gt;&gt; &lt;&lt;ralloc_shim, a minimal interface for platform dependent&gt;&gt; &lt;&lt;limitation of libc is that you cannot do reallocation inplace-only#red&gt;&gt; &lt;&lt;failable method that guarantees the absence of memcpy of the buffer#blue&gt;&gt; &lt;&lt;mem::forget(vec);#green&gt;&gt; &lt;&lt;ralloc::inplace_realloc#green&gt;&gt; &lt;&lt;ralloc::alloc&gt;&gt; &lt;&lt;ralloc::sbrk&gt;&gt; &lt;&lt;ralloc::try_alloc&gt;&gt; &lt;&lt;default shim implementation is wired to valgrind#green&gt;&gt; &lt;&lt;when the debugger feature is enabled&gt;&gt;&lt;&lt;somewhat slower than jemalloc#red&gt;&gt; &lt;&lt;hasn&apos;t been optimized yet#red&gt;&gt; &lt;&lt;authored&gt;&gt; &lt;&lt;6 years ago#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=296070" id="1936">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.rs/crate/ralloc/1.0.0/builds/102807" id="1937">
        <title>ralloc 1.0.0 - Docs.rs</title>
      </bookmark>
      <bookmark href="https://docs.rs/crate/ralloc/latest" id="1938">
        <title>ralloc 1.0.0 - Docs.rs</title>
      </bookmark>
    </folder>
    <folder id="1492">
      <title>rustup &amp; targets</title>
      <bookmark href="https://rust-lang.github.io/rustup/overrides.html" id="1601">
        <title>Overrides - The rustup book#__#&lt;&lt;toolchain override shorthand used on the command-line#green&gt;&gt; &lt;&lt;cargo +beta#green&gt;&gt; &lt;&lt;RUSTUP_TOOLCHAIN#green&gt;&gt; &lt;&lt;directory override, set with the rustup override#green&gt;&gt; &lt;&lt;rust-toolchain.toml#green&gt;&gt; &lt;&lt;chosen in the order listed above#green&gt;&gt; &lt;&lt;one exception#red&gt;&gt; &lt;&lt;directory overrides and the rust-toolchain.toml file are also preferred by their proximity to the current directory#green&gt;&gt; &lt;&lt;by walking up the directory tree toward the filesystem root#green&gt;&gt; &lt;&lt;verify which toolchain#green&gt;&gt; &lt;&lt;rustup show#green&gt;&gt; &lt;&lt;inside that directory, or one of its child directories#green&gt;&gt; &lt;&lt;rustup override set nightly-2014-12-18#green&gt;&gt; &lt;&lt;rustup override set 1.0.0#green&gt;&gt; &lt;&lt;rustup override unset#green&gt;&gt; &lt;&lt;per-directory overrides are stored in a configuration file in rustup&apos;s home#red&gt;&gt; &lt;&lt;rust-toolchain.toml or rust-toolchain#green&gt;&gt; &lt;&lt;If both files are present in a directory, the latter is used#red&gt;&gt; &lt;&lt;channel = &quot;nightly-2020-07-10&quot;#green&gt;&gt; &lt;&lt;toolchains named in these files have a more restricted form than rustup toolchains generally#red&gt;&gt; &lt;&lt;may only#red&gt;&gt; &lt;&lt;stable&apos;, &apos;beta&apos;, &apos;nightly#green&gt;&gt; &lt;&lt;version numbers, like &apos;1.0.0#green&gt;&gt; &lt;&lt;optionally an archive date, like &apos;nightly-2017-01-01#green&gt;&gt; &lt;&lt;not name custom toolchains#red&gt;&gt; &lt;&lt;nor host-specific toolchains#red&gt;&gt; &lt;&lt;To use a custom local toolchain, you can instead use a path#green&gt;&gt; &lt;&lt;path = &quot;/path/to/local/toolchain&quot;#green&gt;&gt; &lt;&lt;relative path#green&gt;&gt; &lt;&lt;rustup default nightly-2020-07-27&gt;&gt; &lt;&lt;profile = &quot;minimal&quot;#green&gt;&gt; &lt;&lt;targets = [ &quot;wasm32-unknown-unknown&quot;, &quot;thumbv2-none-eabi&quot; ]#green&gt;&gt; &lt;&lt;rust-toolchain.toml/rust-toolchain files are suitable to check in to source control&gt;&gt; &lt;&lt;If that&apos;s done, Cargo.lock should probably be tracked too#red&gt;&gt; &lt;&lt;profile setting names a group of components&gt;&gt; &lt;&lt;minimal, default, and complete&gt;&gt; &lt;&lt;if not specified#red&gt;&gt; &lt;&lt;default profile#red&gt;&gt; &lt;&lt;not necessarily used#red&gt;&gt; &lt;&lt;as a different default profile might have been set with rustup set profile#red&gt;&gt; &lt;&lt;components setting contains a list of additional components&gt;&gt; &lt;&lt;additive with the current profile&gt;&gt; &lt;&lt;different toolchains may have different components available#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://discord.com/channels/442252698964721669/443150878111694848/1250408179964313620" id="1602">
        <title>Discord#__#rust-toolchain.toml &lt;&lt;toolchain setting determines which cargo&gt;&gt; &lt;&lt;then cargo determines what a target&gt;&gt; &lt;&lt;no, you can&apos;t change which cargo is executed per cargo concept#red&gt;&gt; &lt;&lt;rustup doesn&apos;t know anything about Cargo.toml#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rustup/concepts/toolchains.html" id="1603">
        <title>Toolchains - The rustup book</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/rustc/platform-support.html" id="1604">
        <title>Platform Support - The rustc book#__#&lt;&lt;tiers#blue&gt;&gt; &lt;&lt;not guaranteed#red&gt;&gt; &lt;&lt;but tier 2 targets often work to quite a good degree#green&gt;&gt; &lt;&lt;Tier 2 target-specific code is not closely scrutinized#red&gt;&gt; &lt;&lt;quality control for these targets is likely to be lower&gt;&gt; &lt;&lt;rust-docs component is not usually built for tier 2#red&gt;&gt; &lt;&lt;official binary#green&gt;&gt; &lt;&lt;Automated tests are not always run#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=550141" id="1605">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/o8gxzn/understanding_why_a_rust_app_fails_within_an/" id="1606">
        <title>(1) Understanding why a rust app fails within an alpine container when compiling using target `aarch64-unknown-linux-gnu` and why I cant build using `aarch64-unknown-linux-musl` : rust#__#&lt;&lt;.cargo/config#green&gt;&gt; &lt;&lt;[target.aarch64-unknown-linux-musl]#green&gt;&gt; &lt;&lt;linker = &quot;aarch64-linux-gnu-gcc&quot;#green&gt;&gt; &lt;&lt;rustflags = [ &quot;-C&quot;, &quot;target-feature=+crt-static&quot;]#green&gt;&gt; &lt;&lt;If you cant build MUSL, which occasionally happens when a -sys crate doesn&apos;t support it#red&gt;&gt; &lt;&lt;install glibc on Alpine#green&gt;&gt; https://github.com/TheDutchMC/SkinFixer-API/blob/master/Dockerfile#L17&lt;&lt;installing glibc: GitHub Dockerfile#green&gt;&gt; &lt;&lt;shared library? .so file? You can&apos;t do that on musl#red&gt;&gt; &lt;&lt;statically linked and doesn&apos;t provide a ld interpreter#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rustup/installation/package-managers.html" id="1607">
        <title>Package managers - The rustup book#__#&lt;&lt;Normally, rustup will complain that you already have Rust installed in /usr#red&gt;&gt; &lt;&lt;can install Rust via rustup and have it coexist with your distribution&apos;s packaged Rust#green&gt;&gt; &lt;&lt;with rustup, pass the -y option to make it ignore the packaged Rust toolchain#green&gt;&gt; &lt;&lt;rustup toolchain link system /usr#green&gt;&gt; &lt;&lt;cargo +system build#green&gt;&gt; &lt;&lt;cargo +nightly build#green&gt;&gt; &lt;&lt;rustup default system&gt;&gt; &lt;&lt;If you do distribution Rust development#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://ithinuel.me/building-your-own-rust-toolchain/" id="1608">
        <title>Brewing your own Rust toolchain#__#&lt;&lt;./configure --enable-extended --tools=rsl,rustmft,src --prefix=~/.local --enable-local-rust#green&gt;&gt; &lt;&lt;./x.py install#green&gt;&gt; &lt;&lt;rustup link myrust $HOME/.local#green&gt;&gt; &lt;&lt;rustup default myrust#green&gt;&gt; &lt;&lt;./configure --disable-docs --prefix=~/.local --enable-local-rust#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rustup/concepts/channels.html" id="1609">
        <title>Channels - The rustup book#__#&lt;&lt;Install a specific date#green&gt;&gt; &lt;&lt;rustup toolchain install nightly-2020-07-27#green&gt;&gt; &lt;&lt;can then use overrides to pin to that specific release#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://wiki.archlinux.org/title/Rust" id="1610">
        <title>Rust - ArchWiki - OS or low level performance#__#&lt;&lt;rustup self update#green&gt;&gt; &lt;&lt;rustup is also available on the Arch#green&gt;&gt; &lt;&lt;rustup self update will not work when installed this way#red&gt;&gt; &lt;&lt;/usr/bin#green&gt;&gt; &lt;&lt;instead of ~/.cargo/bin#red&gt;&gt; &lt;&lt;rustup package does not install a toolchain#red&gt;&gt; &lt;&lt;user still needs to install a toolchain#green&gt;&gt; &lt;&lt;Rustup does not install some Rust commands#red&gt;&gt; &lt;&lt;rustfmt and rls#red&gt;&gt; &lt;&lt;rustup component add rustfmt#green&gt;&gt; &lt;&lt;rustup component add rls#green&gt;&gt; &lt;&lt;This will also suspend updates of the nightly channel, if they break rustfmt/rls#green&gt;&gt; &lt;&lt;rustup target list#green&gt;&gt; &lt;&lt;rustup toolchain install@1#green&gt;&gt; &lt;&lt;to always compile optimal#green&gt;&gt; &lt;&lt;~/.cargo/config@2#green&gt;&gt; &lt;&lt;rustup toolchain list#green&gt;&gt; &lt;&lt;[target.x86_64-unknown-linux-gnu]#green&gt;&gt; &lt;&lt;rustflags = [&quot;-Ctarget-cpu=native&quot;]#green&gt;&gt; &lt;&lt;for i686#green&gt;&gt; Double check - should it be [&quot;-Ctarget-cpu=native&quot;] instead?&lt;&lt;rustflags = [&quot;-C&quot;, &quot;target-cpu=native&quot;]#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rustup/issues/215" id="1827">
        <title>Index and list all available toolchains · Issue #215 · rust-lang/rustup#__#&lt;&lt;rustup target list#green&gt;&gt; &lt;&lt;rust-lang.github.io/rustup-components-history#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rustup-components-history/" id="1828">
        <title>Rustup packages availability on x86_64-unknown-linux-gnu</title>
      </bookmark>
      <bookmark href="https://docs.rust-embedded.org/embedonomicon/compiler-support.html" id="1829">
        <title>A note on compiler support - The Embedonomicon#__#&lt;&lt;These are built into the compiler&gt;&gt; &lt;&lt;rustc --print target-list | column&gt;&gt; &lt;&lt;print the specification of one of these targets&gt;&gt; &lt;&lt;rustc +nightly -Z unstable-options --print target-spec-json --target thumbv7m-none-eabi&gt;&gt; &lt;&lt;For some of the built-in target the Rust team distributes rust-std components via rustup#blue&gt;&gt; &lt;&lt;list of targets that have a rust-std component available via rustup#blue&gt;&gt; &lt;&lt;rustup target list | column&gt;&gt; &lt;&lt;core and std@1#blue&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1493">
      <title>zOther</title>
      <bookmark href="https://rust-lang.github.io/rfcs/2116-alloc-me-maybe.html" id="1611">
        <title>2116-alloc-me-maybe - The Rust RFC Book#__#&lt;&lt;Rust is designed for&gt;&gt; &lt;&lt;where desirable#green&gt;&gt; &lt;&lt;4 user profiles&gt;&gt; &lt;&lt;embedded devs just try to not dynamically allocate&gt;&gt; &lt;&lt;Memory should ideally all be allocated at startup#green&gt;&gt; &lt;&lt;simply aborting the process#green&gt;&gt; &lt;&lt;next-best choice&gt;&gt; &lt;&lt;all allocations for a task are usually isolated&gt;&gt; &lt;&lt;a single pool&gt;&gt; &lt;&lt;embedded developers are ready and willing&gt;&gt; &lt;&lt;have some system#green&gt;&gt; &lt;&lt;prevent infallible allocations from ever being used&gt;&gt; &lt;&lt;Gecko is also primarily&gt;&gt; &lt;&lt;Rust&apos;s current strategy@1&gt;&gt; &lt;&lt;liberally allocate&gt;&gt; &lt;&lt;happy to crash on OOM&gt;&gt; &lt;&lt;occasionally make some subroutines fallible#blue&gt;&gt; &lt;&lt;a single giant image#red&gt;&gt; &lt;&lt;out of memory while processing a style sheet#red&gt;&gt; &lt;&lt;isn&apos;t significantly different from failing to download it#blue&gt;&gt; &lt;&lt;in contrast to the embedded#red&gt;&gt; &lt;&lt;isn&apos;t done in a particularly principled way#red&gt;&gt; &lt;&lt;Nothing is pooled to isolate#red&gt;&gt; &lt;&lt;just a best-effort affair&gt;&gt; &lt;&lt;Gecko&apos;s need for this API as soon as possible#green&gt;&gt; &lt;&lt;Start Date: 2017&gt;&gt; &lt;&lt;a commodity server&gt;&gt; &lt;&lt;handles tasks&gt;&gt; &lt;&lt;threads or futures.&gt;&gt; &lt;&lt;unwinding is available&gt;&gt; &lt;&lt;seems to be the preferred#green&gt;&gt; &lt;&lt;maximizes the chances of allocation failures bubbling out#green&gt;&gt; &lt;&lt;unlikely to be totally robust#red&gt;&gt; &lt;&lt;but that&apos;s ok#green&gt;&gt; &lt;&lt;With unwinding#green&gt;&gt; &lt;&lt;isn&apos;t any apparent use for an infallible allocation checker#red&gt;&gt; &lt;&lt;on 64-bit platforms we don&apos;t check the isize::MAX condition directly#red&gt;&gt; &lt;&lt;instead relying on the allocator&gt;&gt; &lt;&lt;deterministically fail on any request that far exceeds a quantity the page table can even support&gt;&gt; &lt;&lt;no 64-bit system#red&gt;&gt; &lt;&lt;uses all 64 bits of the pointer#red&gt;&gt; &lt;&lt;even with new-fangled 5-level page tables#red&gt;&gt; &lt;&lt;64-bit platforms behave slightly different#red&gt;&gt; &lt;&lt;catastrophically large allocations#red&gt;&gt; &lt;&lt;abort instead of panic#red&gt;&gt; &lt;&lt;allocating data structures may enable faster or more responsive strategies, but#green&gt;&gt; &lt;&lt;be ready to fall back to less memory-intensive solution#green&gt;&gt; &lt;&lt;In the limit, very small allocations in critical sections may be infallible.#green&gt;&gt; &lt;&lt;Although the language the runtime hosts may have an unwinding/exceptions for OOM&gt;&gt; &lt;&lt;when the GC heap runs out of space&gt;&gt; &lt;&lt;runtime itself generally doesn&apos;t use unwinding to handle its own allocation failures#red&gt;&gt; &lt;&lt;Due to mixed fallible/infallible#red&gt;&gt; &lt;&lt;tools which prevent the use of infallible allocation may not be appropriate#red&gt;&gt; &lt;&lt;Vec::reserve only mentions panicking when overflowing usize#blue&gt;&gt; &lt;&lt;accurate for 64-bit#green&gt;&gt; &lt;&lt;not 32-bit or 16-bit#red&gt;&gt; &lt;&lt;make matters more complex@1#red&gt;&gt; &lt;&lt;(unstable) heap::Alloc trait currently documents that any oom&gt;&gt; &lt;&lt;can panic or abort#red&gt;&gt; &lt;&lt;desirable for local allocators#green&gt;&gt; &lt;&lt;but is considered an oversight in the global case#red&gt;&gt; &lt;&lt;Allocation Failure in C(++)&gt;&gt; &lt;&lt;two ways@1&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="60">
    <title>Benchmark</title>
    <folder id="287">
      <title>Criterion</title>
      <bookmark href="https://github.com/bheisler/criterion.rs" id="760">
        <title>bheisler/criterion.rs: Statistics-driven benchmarking library for Rust#__#&lt;&lt;[[bench]]&gt;&gt; &lt;&lt;name = &quot;my_benchmark&quot;&gt;&gt; &lt;&lt;benches/my_benchmark.rs&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/criterion" id="761">
        <title>criterion - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://bheisler.github.io/criterion.rs/book/getting_started.html" id="762">
        <title>Getting Started - Criterion.rs Documentation#__#&lt;&lt;benchmark with arguments&gt;&gt; prevent compiler optimization&lt;&lt;black_box function stops the compiler from constant-folding away&gt;&gt; &lt;&lt;inlined across different crates#green&gt;&gt; &lt;&lt;cargo bench&gt;&gt; &lt;&lt;need to import our library crate as an external&gt;&gt; &lt;&lt;can only benchmark public functions#red&gt;&gt; &lt;&lt;name of this function doesn&apos;t matter&gt;&gt; &lt;&lt;benchmark with a name&gt;&gt; &lt;&lt;name should be unique among all of the benchmarks&gt;&gt; &lt;&lt;and to compare the performance of two functions&gt;&gt; &lt;&lt;fibonacci function as#[inline]&gt;&gt; &lt;&lt;a separate crate@1#red&gt;&gt; &lt;&lt;can be inlined#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://bheisler.github.io/criterion.rs/book/analysis.html" id="763">
        <title>Analysis Process - Criterion.rs Documentation#__#&lt;&lt;warm_up_time&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://bheisler.github.io/criterion.rs/book/user_guide/command_line_output.html" id="764">
        <title>Command-Line Output - Criterion.rs Documentation#__#&lt;&lt;cargo bench -- --verbose&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=792401" id="765">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/bheisler/cargo-criterion" id="766">
        <title>bheisler/cargo-criterion: Cargo extension for running Criterion.rs benchmarks#__#&lt;&lt;Criterion-rs Quickstart#green&gt;&gt; &lt;&lt;assumes that you already have benchmarks&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://bheisler.github.io/criterion.rs/book/user_guide/advanced_configuration.html" id="767">
        <title>Advanced Configuration - Criterion.rs Documentation#__#&lt;&lt;BenchmarkGroup struct&gt;&gt; &lt;&lt;see the documentation for that struct&gt;&gt; &lt;&lt;detect smaller differences&gt;&gt; &lt;&lt;increase sample size&gt;&gt; &lt;&lt;precision&gt;&gt; &lt;&lt;counteract the resulting noise&gt;&gt; &lt;&lt;significance_level&gt;&gt; &lt;&lt;sample_size&gt;&gt; &lt;&lt;also possible to change Criterion.rs&apos; default values for these&gt;&gt; &lt;&lt;full form of the criterion_group macro&gt;&gt; &lt;&lt;criterion_group!{&gt;&gt; &lt;&lt;name = benches;&gt;&gt; &lt;&lt;config = Criterion::default().significance_level(0.1).sample_size(500);&gt;&gt; &lt;&lt;targets = bench&gt;&gt; &lt;&lt;to measure the throughput&gt;&gt; &lt;&lt;needs to know how many bytes or elements&gt;&gt; &lt;&lt;each iteration&gt;&gt; &lt;&lt;Throughput measurements are only supported when using the BenchmarkGroup struct&gt;&gt; &lt;&lt;not available when using the simpler bench_function interface#red&gt;&gt; &lt;&lt;group.throughput(Throughput::Bytes(bytes.len() as u64));&gt;&gt; &lt;&lt;For parameterized benchmarks&gt;&gt; &lt;&lt;call the throughput function inside a loop:&gt;&gt; &lt;&lt;group.throughput(Throughput::Elements(elems.len() as u64));&gt;&gt; &lt;&lt;group.bench_with_input&gt;&gt; &lt;&lt;BenchmarkGroup::sampling_mode(&gt;&gt; &lt;&lt;SamplingMode::Auto&gt;&gt; &lt;&lt;is the default.&gt;&gt; &lt;&lt;SamplingMode::Linear, the original&gt;&gt; &lt;&lt;for faster benchmarks&gt;&gt; &lt;&lt;SamplingMode::Flat&gt;&gt; &lt;&lt;long-running benchmarks@1&gt;&gt; &lt;&lt;not recommended to use Flat sampling except where necessary#red&gt;&gt; &lt;&lt;std::thread::sleep&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://bheisler.github.io/criterion.rs/book/user_guide/benchmarking_with_inputs.html" id="768">
        <title>Benchmarking With Inputs - Criterion.rs Documentation#__#&lt;&lt;one input to your function&gt;&gt; &lt;&lt;simple interface on the Criterion struct&gt;&gt; &lt;&lt;c.bench_with_input&gt;&gt; &lt;&lt;BenchmarkId::new(&quot;input_example&quot;, size)&gt;&gt; &lt;&lt;automatically passes the input through a black_box&gt;&gt; &lt;&lt;also includes&gt;&gt; &lt;&lt;in the benchmark description&gt;&gt; &lt;&lt;benchmarking the time it takes to collect an iterator&gt;&gt; &lt;&lt;N bytes into a Vec&gt;&gt; &lt;&lt;a benchmark group&gt;&gt; &lt;&lt;that a set of benchmarks are all related&gt;&gt; &lt;&lt;recommended to call finish explicitly&gt;&gt; &lt;&lt;but if you forget it will be called automatically when the group is dropped&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://bheisler.github.io/criterion.rs/book/user_guide/known_limitations.html" id="769">
        <title>Known Limitations - Criterion.rs Documentation#__#&lt;&lt;necessary for Criterion.rs to provide its own main&gt;&gt; &lt;&lt;using the criterion_main macro&gt;&gt; &lt;&lt;results in several limitations:&gt;&gt; &lt;&lt;not possible to include benchmarks in code in the src/#red&gt;&gt; &lt;&lt;might with the regular benchmark harness#green&gt;&gt; &lt;&lt;not possible to benchmark functions in binary crates#red&gt;&gt; &lt;&lt;Binary crates cannot be dependencies of other crates#red&gt;&gt; &lt;&lt;not possible to benchmark functions in crates that do not provide an rlib#red&gt;&gt; &lt;&lt;stable-compatible replacement for the black_box&gt;&gt; &lt;&lt;not as reliable as the official#red&gt;&gt; &lt;&lt;may allow dead-code-elimination#red&gt;&gt; &lt;&lt;Nightly build of Rust, you can add the real_blackbox feature#green&gt;&gt; &lt;&lt;features=[&apos;real_blackbox&apos;]#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/criterion-linux-perf/latest/src/criterion_linux_perf/lib.rs.html" id="1266">
        <title>lib.rs - source</title>
      </bookmark>
    </folder>
    <folder id="288">
      <title>Profiler</title>
      <bookmark href="https://blog.mozilla.org/nnethercote/2020/08/05/how-to-speed-up-the-rust-compiler-some-more-in-2020/" id="770">
        <title>How to speed up the Rust compiler some more in 2020; LLVM#__#&lt;&lt;cargo-llvm-lines, which measures how many lines of LLVM IR generated for each function#green&gt;&gt; &lt;&lt;generic functions#red&gt;&gt; &lt;&lt;can be instantiated dozens or even hundreds of times#red&gt;&gt; &lt;&lt;moved most of the non-generic code into a separate#green&gt;&gt; &lt;&lt;large generic function#red&gt;&gt; &lt;&lt;Even though they reduced the amount of LLVM IR generated, they were performance losses.#red&gt;&gt; &lt;&lt;additional changes affected the inlining#red&gt;&gt; &lt;&lt;some specialized Iterator methods#green&gt;&gt; &lt;&lt;direct implementation#green&gt;&gt; &lt;&lt;cargo-llvm-lines is also useful to application/crate authors#green&gt;&gt; &lt;&lt;cargo llvm-lines&gt;&gt; &lt;&lt;cargo llvm-lines --release&gt;&gt; &lt;&lt;speed up compilation of the largest crate#green&gt;&gt; &lt;&lt;In theory, the change could increase memory usage#red&gt;&gt; &lt;&lt;but in practice it doesn’t#green&gt;&gt; &lt;&lt;reduced the number of allocations#green&gt;&gt; &lt;&lt;details of the benchmark suite#green&gt;&gt; &lt;&lt;tiny additional overhead&gt;&gt; &lt;&lt;isn’t going to be noticeable#green&gt;&gt; &lt;&lt;when many crates take seconds or tens of seconds#red&gt;&gt; &lt;&lt;benchmark descriptions#green&gt;&gt; &lt;&lt;percentages to the output of cargo-llvm-lines#green&gt;&gt; &lt;&lt;how important each function’s contribution#green&gt;&gt; &lt;&lt;support for cargo-llvm-lines within rustc-perf#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/29818084/can-tests-be-built-in-release-mode-using-cargo" id="771">
        <title>rust - Can tests be built in release mode using Cargo? - Stack Overflow</title>
      </bookmark>
      <bookmark href="https://www.meetup.com/Rust-Linz/events/290196122/?response=3&amp;action=rsvp" id="772">
        <title>Rust Meetup Linz - 28th Edition, Wed, Dec 14, 2022, 10:00 PM | Meetup</title>
      </bookmark>
    </folder>
    <folder id="289">
      <title>random generator</title>
      <bookmark href="https://rust-random.github.io/book/guide-gen.html" id="773">
        <title>Types of generators - The Rust Rand Book</title>
      </bookmark>
      <bookmark href="https://blog.orhun.dev/zero-deps-random-in-rust/" id="774">
        <title>Zero-dependency random number generation in Rust - Orhun&apos;s Blog#__#&lt;&lt;std::collections::hash_map::RandomState&gt;&gt; &lt;&lt;ASLR (address space layout randomization)#red&gt;&gt; &lt;&lt;nanoseconds of the current time&gt;&gt; &lt;&lt;use std::time::{SystemTime, UNIX_EPOCH};&gt;&gt; &lt;&lt;let nanos = SystemTime::now().duration_since(UNIX_EPOCH)?.subsec_nanos();&gt;&gt; &lt;&lt;2023-01-03#red&gt;&gt; &lt;&lt;/dev/random and /dev/urandom&gt;&gt; &lt;&lt;/dev/urandom is theoretically vulnerable#red&gt;&gt; &lt;&lt;hasher = RandomState::new().build_hasher();&gt;&gt; &lt;&lt;hasher.finish()&gt;&gt; &lt;&lt;use these random values as seed#green&gt;&gt; &lt;&lt;rather than random number#red&gt;&gt; &lt;&lt;Box::into_raw#red&gt;&gt; &lt;&lt;memory leaks#red&gt;&gt; &lt;&lt;std::ptr::drop_in_place(pointer);#green&gt;&gt; &lt;&lt;dealloc(pointer as *mut u8, Layout::new::&lt;u32&gt;());#green&gt;&gt; repeatedly prints the same: 1088 (on x64 Linux?)&lt;&lt;dbg![main as *const u8 as usize % 4096];#red&gt;&gt; &lt;&lt;ASLR, which is extremely limited on 32b#red&gt;&gt; &lt;&lt;8~16 bits&gt;&gt; &lt;&lt;entropy)&gt;&gt; &lt;&lt;on x86_64&gt;&gt; &lt;&lt;Linux it defaults to 28 bits&gt;&gt; &lt;&lt;check /proc/sys/vm/mmap_rnd_bits&gt;&gt; &lt;&lt;If the allocator uses brk#red&gt;&gt; &lt;&lt;instead of mmap#green&gt;&gt; &lt;&lt;worse, you get 13 bits of entropy out of#red&gt;&gt; &lt;&lt;less if you use huge pages#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=364992" id="775">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/aq95oa/does_anyone_else_feel_like_rust_std_should/" id="776">
        <title>Does anyone else feel like Rust std should provide a basic rand module or atleast a function? : r/rust#__#&lt;&lt;rand crate has gone through quite a lot of breaking changes,#red&gt;&gt; &lt;&lt;not yet 1.0#red&gt;&gt; &lt;&lt;bake in a poor API#red&gt;&gt; &lt;&lt;using the crate is just a line of Cargo.toml away#green&gt;&gt; &lt;&lt;sound like designing an RNG is simple#red&gt;&gt; &lt;&lt;quickly run into all sorts of issues#red&gt;&gt; &lt;&lt;Often need a random that isn&apos;t &apos;standard&apos; at all.#red&gt;&gt; &lt;&lt;lazy_static crate, which is arguably a fundamental#blue&gt;&gt; &lt;&lt;but which isn&apos;t in std#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/102ar8c/zerodependency_random_number_generation_in_rust/" id="777">
        <title>Zero-dependency random number generation in Rust : r/rust#__#&lt;&lt;/dev/random and /dev/urandom&gt;&gt; &lt;&lt;/dev/random only returns random bytes within the estimated number of bits of noise&gt;&gt; &lt;&lt;linuxism#red&gt;&gt; &lt;&lt;openbsd and freebsd they&apos;re literally the same#blue&gt;&gt; &lt;&lt;block until seeded&gt;&gt; &lt;&lt;then never block anymore#green&gt;&gt; &lt;&lt;might never block at all because both have at-boot#green&gt;&gt; &lt;&lt;since kernel 5.6, now /dev/random blocks until initialised#blue&gt;&gt; &lt;&lt;then stops blocking forever#green&gt;&gt; &lt;&lt;/dev/urandom still never blocks, so can provide degraded randomness during boot#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=663869" id="778">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://www.2uo.de/myths-about-urandom/#orthodoxy" id="779">
        <title>Myths about /dev/urandom - Thomas&apos; Digital Garden</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=672538" id="780">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://sr.ht/~icefox/oorandom/" id="781">
        <title>oorandom: A simple, robust PRNG in Rust#__#&lt;&lt;compiles in 1/10th the time#green&gt;&gt; &lt;&lt;stable API#green&gt;&gt; &lt;&lt;rand -- oorandom is simpler#green&gt;&gt; &lt;&lt;zero choices you need to make#green&gt;&gt; &lt;&lt;fastrand -- Looks fine, uses the same algorithm as oorandom#green&gt;&gt; &lt;&lt;Does slightly more than oorandom#green&gt;&gt; &lt;&lt;You are also in charge of choosing a useful seed#red&gt;&gt; &lt;&lt;getrandom crate might be useful for that#green&gt;&gt; &lt;&lt;getrandom -- They solve different problems; getrandom gives you whatever secure randomness the OS#green&gt;&gt; &lt;&lt;use getrandom to seed this#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="290">
      <title>randomness</title>
      <bookmark href="https://docs.rs/fastrand/latest/fastrand/" id="782">
        <title>fastrand - Rust#__#&lt;&lt;more efficient, create a new Rng#green&gt;&gt; &lt;&lt;instead of using the thread-local#red&gt;&gt; &lt;&lt;fastrand::Rng::new()&gt;&gt; &lt;&lt;fastrand::usize(..v.len())&gt;&gt; &lt;&lt;std::iter::repeat_with&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/arbitrary" id="783">
        <title>crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://rust-lang-nursery.github.io/rust-cookbook/algorithms/randomness.html" id="1955">
        <title>Generate Random Values - Rust Cookbook</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=48785" id="784">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/DeimosHall/random_str" id="785">
        <title>DeimosHall/random_str: Rust library to generate random strings, chars, booleans, and integers#__#&lt;&lt;use random_str as random;&gt;&gt; &lt;&lt;random::get_string(length, lowercase, uppercase, numbers, symbols)&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/random-string/1.1.0/random_string/fn.generate.html" id="786">
        <title>generate in random_string - Rust#__#Good API.&lt;&lt;charset - Object implementing AsRef trait to do reference-to-reference conversion into &amp;str&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/random-string/1.1.0/random_string/fn.generate_rng.html" id="787">
        <title>generate_rng in random_string - Rust#__#&lt;&lt;with random length out of provided, rang&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=93641" id="788">
        <title>-----</title>
      </bookmark>
    </folder>
    <folder id="291">
      <title>Valgrind/Cachegrind/Crabgrind/iai</title>
      <bookmark href="https://www.oreilly.com/library/view/rust-high-performance/9781788399487/fc64d0fa-13bc-45a4-baea-63f4797f53db.xhtml" id="789">
        <title>Cachegrind - Rust High Performance [Book]#__#&lt;&lt;part of Valgrind&gt;&gt; &lt;&lt;used in the same way as Callgrind&gt;&gt; &lt;&lt;cargo profiler#green&gt;&gt; &lt;&lt;In the case of the same preceding application&gt;&gt; &lt;&lt;cargo profiler failed to parse Cachegrind&apos;s response#red&gt;&gt; &lt;&lt;run Valgrind directly#green&gt;&gt; &lt;&lt;second or third run#red&gt;&gt; &lt;&lt;some information might have already been cached#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.oreilly.com/library/view/rust-high-performance/9781788399487/16434a28-f428-4d2b-8f57-8ac01a92bd32.xhtml" id="790">
        <title>Callgrind - Rust High Performance [Book]#__#&lt;&lt;cargo profiler callgrind {args}#green&gt;&gt; &lt;&lt;args are the arguments to your executable&gt;&gt; out-of-date?!&lt;&lt;Rust uses jemalloc#red&gt;&gt; &lt;&lt;but Valgrind will try to use its own allocator#red&gt;&gt; &lt;&lt;a way to use Valgrind&apos;s allocator#green&gt;&gt; &lt;&lt;only work in nightly#red&gt;&gt; &lt;&lt;to your main.rs&gt;&gt; &lt;&lt;#![feature(alloc_system)]extern crate alloc_system;#green&gt;&gt; &lt;&lt;force Rust to use the system allocator#green&gt;&gt; &lt;&lt;might need to add #![allow(unused_extern_crates)]#green&gt;&gt; &lt;&lt;to the file&gt;&gt; &lt;&lt;so that it doesn&apos;t alert you for an unused crate#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=496406" id="791">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/bheisler/iai/blob/main/README.md" id="792">
        <title>iai/README.md at main · bheisler/iai#__#&lt;&lt;One-shot Benchmark&gt;&gt; &lt;&lt;Cachegrind to perform extremely precise single-shot measurements&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/bheisler/iai" id="793">
        <title>bheisler/iai: Experimental one-shot benchmarking/profiling harness for Rust#__#&lt;&lt;years ago#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://kobzol.github.io/rust/rustc/2023/09/23/rustc-runtime-benchmarks.html" id="794">
        <title>Adding runtime benchmarks to the Rust compiler benchmark suite | Kobzol’s blog#__#&lt;&lt;Sep 23, 2023&gt;&gt; &lt;&lt;#[bench] attribute&gt;&gt; &lt;&lt;cargo bench&gt;&gt; &lt;&lt;However, these benchmarks are microbenchmarks#red&gt;&gt; &lt;&lt;only very small pieces of Rust code#red&gt;&gt; &lt;&lt;iterator adaptor chains#blue&gt;&gt; &lt;&lt;orthogonal&gt;&gt; &lt;&lt;rustc-perf@1&gt;&gt; &lt;&lt;actual programs that are larger#green&gt;&gt; &lt;&lt;Wall time&gt;&gt; &lt;&lt;Cache misses&gt;&gt; &lt;&lt;Branch misses&gt;&gt; &lt;&lt;Especially the instruction coun&gt;&gt; &lt;&lt;since it tends to be quite stable&gt;&gt; &lt;&lt;I wanted the benchmarks to be executed natively&gt;&gt; &lt;&lt;Cachegrind wouldn’t produce realistic wall-time#red&gt;&gt; &lt;&lt;only want to measure the part of the program where the actual benchmark is executed#green&gt;&gt; &lt;&lt;Nicholas Nethercote, the author of Cachegrind#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=746120" id="795">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/crabgrind/versions" id="796">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;crabgrind&gt;&gt; &lt;&lt;Versions&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/crabgrind/latest/crabgrind/" id="797">
        <title>crabgrind - Rust#__#&lt;&lt;Rust programs running under Valgrind&gt;&gt; &lt;&lt;interact with the tools and virtualized environment#green&gt;&gt; &lt;&lt;essentially a wrapper&gt;&gt; &lt;&lt;installed Vallgrind using OS-specific package manager#green&gt;&gt; &lt;&lt;paths to the headers are likely to be resolved automatically by cc&gt;&gt; &lt;&lt;Print current function stack-trace to the Valgrind log#green&gt;&gt; &lt;&lt;Exclude expensive initialization code from the measurements#green&gt;&gt; &lt;&lt;cg::callgrind::toggle_collect();#green&gt;&gt; &lt;&lt;cg::callgrind::toggle_collect();@1&gt;&gt; &lt;&lt;on the real CPU#green&gt;&gt; &lt;&lt;instead of the virtua#red&gt;&gt; &lt;&lt;using valgrind::non_simd_call#green&gt;&gt; &lt;&lt;refer to valgrind.h for details on limitations#red&gt;&gt; &lt;&lt;ways to crash#red&gt;&gt; &lt;&lt;cg::callgrind::zero_stats()#green&gt;&gt; &lt;&lt;cg::callgrind::dump_stats(&quot;factorial1&quot;)#green&gt;&gt; &lt;&lt;negligible performance impact#green&gt;&gt; &lt;&lt;Functions that return std::result::Result involve branching#red&gt;&gt; &lt;&lt;Functions that take strings as parameters#red&gt;&gt; &lt;&lt;internally convert them to std::ffi::CString#red&gt;&gt; &lt;&lt;code does nothing when not run on Valgrind#green&gt;&gt; &lt;&lt;not forced to run your program under Valgrind#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=750870" id="798">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://nnethercote.github.io/perf-book/profiling.html" id="1267">
        <title>Profiling - The Rust Performance Book#__#&lt;&lt;Cachegrind &amp; Callgrind&gt;&gt; &lt;&lt;global, per-function&gt;&gt; &lt;&lt;per-source-line&gt;&gt; &lt;&lt;instruction counts&gt;&gt; &lt;&lt;simulated cache&gt;&gt; &lt;&lt;branch prediction&gt;&gt; &lt;&lt;some other Unixes&gt;&gt; &lt;&lt;To profile a release build#green&gt;&gt; &lt;&lt;enable source line debug info#green&gt;&gt; &lt;&lt;[profile.release]#green&gt;&gt; &lt;&lt;debug = 1#green&gt;&gt; &lt;&lt;Unfortunately, even after doing the above#red&gt;&gt; &lt;&lt;won’t get detailed profiling#red&gt;&gt; &lt;&lt;for standard library#red&gt;&gt; &lt;&lt;shipped versions of the Rust standard library are not built with debug#red&gt;&gt; &lt;&lt;most reliable way around this is to build your own version of the compiler#red&gt;&gt; &lt;&lt;standard library,#red&gt;&gt; &lt;&lt;and adding the following lines to the config.toml#red&gt;&gt; &lt;&lt;[rust]#green&gt;&gt; &lt;&lt;debuginfo-level = 1#green&gt;&gt; &lt;&lt;Alternatively, the unstable build-std feature#red&gt;&gt; &lt;&lt;will not help with profilers such as Cachegrind and Samply#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.codeofview.com/fix-rs/2017/01/24/how-to-optimize-rust-programs-on-linux/" id="1268">
        <title>How-to Optimize Rust Programs on Linux#__#&lt;&lt;performance&gt;&gt; &lt;&lt;Linux only&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://llogiq.github.io/2015/07/15/profiling.html" id="1269">
        <title>Profiling Rust applications on Linux — Llogiq on stuff#__#&lt;&lt;Valgrind uses the DWARF debugging information#blue&gt;&gt; &lt;&lt;we need to recompile with -g:#red&gt;&gt; &lt;&lt;rustc -O -g nbody-rs.rs#green&gt;&gt; &lt;&lt;callgrind to collect the profile is simple&gt;&gt; &lt;&lt;prefix valgrind --tool=callgrind to the program#green&gt;&gt; &lt;&lt;statistics to be used by callgrind_annotate later&gt;&gt; &lt;&lt;valgrind --tool=callgrind ./nbody 50000000#green&gt;&gt; &lt;&lt;callgrind_annotate --auto=yes callgrind.out.11135#green&gt;&gt; &lt;&lt;Rust has no gprof support#red&gt;&gt; &lt;&lt;but on Linux there are a number of options available to profile code based on the DWARF debugging information#green&gt;&gt; &lt;&lt;valgrind-based tools (for our requirements callgrind) use a virtual CPU#blue&gt;&gt; &lt;&lt;oprofile reads the kernel performance counters#blue&gt;&gt; &lt;&lt;JMH (Java Microbenchmark Harness)#blue&gt;&gt; &lt;&lt;poised to become a part of JDK9#blue&gt;&gt; &lt;&lt;same trick with the -prof perfasm#green&gt;&gt; &lt;&lt;July 2015&gt;&gt; &lt;&lt;newer way to profile applications in linux: perf#green&gt;&gt; &lt;&lt;very much like oprofile#blue&gt;&gt; &lt;&lt;very similar results&gt;&gt; &lt;&lt;but requires root access#red&gt;&gt; &lt;&lt;On the plus side&gt;&gt; &lt;&lt;ncurses- or gtk-based viewer for the annotated source#green&gt;&gt; &lt;&lt;little difference between both&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.justanotherdot.com/posts/quick-and-dirty-benchmarking" id="1270">
        <title>Quick and Dirty Benchmarking • Ryan James Spencer</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=203581" id="1271">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=683230" id="1272">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/kcachegrind-source/18588" id="1273">
        <title>KCacheGrind source - The Rust Programming Language Forum#__#&lt;&lt;valgrind --tool=callgrind --dump-instr=yes --collect-jumps=yes ./target/release/my_binary#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=175766" id="1274">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/madsmtm/linear-malloc" id="1275">
        <title>madsmtm/linear-malloc: An ultra simple single-threaded linear allocator#__#&lt;&lt;DISCLAIMER#red&gt;&gt; &lt;&lt;quick hack#red&gt;&gt; &lt;&lt;single-threaded#red&gt;&gt; &lt;&lt;under Cachegrind/Callgrind#green&gt;&gt; &lt;&lt;more stable&gt;&gt; &lt;&lt;doesn&apos;t try to do the clever optimizations that the system allocator does#red&gt;&gt; &lt;&lt;cargo build&gt;&gt; &lt;&lt;LD_PRELOAD=./target/debug/liblinear_malloc.so your-binary&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://jbecker.dev/research/on-writing-performant-rust" id="1276">
        <title>On Maximizing Your Rust Code&apos;s Performance | Jonathan Becker#__#&lt;&lt;cargo rustc -- --emit=asm -C opt-level=3 --debug&gt;&gt; &lt;&lt;generate assembly&gt;&gt; &lt;&lt;valgrind --tool=cachegrind ./target/debug/my_program&gt;&gt; &lt;&lt;2023#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=350679" id="1386">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/cargo-valgrind" id="1387">
        <title>cargo-valgrind - crates.io: Rust Package Registry#__#&lt;&lt;directly run valgrind on the executable#green&gt;&gt; &lt;&lt;a bin-crate&gt;&gt; &lt;&lt;or an example#green&gt;&gt; &lt;&lt;not be necessary for ordinary Rust programs, especially if you are only using safe#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/cargo-valgrind/versions" id="1388">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;cargo-valgrind&gt;&gt; &lt;&lt;Versions&gt;&gt; &lt;&lt;years ago#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/jfrimmel/cargo-valgrind/blob/master/README.md" id="1389">
        <title>cargo-valgrind/README.md at master · jfrimmel/cargo-valgrind#__#&lt;&lt;run valgrind on any crate executable&gt;&gt; &lt;&lt;mark the binary as pass/fail&gt;&gt; &lt;&lt;check, whether the memory usages across the FFI borders are correct#green&gt;&gt; &lt;&lt;typical mistake#red&gt;&gt; &lt;&lt;variable string will never be freed#red&gt;&gt; &lt;&lt;detects the leak#green&gt;&gt; &lt;&lt;to pass flags to valgrind (for example to run an alternate subtool), you can set the VALGRINDFLAGS environment#green&gt;&gt; &lt;&lt;space-delimited list of valid Valgrind options&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=4480" id="1390">
        <title>-----</title>
      </bookmark>
    </folder>
    <folder id="292">
      <title>Valgrind/iai-callgrind</title>
      <bookmark href="https://github.com/iai-callgrind/iai-callgrind/blob/main/README.md" id="799">
        <title>iai-callgrind/README.md at main · iai-callgrind/iai-callgrind#__#&lt;&lt;commits ahead#green&gt;&gt; &lt;&lt;environments like a CI#green&gt;&gt; &lt;&lt;use Valgrind&apos;s Callgrind#green&gt;&gt; &lt;&lt;instead of Cachegrind#red&gt;&gt; &lt;&lt;default, iai-callgrind runs all benchmarks with Valgrind&apos;s cache simulation turned on#green&gt;&gt; &lt;&lt;only executes a benchmark once&gt;&gt; &lt;&lt;typically a lot faster#green&gt;&gt; &lt;&lt;than benchmarks measuring the execution#red&gt;&gt; &lt;&lt;wall time#red&gt;&gt; &lt;&lt;detect very small optimizations#green&gt;&gt; &lt;&lt;reports the difference between benchmark runs&gt;&gt; &lt;&lt;Regression@1#blue&gt;&gt; &lt;&lt;zero overhead Valgrind Client Requests#green&gt;&gt; &lt;&lt;native valgrind client requests overhead#red&gt;&gt; &lt;&lt;on many targets&gt;&gt; &lt;&lt;Stable-compatible#green&gt;&gt; &lt;&lt;iai-callgrind-runner binary#blue&gt;&gt; &lt;&lt;When updating the iai-callgrind library#red&gt;&gt; &lt;&lt;you&apos;ll also need to update iai-callgrind-runner#red&gt;&gt; &lt;&lt;vice-versa#red&gt;&gt; &lt;&lt;no need to interact with iai-callgrind-runner#green&gt;&gt; &lt;&lt;github actions ci#green&gt;&gt; &lt;&lt;to make use of the Valgrind Client Requests you need libclang (clang &gt;= 5.0)#green&gt;&gt; &lt;&lt;needs the debug symbols when running the benchmarks#red&gt;&gt; &lt;&lt;multiple places where you can configure profiles#red&gt;&gt; &lt;&lt;debugging symbols&gt;&gt; &lt;&lt;~/.cargo/config&gt;&gt; &lt;&lt;Cargo.toml@2&gt;&gt; &lt;&lt;[profile.bench]&gt;&gt; &lt;&lt;debug = true&gt;&gt; &lt;&lt;strip = true#red&gt;&gt; &lt;&lt;other configuration options stripping the debug symbols#red&gt;&gt; &lt;&lt;disabled#green&gt;&gt; &lt;&lt;if you have changed this option for the release#red&gt;&gt; &lt;&lt;environment variables are cleared before running a library benchmark#red&gt;&gt; &lt;&lt;Configuration section if you need to change that&gt;&gt; &lt;&lt;harness = false&gt;&gt; &lt;&lt;use iai_callgrind::{main, library_benchmark_group, library_benchmark};&gt;&gt; &lt;&lt;#[library_benchmark]&gt;&gt; &lt;&lt;#[bench::short(10)]&gt;&gt; &lt;&lt;#[bench::long(30)]&gt;&gt; &lt;&lt;no need to annotate benchmark functions with inline(never)&gt;&gt; &lt;&lt;The bench attribute takes any expression what includes function calls#green&gt;&gt; &lt;&lt;The following would&gt;&gt; &lt;&lt;avoids setup code#green&gt;&gt; &lt;&lt;eliminating the need to pass toggle-collect arguments to callgrind#red&gt;&gt; &lt;&lt;fn some_setup_func(value: u64) -&gt; u64&gt;&gt; &lt;&lt;#[bench::long(some_setup_func(30))]#green&gt;&gt; &lt;&lt;cargo bench --bench my_benchmark&gt;&gt; &lt;&lt;Specify multiple benchmarks at once with the#[benches]&gt;&gt; &lt;&lt;#[benches::multiple(vec![1], vec![5])]#green&gt;&gt; &lt;&lt;#[benches::with_setup(args = [1, 5], setup = setup_worst_case_array)]#green&gt;&gt; &lt;&lt;In #[benches::with_setup(...)], the arguments are passed to the setup function instead#green&gt;&gt; &lt;&lt;pretty much the same as&gt;&gt; &lt;&lt;#[bench::with_setup_0(setup_worst_case_array(1)])]&gt;&gt; &lt;&lt;#[bench::with_setup_1(setup_worst_case_array(5)])]&gt;&gt; &lt;&lt;compare_by_id = true;&gt;&gt; &lt;&lt;if compare_by_id is true, all benchmark functions are compared with each other#green&gt;&gt; &lt;&lt;you are not limited to two benchmark functions per comparison group&gt;&gt; &lt;&lt;default value for compare_by_id is false#red&gt;&gt; &lt;&lt;Only benches with the same id are compared#red&gt;&gt; &lt;&lt;compared to other crates#red&gt;&gt; &lt;&lt;most complete#green&gt;&gt; &lt;&lt;best performant#green&gt;&gt; &lt;&lt;Client requests are deactivated by default#red&gt;&gt; &lt;&lt;features = [&quot;client_requests&quot;]&gt;&gt; &lt;&lt;uses Callgrind#green&gt;&gt; &lt;&lt;instead of Cachegrind@1#red&gt;&gt; &lt;&lt;Iai-Callgrind has even more precise and stable metrics&gt;&gt; &lt;&lt;only counting events&gt;&gt; &lt;&lt;within the benchmarking function&gt;&gt; &lt;&lt;separating the iai library&gt;&gt; &lt;&lt;with the main macro#green&gt;&gt; &lt;&lt;from the actual runner.#red&gt;&gt; &lt;&lt;is the reason for the extra installation step of iai-callgrind-runner&gt;&gt; &lt;&lt;but before this separation#blue&gt;&gt; &lt;&lt;even small changes in the iai library#red&gt;&gt; &lt;&lt;effects on the benchmarks#red&gt;&gt; &lt;&lt;Cleaner output of Valgrind&apos;s annotation&gt;&gt; &lt;&lt;callgrind_annotate output produced by Iai-Callgrind#green&gt;&gt; &lt;&lt;Itamar Turner-Trauring&apos;s formula&gt;&gt; &lt;&lt;Working within a macro can be tedious#red&gt;&gt; &lt;&lt;Switching off the sandbox@1&gt;&gt; &lt;&lt;temporary directory@1&gt;&gt; &lt;&lt;args = (1, 2), config = LibraryBenchmarkConfig::default()&gt;&gt; &lt;&lt;configuration values like envs are additive&gt;&gt; &lt;&lt;don&apos;t overwrite configuration values of higher#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/struct.LibraryBenchmarkConfig.html" id="800">
        <title>LibraryBenchmarkConfig in iai_callgrind - Rust#__#&lt;&lt;main!(&gt;&gt; &lt;&lt;config = LibraryBenchmarkConfig::default()&gt;&gt; &lt;&lt;.raw_callgrind_args([&quot;toggle-collect=something&quot;]);&gt;&gt; &lt;&lt;fn raw_callgrind_args#blue&gt;&gt; &lt;&lt;don’t need to start with a flag#red&gt;&gt; &lt;&lt;--toggle-collect=some#green&gt;&gt; &lt;&lt;toggle-collect=some@3#green&gt;&gt; &lt;&lt;both understood#green&gt;&gt; &lt;&lt;Not all callgrind arguments are understood by iai-callgrind#red&gt;&gt; &lt;&lt;or cause problems in iai-callgrind#red&gt;&gt; &lt;&lt;iai-callgrind will issue a warning in such cases.#green&gt;&gt; &lt;&lt;Some of the defaults can be overwritten&gt;&gt; &lt;&lt;--cache-sim=yes (can’t be changed)#blue&gt;&gt; &lt;&lt;--compress-pos=no&gt;&gt; &lt;&lt;--compress-strings=no&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/attr.library_benchmark.html" id="801">
        <title>library_benchmark in iai_callgrind - Rust#__#&lt;&lt;If possible, it&apos;s best to return something from a benchmark function#green&gt;&gt; &lt;&lt;std::hint::black_box#green&gt;&gt; &lt;&lt;benches attribute&gt;&gt; &lt;&lt;define multiple benchmarks in one go#green&gt;&gt; &lt;&lt;#[benches::some_id(21, 42, 84)]#green&gt;&gt; &lt;&lt;All arguments are already wrapped in a black box#green&gt;&gt; &lt;&lt;don’t need to be put in a black_box again#red&gt;&gt; &lt;&lt;`array` is already wrapped in a black_box#green&gt;&gt; &lt;&lt;fn bench_some_func_with_array(array&gt;&gt; &lt;&lt;`array` does not need to be put in a `black_box`#red&gt;&gt; &lt;&lt;std::hint::black_box(some_func_with_array(#red&gt;&gt; &lt;&lt;#[bench::some_id(42)]#blue&gt;&gt; &lt;&lt;bench attribute consist of#blue&gt;&gt; &lt;&lt;name itself&gt;&gt; &lt;&lt;unique id#red&gt;&gt; &lt;&lt;after ::#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/macro.library_benchmark_group.html" id="802">
        <title>library_benchmark_group in iai_callgrind - Rust#__#&lt;&lt;config =&gt;&gt; &lt;&lt;compare_by_id =&gt;&gt; &lt;&lt;benchmarks =&gt;&gt; &lt;&lt;name =&gt;&gt; &lt;&lt;compared with each other&gt;&gt; &lt;&lt;as long as#red&gt;&gt; &lt;&lt;ids (the part after the :: in #[bench::id(...)])#blue&gt;&gt; &lt;&lt;__compare_by_id__&gt;&gt; &lt;&lt;default is false#red&gt;&gt; &lt;&lt;all benches in&gt;&gt; &lt;&lt;benchmark functions specified with the benchmarks argument#green&gt;&gt; &lt;&lt;#[library_benchmark]@1&gt;&gt; &lt;&lt;fn bench_something#green&gt;&gt; &lt;&lt;benchmarks = bench_something#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/" id="803">
        <title>iai_callgrind - Rust#__#&lt;&lt;`benches` attribute to specify multiple&gt;&gt; &lt;&lt;specify multiple `benches` attributes&gt;&gt; &lt;&lt;or mix the `benches` attribute with `bench`&gt;&gt; &lt;&lt;#[bench::empty(vec![])]&gt;&gt; &lt;&lt;#[bench::worst_case_6(vec![6, 5, 4, 3, 2, 1])]&gt;&gt; &lt;&lt;Each `,`-separated element is another benchmark run#red&gt;&gt; &lt;&lt;the same as&gt;&gt; &lt;&lt;two `#[bench]` attributes&gt;&gt; &lt;&lt;bench::multiple_0&gt;&gt; &lt;&lt;bench::multiple_1&gt;&gt; &lt;&lt;`args` argument to achieve the same&gt;&gt; &lt;&lt;`args` is necessary if#green&gt;&gt; &lt;&lt;`config` or `setup` function#green&gt;&gt; &lt;&lt;Usually, each element in `args` is passed directly to the benchmarking function&gt;&gt; &lt;&lt;reroute them to a `setup` function#green&gt;&gt; &lt;&lt;(black boxed) return value of#green&gt;&gt; &lt;&lt;setup function is passed as parameter to the benchmarking function&gt;&gt; &lt;&lt;setup = setup_worst_case_array#green&gt;&gt; &lt;&lt;A benchmarking function with multiple parameters#red&gt;&gt; &lt;&lt;tuples#red&gt;&gt; &lt;&lt;mandatory main! macro#red&gt;&gt; &lt;&lt;config at bench level&gt;&gt; &lt;&lt;overwrites the config at library_benchmark level#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=698298" id="804">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/client_requests/callgrind/fn.stop_instrumentation.html" id="805">
        <title>stop_instrumentation in iai_callgrind::client_requests::callgrind - Rust#__#&lt;&lt;flushes Valgrinds translation cache&gt;&gt; &lt;&lt;effectively will run at the same speed as the “none” tool&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/client_requests/cachegrind/fn.stop_instrumentation.html" id="806">
        <title>stop_instrumentation in iai_callgrind::client_requests::cachegrind - Rust</title>
      </bookmark>
      <bookmark href="https://valgrind.org/docs/manual/cg-tech-docs.html" id="807">
        <title>Valgrind#__#&lt;&lt;this document is now very old#red&gt;&gt; &lt;&lt;a lot of its contents are out of date, and misleading#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://valgrind.org/docs/manual/quick-start.html#quick-start.intro" id="808">
        <title>Valgrind</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=986242" id="1277">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/client_requests/valgrind/fn.non_simd_call0.html" id="1278">
        <title>non_simd_call0 in iai_callgrind::client_requests::valgrind - Rust#__#&lt;&lt;client requests are not entirely reliable#red&gt;&gt; &lt;&lt;if you call a function with them that subsequently calls printf()#red&gt;&gt; &lt;&lt;a high chance Valgrind will crash#red&gt;&gt; &lt;&lt;if the called function does not refer to any global#red&gt;&gt; &lt;&lt;not refer to other functions#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/iai-callgrind/latest/iai_callgrind/client_requests/type.ThreadId.html" id="1279">
        <title>ThreadId in iai_callgrind::client_requests - Rust#__#&lt;&lt;no relationship to std::thread::ThreadId!#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=723120" id="1280">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/iai-callgrind/iai-callgrind/blob/main/CONTRIBUTING.md" id="1281">
        <title>iai-callgrind/CONTRIBUTING.md at main · iai-callgrind/iai-callgrind#__#&lt;&lt;piece of cake with just&gt;&gt; &lt;&lt;have the just shell completions installed&gt;&gt; &lt;&lt;inspect it with --dry-run&gt;&gt; &lt;&lt;will install git hooks&gt;&gt; &lt;&lt;current MSRV toolchain,&gt;&gt; &lt;&lt;all possible just rules#green&gt;&gt; &lt;&lt;just -l&gt;&gt; &lt;&lt;Justfile&gt;&gt; &lt;&lt;rustup override set 1.66.0&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="293">
      <title>zOther</title>
      <bookmark href="https://doc.rust-lang.org/nightly/unstable-book/library-features/test.html" id="809">
        <title>test - The Rust Unstable Book#__#&lt;&lt;so little work in this example, we have a 1 ns/iter (+/- 0)#red&gt;&gt; &lt;&lt;Move setup code outside&gt;&gt; &lt;&lt;Make the code do &quot;the same thing&quot; on each iteration&gt;&gt; &lt;&lt;not accumulate or change state#red&gt;&gt; &lt;&lt;outer function idempotent too&gt;&gt; &lt;&lt;benchmark runner is likely to run it many times&gt;&gt; &lt;&lt;inner iter loop short&gt;&gt; &lt;&lt;fast&gt;&gt; &lt;&lt;so benchmark runs are fast&gt;&gt; &lt;&lt;calibrator can adjust&gt;&gt; &lt;&lt;loop do something simpl&gt;&gt; &lt;&lt;pinpointing performance improvements (or regressions)&gt;&gt; &lt;&lt;test::black_box&gt;&gt; &lt;&lt;test::Bencher&gt;&gt; &lt;&lt;#[bench]&gt;&gt; &lt;&lt;b: &amp;mut Bencher&gt;&gt; &lt;&lt;b.iter&gt;&gt; &lt;&lt;cheap for small values&gt;&gt; &lt;&lt;Larger values can be passed indirectly&gt;&gt; &lt;&lt;black_box(&amp;huge_struct)&gt;&gt; &lt;&lt;optimizer can still modify a testcase in an undesirable manner even when using either of the above#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=906080" id="810">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/BurntSushi/cargo-benchcmp" id="811">
        <title>BurntSushi/cargo-benchcmp (Arch Manjaro)</title>
      </bookmark>
      <bookmark href="https://blog.mozilla.org/nnethercote/2020/09/08/how-to-speed-up-the-rust-compiler-one-last-time/" id="812">
        <title>How to speed up the Rust compiler one... Profiler LLVM#__#&lt;&lt;bottom-up micro-optimizations#green&gt;&gt; &lt;&lt;relatively small changes#green&gt;&gt; &lt;&lt;made in response to profiles#green&gt;&gt; &lt;&lt;didn’t require much in the way of top-down understanding#green&gt;&gt; &lt;&lt;Instruction counts (Cachegrind and Callgrind)#green&gt;&gt; &lt;&lt;Allocations (DHAT)#green&gt;&gt; &lt;&lt;custom path and execution counts#green&gt;&gt; &lt;&lt;ad hoc prof#green&gt;&gt; &lt;&lt;counts@2&gt;&gt; &lt;&lt;Lines of LLVM IR#green&gt;&gt; &lt;&lt;cargo-llvm-lines@1&gt;&gt; &lt;&lt;Cycles (perf), but only after I discovered the excellent Hotspot viewer#green&gt;&gt; &lt;&lt;perf’s own viewer tools to be almost unusable#red&gt;&gt; &lt;&lt;rustc-perf&gt;&gt; &lt;&lt;Compilers are really nice to profile and optimize#green&gt;&gt; &lt;&lt;than profiling Firefox#red&gt;&gt; &lt;&lt;instruction counts have proven much better#green&gt;&gt; &lt;&lt;than wall times#red&gt;&gt; &lt;&lt;on CI@1#blue&gt;&gt; &lt;&lt;±0.1%#green&gt;&gt; &lt;&lt;vs ±3%#red&gt;&gt; &lt;&lt;use multiple profilers in conjunction#green&gt;&gt; &lt;&lt;haven’t found cycles that useful#red&gt;&gt; &lt;&lt;because they correlate strongly with instruction counts#blue&gt;&gt; &lt;&lt;instruction count measurements are less noisy#green&gt;&gt; &lt;&lt;concerted profile-driven optimization work#green&gt;&gt; &lt;&lt;low-hanging fruit#green&gt;&gt; &lt;&lt;Today, profiles are much flatter#red&gt;&gt; &lt;&lt;obvious improvements are harder#red&gt;&gt; &lt;&lt;September 8, 2020#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://ehsanmkermani.com/2018/04/01/learn-rust-through-linalg-part1/" id="813">
        <title>Learn Rust through linalg – Ehsan&apos;s Blog - threads, parallel#__#&lt;&lt;General Matrix-Matrix (GEMM)#green&gt;&gt; &lt;&lt;GEMM in Rust on GPU#green&gt;&gt; &lt;&lt;Affine type#green&gt;&gt; &lt;&lt;array of type [f64: N]#green&gt;&gt; &lt;&lt;pointer &amp;[f64] aka slice#green&gt;&gt; &lt;&lt;Box, Rc (reference-counting), RefCell (internal mutatbility)#green&gt;&gt; &lt;&lt;raw pointer *#green&gt;&gt; &lt;&lt;fn vec_dot_zip(a: &amp;Vec&lt;f64&gt;, b: &amp;Vec&lt;f64&gt;) -&gt; f64 {#green&gt;&gt; &lt;&lt;a.iter().zip(b.iter()).map(|(&amp;x, &amp;y)| x * y).sum()#green&gt;&gt; &lt;&lt;fn vec_dot_fold(a: &amp;Vec&lt;f64&gt;, b: &amp;Vec&lt;f64&gt;) -&gt; f64 {#green&gt;&gt; &lt;&lt;(0..a.len()).fold(0f64, |sum, i| sum + a[i] * b[i])#green&gt;&gt; &lt;&lt;fn vec_dot_unsafe(a: &amp;Vec&lt;f64&gt;, b: &amp;Vec&lt;f64&gt;) -&gt; f64 {#green&gt;&gt; &lt;&lt;unsafe {#green&gt;&gt; &lt;&lt;(0..a.len()).fold(0f64, |sum, i| sum + a.get_unchecked(i) * b.get_unchecked(i))#green&gt;&gt; &lt;&lt;BLAS or CBLAS#green&gt;&gt; &lt;&lt;Inner product is a classic example of map-reduce / data-parallel#blue&gt;&gt; &lt;&lt;Rayon crate#green&gt;&gt; &lt;&lt;keeps Rust’s premises, most notably here, data race free#green&gt;&gt; &lt;&lt;parallelizes our code whenever possible, otherwise falls back to sequential#green&gt;&gt; &lt;&lt;Ndarray#green&gt;&gt; &lt;&lt;use it with blas feature enabled.#green&gt;&gt; &lt;&lt;macro_rules! close {#green&gt;&gt; &lt;&lt;($x:expr, $y:expr) =&gt; (assert!(($x - $y).abs() &lt; 1e-8))#green&gt;&gt; &lt;&lt;macro_rules! all_close {#green&gt;&gt; &lt;&lt;($x:expr, $y:expr) =&gt; (assert!(($x - $y).abs() &lt; 1e-8);#green&gt;&gt; &lt;&lt;($x:expr, $y:expr, $($ys:expr),+) =&gt; (all_close!($y, $($ys),+))#green&gt;&gt; &lt;&lt;microbenchmarks with cargo bench#green&gt;&gt; &lt;&lt;Rust nightly#red&gt;&gt; &lt;&lt;rustup default nightly#green&gt;&gt; &lt;&lt;better option; Criterion crate#green&gt;&gt; &lt;&lt;benchmarks in the stable Rust#green&gt;&gt; &lt;&lt;more statistical#green&gt;&gt; &lt;&lt;Keep the Numpy C-optimized results for float32#green&gt;&gt; &lt;&lt;float32 is needed for correct comparison to Ndarray#green&gt;&gt; &lt;&lt;python 3.6#green&gt;&gt; &lt;&lt;import numpy as np#green&gt;&gt; &lt;&lt;cargo test --lib vector#green&gt;&gt; &lt;&lt;Ndarray-blas: ~ 61 ns#green&gt;&gt; &lt;&lt;Ndarray-blas: ~ 111 us#green&gt;&gt; &lt;&lt;explicit divide-and-conquer (forming tree-aggregate#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://matej.laitl.cz/bench-rust-kotlin-microservices/" id="814">
        <title>What I Learnt from Benchmarking Http4k,... Webservices; also Kotlin</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/critcmp" id="815">
        <title>critcmp - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust/issues/31265" id="816">
        <title>Create a benchmark suite for uncovering runtime regressions · Issue #31265 · rust-lang/rust</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/47dohh/measuring_rust_runtime_performance_cargo_bench_vs/" id="817">
        <title>Measuring Rust Runtime Performance: cargo &amp; threads#__#&lt;&lt;200+ threads and the getrusage call would chew up excessive CPU#red&gt;&gt; &lt;&lt;strace -c (which shows a count of the system calls)#green&gt;&gt; &lt;&lt;gdb dumps of the stack of every thread#green&gt;&gt; &lt;&lt;along with monitoring the thread count of the program#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/k066vw/the_hotspot_profiler_gui_has_support_for_rust/" id="818">
        <title>The hotspot profiler GUI has support for Rust : rust#__#&lt;&lt;hotspot, a GUI for Linux perf, supports rust#green&gt;&gt; &lt;&lt;For Archlinux users, the AUR package has been updated.#green&gt;&gt; &lt;&lt;on arch#green&gt;&gt; &lt;&lt;yay -S rustc-demangle#green&gt;&gt; &lt;&lt;RUSTC_DEMANGLE_INCLUDE_DIR=/usr/include/rustc-demangle RUSTC_DEMANGLE_LIBRARY=/usr/lib/rustc-demangle/librustc_demangle.so yay -S hotspot#green&gt;&gt; &lt;&lt;can ingest anything generated by perf&gt;&gt; &lt;&lt;visualize things profiled using inferno#green&gt;&gt; &lt;&lt;more visualization options than flamegraph#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/hawkinsw/speed_limits_of_loops_in_rust/blob/main/src/benchmark-compare-volatile.rs" id="1282">
        <title>speed_limits_of_loops_in_rust/benchmark-compa...#__#&lt;&lt;use std::time::SystemTime;&gt;&gt; &lt;&lt;use volatile::Volatile;&gt;&gt; &lt;&lt;let mut mutable_j = Volatile::new(&amp;mut j);#green&gt;&gt; &lt;&lt;let iter_before = SystemTime::now();#green&gt;&gt; &lt;&lt;mutable_j.write(mutable_j.read() + 1);#green&gt;&gt; &lt;&lt;let iter_after = SystemTime::now();&gt;&gt; &lt;&lt;let iter_total_time = iter_after.duration_since(iter_before).expect(&quot;Ok&quot;).as_micros();#green&gt;&gt; NOT NEEDED. Without this extra increment, for loop is faster (than while loop).&lt;&lt;i += 1;#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch13-04-performance.html" id="1283">
        <title>Comparing Performance: Loops vs. Iterators - The Rust Programming Language</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=4954" id="1284">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/cargo/commands/cargo-bench.html" id="1285">
        <title>cargo bench - The Cargo Book#__#&lt;&lt;-- --nocapture&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://nnethercote.github.io/perf-book/benchmarking.html" id="1286">
        <title>Benchmarking - The Rust Performance Book</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=883854" id="1287">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/aclysma/profiling" id="1288">
        <title>aclysma/profiling: Provides a very thin abstraction over instrumented profiling crates like puffin, optick, tracy, and superluminal-perf.</title>
      </bookmark>
      <bookmark href="https://docs.rs/profiling/latest/profiling/" id="1289">
        <title>profiling - Rust</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=183924" id="1290">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/AlexanderThaller/bench-rs" id="1291">
        <title>AlexanderThaller/bench-rs: Run a program, measure execution time and print statistics#__#&lt;&lt;2 years ago#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/Gabriella439/bench" id="1391">
        <title>Gabriella439/bench: Command-line benchmark tool#__#&lt;&lt;bench &apos;sleep 1&apos;#green&gt;&gt; &lt;&lt;All output from the command being benchmarked is discarded#red&gt;&gt; &lt;&lt;Multiple commands#green&gt;&gt; &lt;&lt;bench id ls &quot;sleep 0.1&quot;#green&gt;&gt; &lt;&lt;benchmarking bench/id&gt;&gt; &lt;&lt;benchmarking bench/sleep 0.1&gt;&gt; &lt;&lt;--output example.html#green&gt;&gt; &lt;&lt;graphing the distribution of timings#green&gt;&gt; &lt;&lt;Haskell&apos;s criterion#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html" id="1392">
        <title>Announcing Rust 1.66.0 | Rust Blog#__#&lt;&lt;core::hint::black_box#green&gt;&gt; &lt;&lt;..=X ranges in patterns#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://godbolt.org/" id="1393">
        <title>Compiler Explorer</title>
      </bookmark>
      <bookmark href="https://github.com/llogiq/flame" id="1394">
        <title>llogiq/flame: An intrusive flamegraph profiling tool for rust.#__#&lt;&lt;Unlike tools like perf#red&gt;&gt; &lt;&lt;OS interrupt your running program repeatedly#red&gt;&gt; &lt;&lt;FLAME lets you choose what you want to see in the graph by adding performance instrumentation#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://nikolaivazquez.com/blog/divan/" id="1395">
        <title>Divan: Fast and Simple Benchmarking for Rust · Nikolai Vazquez#__#&lt;&lt;comfy benchmarking#green&gt;&gt; &lt;&lt;nikolai#green&gt;&gt; &lt;&lt;azquez#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=945477" id="1941">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/bencherdev/bencher" id="1942">
        <title>bencherdev/bencher: 🐰 Bencher - Continuous Benchmarking</title>
      </bookmark>
      <bookmark href="https://bencher.dev/" id="1953">
        <title>Bencher - Continuous Benchmarking</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="61">
    <title>Box, Vec...</title>
    <bookmark href="https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html" id="294">
      <title>Vec in alloc::vec - Rust#__#&lt;&lt;Vec is and always will be a (pointer, capacity, length)#red&gt;&gt; &lt;&lt;No more, no less.#red&gt;&gt; &lt;&lt;order of these fields is completely unspecified#green&gt;&gt; &lt;&lt;use the appropriate methods#green&gt;&gt; &lt;&lt;However, the pointer might not actually point to allocated memory#red&gt;&gt; &lt;&lt;particular, if you construct a Vec with capacity 0#red&gt;&gt; &lt;&lt;calling shrink_to_fit on an empty Vec#red&gt;&gt; &lt;&lt;store zero-sized types inside a Vec, it will not allocate#red&gt;&gt; &lt;&lt;in this case the Vec might not report a capacity of 0#red&gt;&gt; &lt;&lt;from_raw_parts@2#red&gt;&gt; &lt;&lt;Vec’s allocation details are very subtle#red&gt;&gt; &lt;&lt;no guarantees about its memory layout#green&gt;&gt; &lt;&lt;never perform a “small optimization”#red&gt;&gt; &lt;&lt;on the stack#red&gt;&gt; &lt;&lt;penalize the general case#red&gt;&gt; &lt;&lt;additional branch on every access#red&gt;&gt; &lt;&lt;never automatically shrink itself#green&gt;&gt; &lt;&lt;reported capacity is completely accurate, and can be relied on#green&gt;&gt; &lt;&lt;len == capacity, (as is the case for the vec! macro#red&gt;&gt; &lt;&lt;then a Vec&lt;T&gt; can be converted to and from a Box&lt;[T]&gt; without reallocating#green&gt;&gt; &lt;&lt;not rely on removed data to be erased for security#red&gt;&gt; &lt;&lt;Even if you zero a Vec’s memory first, that might not actually happen because the optimizer#red&gt;&gt; &lt;&lt;not consider this a side-effect that must be preserved#red&gt;&gt; &lt;&lt;From&lt;VecDeque&lt;T, A&gt;&gt;&gt;&gt; &lt;&lt;never needs to re-allocate#green&gt;&gt; &lt;&lt;but does need to do O(n) data movement if the circular buffer doesn’t happen to be at the beginning#red&gt;&gt; &lt;&lt;excess capacity, its items will be moved into a newly-allocated#red&gt;&gt; &lt;&lt;optimal if&gt;&gt; &lt;&lt;lower bound of its size_hint() is exac&gt;&gt; &lt;&lt;tail is moved twice#red&gt;&gt; &lt;&lt;If the returned iterator goes out of scope without being dropped#red&gt;&gt; &lt;&lt;mem::forget, for example#red&gt;&gt; &lt;&lt;may have lost and leaked#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html" id="295">
      <title>Box in alloc::boxed - Rust#__#&lt;&lt;doesn’t actually allocate if T is zero-sized#red&gt;&gt; &lt;&lt;See MaybeUninit::zeroed for examples of correct and incorrect#red&gt;&gt; &lt;&lt;Pin&lt;Box&lt;T&gt;&gt; &lt;&lt;fn try_new#red&gt;&gt; &lt;&lt;fn new_in(x: T, alloc: A)&gt;&gt; &lt;&lt;into_boxed_slice(boxed: Self) -&gt; Box&lt;[T]#green&gt;&gt; &lt;&lt;does not allocate on the heap&gt;&gt; &lt;&lt;happens in place#green&gt;&gt; &lt;&lt;fn into_inner&gt;&gt; &lt;&lt;fn new_uninit_slice&gt;&gt; &lt;&lt;unsafe fn assume_init&gt;&gt; &lt;&lt;unsafe fn from_raw#red&gt;&gt; &lt;&lt;fn from_raw_in&gt;&gt; &lt;&lt;Box::into_raw_with_allocator&gt;&gt; &lt;&lt;After calling this function, the caller is responsible for the memory#red&gt;&gt; &lt;&lt;easiest way to do this is to convert the raw pointer back into a Box@1#green&gt;&gt; &lt;&lt;Box::from_raw_in function, allowing the Box destructor to perform the cleanup#green&gt;&gt; &lt;&lt;so that there is no conflict with a method on the inner type@2#green&gt;&gt; &lt;&lt;not recommended that crates add an impl like From&lt;Box&lt;T&gt;&gt; &lt;&lt;also available via From#green&gt;&gt; &lt;&lt;not recommended that crates add an impl like From&lt;Box&lt;T&gt;&gt; &lt;&lt;calling Pin::from#red&gt;&gt; &lt;&lt;fn downcast&lt;T: Any&gt;(self)#green&gt;&gt; &lt;&lt;fn print_if_string(value: Box&lt;dyn Any&gt;)#green&gt;&gt; &lt;&lt;impl&lt;A: Allocator&gt; Box&lt;dyn Any#green&gt;&gt; &lt;&lt;impl&lt;A: Allocator&gt; Box&lt;dyn Any + Send + Sync#green&gt;&gt; &lt;&lt;impl&lt;T: Clone, A: Allocator + Clone@1&gt;&gt; &lt;&lt;clone_from(&amp;mut self, source: &amp;Self)@1#green&gt;&gt; &lt;&lt;writes value into it before conversion&gt;&gt; &lt;&lt;guaranteeing safety&gt;&gt; &lt;&lt;optimize copying from stack#green&gt;&gt; &lt;&lt;excess capacity, its items will be moved into a newly-allocated#red&gt;&gt; &lt;&lt;wrapped with the Box::from_raw function#green&gt;&gt; &lt;&lt;producing a Box&gt;&gt; &lt;&lt;This Box can then be dropped#green&gt;&gt; &lt;&lt;properly destroy T@2#green&gt;&gt; &lt;&lt;release the allocated memory#green&gt;&gt; &lt;&lt;this is an associated function@3#blue&gt;&gt; &lt;&lt;you have to call it as Box::leak(b)#green&gt;&gt; &lt;&lt;instead of b.leak()#red&gt;&gt; &lt;&lt;so that there is no conflict with a method on the inner type@3#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/alloc/boxed/struct.ThinBox.html" id="296">
      <title>ThinBox in alloc::boxed - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html" id="297">
      <title>BinaryHeap in alloc::collections::binary_heap - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html" id="298">
      <title>VecDeque in alloc::collections::vec_deque - Rust#__#&lt;&lt;“default” usage#green&gt;&gt; &lt;&lt;push_back to add#green&gt;&gt; &lt;&lt;pop_front to remove#green&gt;&gt; &lt;&lt;pub fn partition_point&gt;&gt; &lt;&lt;kind of binary search#green&gt;&gt; &lt;&lt;R: RangeBounds#green&gt;&gt; &lt;&lt;new capacity overflows usize#red&gt;&gt; &lt;&lt;no extra space#green&gt;&gt; &lt;&lt;Extend&lt;&amp;&apos;a T&gt; for VecDeque&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=474124" id="299">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/zerovec" id="300">
      <title>zerovec - crates.io: Rust Package Registry</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/transvec" id="301">
      <title>transvec - crates.io: Rust Package Registry</title>
    </bookmark>
    <bookmark href="https://github.com/thomcc/index_vec" id="302">
      <title>thomcc/index_vec: A Rust library offering newtyped indices and vecs that use those indices#__#&lt;&lt;newtyped indices&gt;&gt; &lt;&lt;additional type safety#green&gt;&gt; &lt;&lt;zero cost#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=180119" id="303">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://stackoverflow.com/questions/29316582/how-do-i-destructure-a-vector-without-taking-a-slice" id="1077">
      <title>rust - How do I destructure a vector without taking a slice? - Stack Overflow#__#&lt;&lt;move out of a vector?&gt;&gt; &lt;&lt;what state is the vector in?#red&gt;&gt; &lt;&lt;if let [(ref name, ref age)] = items.as_slice() {#green&gt;&gt; &lt;&lt;vector continues to own the items&gt;&gt; &lt;&lt;if let Some((name, score)) = items.first() {#green&gt;&gt; &lt;&lt;a reference to the first item&gt;&gt; &lt;&lt;then references to the name and score&gt;&gt; &lt;&lt;Transfer one element&apos;s ownership&gt;&gt; &lt;&lt;let (name, score) = items.remove(0);#green&gt;&gt; &lt;&lt;// Potential panic!#red&gt;&gt; &lt;&lt;Transfer all element ownership&gt;&gt; &lt;&lt;for (name, score) in items {#green&gt;&gt; &lt;&lt;Clone the item&gt;&gt; &lt;&lt;let (name, score) = items[0].clone();#green&gt;&gt; &lt;&lt;// Potential panic!@1#red&gt;&gt; &lt;&lt;We own the new&gt;&gt; &lt;&lt;vector owns the original&gt;&gt; &lt;&lt;Partial Moves are only available for structures for which the Drop trait is not implemented#red&gt;&gt; &lt;&lt;because then the compiler cannot know what the Drop trait will rely on#red&gt;&gt; &lt;&lt;If you do need to use .remove(0)&gt;&gt; &lt;&lt;changing the data structure to a VecDeque#green&gt;&gt; &lt;&lt;using .pop_front()#green&gt;&gt; &lt;&lt;better performance#green&gt;&gt; &lt;&lt;no panic#red&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="62">
    <title>build config</title>
    <bookmark href="https://nnethercote.github.io/perf-book/build-configuration.html" id="304">
      <title>Build Configuration - The Rust Performance Book#__#&lt;&lt;trade-off&gt;&gt; &lt;&lt;benchmarking&gt;&gt; &lt;&lt;Cargo only looks at the profile settings in the Cargo.toml file at the root of the workspace#green&gt;&gt; &lt;&lt;Profile settings defined in dependencies are ignored#red&gt;&gt; &lt;&lt;these options are mostly relevant for binary#green&gt;&gt; &lt;&lt;not library crates.#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/103595" id="305">
      <title>Tracking issue for speeding up rustc via its build configuration · Issue #103595 · rust-lang/rust#__#&lt;&lt;-mtune=icelake#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="63">
    <title>Concurrent</title>
    <folder id="306">
      <title>Async</title>
      <bookmark href="https://github.com/hyperium/tonic" id="819">
        <title>hyperium/tonic: A native gRPC client &amp; server implementation with async/await support.</title>
      </bookmark>
      <bookmark href="https://github.com/smol-rs/async-channel" id="820">
        <title>smol-rs/async-channel: Async multi-producer multi-consumer channel</title>
      </bookmark>
      <bookmark href="https://cfsamson.github.io/books-futures-explained/5_pin.html" id="821">
        <title>Pin - Futures Explained in 200 Lines of Rust</title>
      </bookmark>
      <bookmark href="https://cfsamson.github.io/book-exploring-async-basics/introduction.html" id="822">
        <title>Introduction - The Node Experiment -...</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/async-book/04_pinning/01_chapter.html" id="823">
        <title>Pinning - Asynchronous Programming in Rust#__#&lt;&lt;poll(mut self: Pin&lt;&amp;mut Self&gt;&gt;&gt; &lt;&lt;Pinning to the Stack&gt;&gt; &lt;&lt;PhantomPinned&gt;&gt; &lt;&lt;pin_utils to avoid writing our own unsafe&gt;&gt; &lt;&lt;pin_utils::pin_mut!&gt;&gt; &lt;&lt;to create a Pin&lt;&amp;mut T&gt;&gt;&gt; &lt;&lt;Getting a &amp;mut T to a pinned T requires unsafe if T: !Unpin#red&gt;&gt; &lt;&lt;Pinning a !Unpin object to the stack requires unsafe#red&gt;&gt; &lt;&lt;Pinning a !Unpin object to the heap does not require unsafe#green&gt;&gt; &lt;&lt;shortcut for doing this using Box::pin&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/hashedone/async-rust" id="824">
        <title>GitHub - hashedone/async-rust: Slides for async-rust presentation (Rust Meetup 22.01.2020)</title>
      </bookmark>
      <bookmark href="https://www.youtube.com/watch?v=w1vKAUor-4o" id="825">
        <title>Runtime-agnostic async crates by Zeeshan Ali - Rust Linz, Feburary 2022 - YouTube</title>
      </bookmark>
      <bookmark href="https://blog.rust-lang.org/inside-rust/2023/05/03/stabilizing-async-fn-in-trait.html" id="826">
        <title>Stabilizing async fn in traits in 2023 | Inside Rust Blog#__#&lt;&lt;complication#red&gt;&gt; &lt;&lt;default configurations of Tokio and async-std#red&gt;&gt; &lt;&lt;stealing thread scheduler#red&gt;&gt; &lt;&lt;futures may move between worker threads&gt;&gt; &lt;&lt;future must only capture Send#red&gt;&gt; &lt;&lt;impl HealthCheck@1#red&gt;&gt; &lt;&lt;explicit type parameter HC#green&gt;&gt; &lt;&lt;instead of impl HealthCheck#red&gt;&gt; &lt;&lt;new bound, HC::check(): Send#green&gt;&gt; &lt;&lt;RFC 2289, &quot;associated type bounds&quot;#green&gt;&gt; &lt;&lt;compact notation#green&gt;&gt; &lt;&lt;check(): Send@2#green&gt;&gt; &lt;&lt;+ Send + &apos;static@1#green&gt;&gt; &lt;&lt;future may consider more concise syntax (see below#green&gt;&gt; &lt;&lt;common one for async#green&gt;&gt; &lt;&lt;avoid capturing all of the function arguments#red&gt;&gt; &lt;&lt;by doing some amount of sync work#green&gt;&gt; &lt;&lt;two syntactic forms will work interchangeably&gt;&gt; &lt;&lt;verbose, especially for traits with lots of methods#red&gt;&gt; &lt;&lt;trait alias pattern#green&gt;&gt; &lt;&lt;like this@1&gt;&gt; &lt;&lt;#[make_alias(Send = &quot;SendHealthCheck&quot;)]#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/async-book/06_multiple_futures/02_join.html" id="827">
        <title>join! - Asynchronous Programming in Rust#__#&lt;&lt;slower than necessary#red&gt;&gt; &lt;&lt;don&apos;t do this#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/future/trait.Future.html" id="828">
        <title>Future in core::future - Rust#__#&lt;&lt;poll(self: Pin&lt;&amp;mut Self&gt;#green&gt;&gt; &lt;&lt;context passed to the poll method can provide a Waker#green&gt;&gt; &lt;&lt;generally won’t call poll#red&gt;&gt; &lt;&lt;but instead .await#green&gt;&gt; &lt;&lt;Once a future has finished, clients should not poll it again#red&gt;&gt; &lt;&lt;on multiple calls to poll#red&gt;&gt; &lt;&lt;only the Waker from the Context passed to the most recent call should be scheduled to receive a wakeup#green&gt;&gt; &lt;&lt;poll function is not called repeatedly in a tight loo#red&gt;&gt; &lt;&lt;only be called when the future indicates that it is ready to make progress (by calling wake())#green&gt;&gt; &lt;&lt;poll(2) or select(2) syscalls on Unix#red&gt;&gt; &lt;&lt;futures typically do not suffer the same problems#red&gt;&gt; &lt;&lt;more like epoll(4)#green&gt;&gt; &lt;&lt;poll should strive to return quickly#green&gt;&gt; &lt;&lt;not block@1#red&gt;&gt; &lt;&lt;If it is known ahead of time that a call to poll may end up taking awhile#red&gt;&gt; &lt;&lt;work should be offloaded to a thread pool#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=729097" id="1292">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/Kobzol/async-iterator-examples/blob/main/README.md" id="1293">
        <title>async-iterator-examples/README.md at main · Kobzol/async-iterator-examples#__#&lt;&lt;lending AFIT&gt;&gt; &lt;&lt;async gen with lending&gt;&gt; &lt;&lt;Lending means yielding references&gt;&gt; &lt;&lt;point into the iterator itself.&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="307">
      <title>Async Tokio</title>
      <bookmark href="https://github.com/tokio-rs/loom" id="829">
        <title>tokio-rs/loom: Concurrency permutation testing tool for Rust.#__#&lt;&lt;[target.&apos;cfg(loom)&apos;.dependencies]&gt;&gt; &lt;&lt;a test@2&gt;&gt; &lt;&lt;use loom::#red&gt;&gt; &lt;&lt;#[should_panic]&gt;&gt; &lt;&lt;RUSTFLAGS=&quot;--cfg loom&quot;&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rusticus-io/async-runner" id="830">
        <title>rusticus-io/async-runner: implmentation of a cancelable async runner</title>
      </bookmark>
      <bookmark href="https://docs.rs/tokio/latest/tokio/runtime/index.html" id="831">
        <title>tokio::runtime - Rust#__#&lt;&lt;main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt;@1&gt;&gt; &lt;&lt;tokio::runtime::Runtime&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/tokio/latest/tokio/process/struct.Command.html" id="832">
        <title>Command in tokio::process - Rust#__#&lt;&lt;default, this value is assumed to be false#red&gt;&gt; &lt;&lt;spawned process will not be killed on drop#red&gt;&gt; &lt;&lt;stdout and stderr as Vec&lt;u8&gt;#green&gt;&gt; &lt;&lt;All I/O this child does will be associated with the current default event loop.@2#green&gt;&gt; &lt;&lt;will kill the child if kill_on_drop@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://jstrong.dev/posts/2022/spawning-os-threads-from-tokio-contexts/" id="833">
        <title>Spawning OS Threads from Tokio Contexts - jstrong.dev</title>
      </bookmark>
    </folder>
    <folder id="308">
      <title>zOther</title>
      <bookmark href="https://github.com/Smithay/calloop" id="834">
        <title>Smithay/calloop: A callback-based Event Loop#__#NOT!&lt;&lt;not meant for large scale high performance#red&gt;&gt; also: Caloop Subprocess by &quot;detly&quot;, creator of test-binary&lt;&lt;callback@14#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gitlab.com/calloop-subprocess/calloop-subproc" id="835">
        <title>Calloop Subprocess / Calloop subprocess event source · GitLab#__#by &quot;detly&quot; = Jason Heeris, creator of test-binary&lt;&lt;Project ID&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="64">
    <title>IO</title>
    <bookmark href="https://gregoryszorc.com/blog/2021/04/06/surprisingly-slow/" id="309">
      <title>Gregory Szorc&apos;s Digital Home | Surprisingly Slow | Windows Unix fsync#__#&lt;&lt;close file callback triggers scanning#red&gt;&gt; &lt;&lt;synchronously, blocking CloseHandle()#red&gt;&gt; &lt;&lt;use a thread pool for calling CloseHandle()#green&gt;&gt; &lt;&lt;any software that creates or mutates as little as a few hundred files on Windows#red&gt;&gt; &lt;&lt;Bazel#green&gt;&gt; &lt;&lt;longer-lived daemon/background processes#green&gt;&gt; &lt;&lt;clever with writing to the terminal#red&gt;&gt; &lt;&lt;colors, moving the cursor position#red&gt;&gt; &lt;&lt;stderr/stdout is likely performed via blocking I/O#red&gt;&gt; &lt;&lt;flushing as needed (hopefully sparingly)#red&gt;&gt; &lt;&lt;async thread for writing#green&gt;&gt; &lt;&lt;deterministic and reproducible build environments#green&gt;&gt; &lt;&lt;file mutation I/O on Windows#red&gt;&gt; &lt;&lt;rustup#green&gt;&gt; &lt;&lt;Record the total time spent in blocking I/O#green&gt;&gt; &lt;&lt;periodically compare the wall time#green&gt;&gt; &lt;&lt;between stdout/stderr connected to a terminal and /dev/null#green&gt;&gt; &lt;&lt;emitting all lines plus the new footer in batches#green&gt;&gt; &lt;&lt;limit drawing to ~10 Hz#red&gt;&gt; &lt;&lt;Cores may only reach their maximum frequency if other cores are also running.#red&gt;&gt; &lt;&lt;Xeon cores won&apos;t turbo as easily#red&gt;&gt; &lt;&lt;linking times 2-4x longer#red&gt;&gt; &lt;&lt;buffered I/O#green&gt;&gt; &lt;&lt;drawing footers#red&gt;&gt; &lt;&lt;incremental/non-full build is dominated by linking#red&gt;&gt; &lt;&lt;core doing the linking was only running at 25-50%#red&gt;&gt; &lt;&lt;if you started additional CPU heavy#green&gt;&gt; &lt;&lt;core ramped up&gt;&gt; &lt;&lt;processes on Windows can&apos;t be spawned as quickly#red&gt;&gt; &lt;&lt;Windows Defender (and other anti-virus / scanning#red&gt;&gt; &lt;&lt;aggressive power settings#green&gt;&gt; &lt;&lt;NVMe storage#green&gt;&gt; &lt;&lt;bypass the standard OS/kernel I/O primitives#red&gt;&gt; &lt;&lt;I/O operations directly against the device#green&gt;&gt; &lt;&lt;ext4#red&gt;&gt; &lt;&lt;fsync().#red&gt;&gt; &lt;&lt;all unflushed writes are persisted#red&gt;&gt; &lt;&lt;AVX-512#red&gt;&gt; &lt;&lt;thousands of milliseconds for an idling core to ramp up#red&gt;&gt; &lt;&lt;monolithic#red&gt;&gt; &lt;&lt;same ext4 filesystem#red&gt;&gt; &lt;&lt;ext4 contain a fast commits#green&gt;&gt; &lt;&lt;DEFLATE/zlib#red&gt;&gt; Facebook&lt;&lt;zstandard#green&gt;&gt; &lt;&lt;can be tuned&gt;&gt; &lt;&lt;preserving GB/s decompression speeds&gt;&gt; &lt;&lt;LZMA#red&gt;&gt; &lt;&lt;hashing each line#red&gt;&gt; &lt;&lt;digests 4, 8, or more#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.datadoghq.com/blog/engineering/introducing-glommio/" id="310">
      <title>Introducing Glommio, a Thread-per-Core Crate for Rust &amp; Linux | Datadog</title>
    </bookmark>
    <bookmark href="https://itnext.io/modern-storage-is-plenty-fast-it-is-the-apis-that-are-bad-6a68319fbc1a" id="311">
      <title>Modern storage is plenty fast. Direct IO, io_uring, Thread per Core#__#&lt;&lt;copy memory#red&gt;&gt; &lt;&lt;expensive computation#red&gt;&gt; &lt;&lt;saves us one I/O operation#red&gt;&gt; &lt;&lt;fast. Therefore it needs to be in memory#red&gt;&gt; &lt;&lt;misconceptions@2#red&gt;&gt; &lt;&lt;split this into multiple files#green&gt;&gt; &lt;&lt;random I/O patterns#green&gt;&gt; &lt;&lt;optimize this for sequential access#red&gt;&gt; &lt;&lt;single file#red&gt;&gt; &lt;&lt;Direct I/O#green&gt;&gt; &lt;&lt;specialized applications#red&gt;&gt; &lt;&lt;own cache#red&gt;&gt; &lt;&lt;memory copies#red&gt;&gt; &lt;&lt;memory allocations#red&gt;&gt; &lt;&lt;overly optimistic read ahead caching#red&gt;&gt; &lt;&lt;focus this article on reads#red&gt;&gt; &lt;&lt;page fault&gt;&gt; &lt;&lt;interrupt&gt;&gt; &lt;&lt;system-call based&gt;&gt; &lt;&lt;extra copy&gt;&gt; &lt;&lt;mmap-based&gt;&gt; &lt;&lt;mappings&gt;&gt; &lt;&lt;NVMe support many concurrent#green&gt;&gt; &lt;&lt;reading from many files#green&gt;&gt; &lt;&lt;aggregate amount of data read certainly matters#red&gt;&gt; &lt;&lt;minimum 4kB#red&gt;&gt; &lt;&lt;two files, 512 bytes each#red&gt;&gt; &lt;&lt;read ahead, with a default setting of 128kB#red&gt;&gt; &lt;&lt;OS page cache#red&gt;&gt; &lt;&lt;multiple files@2#green&gt;&gt; &lt;&lt;parallelism:#green&gt;&gt; &lt;&lt;multiple read-ahead buffers#red&gt;&gt; &lt;&lt;thread-poll based APIs#red&gt;&gt; &lt;&lt;multiple files mean multiple threads#red&gt;&gt; &lt;&lt;io_uring#green&gt;&gt; &lt;&lt;if it uses buffered files#red&gt;&gt; &lt;&lt;Direct I/O is full of caveats#red&gt;&gt; &lt;&lt;doesn’t even try (nor should it) to hide#red&gt;&gt; &lt;&lt;memory must be properly aligned#red&gt;&gt; &lt;&lt;as well as the positions#red&gt;&gt; &lt;&lt;low level and raw#red&gt;&gt; &lt;&lt;accumulate I/O#green&gt;&gt; &lt;&lt;dispatch in batches#green&gt;&gt; &lt;&lt;event-loop#green&gt;&gt; &lt;&lt;thread-per-core Rust#green&gt;&gt; &lt;&lt;support buffered files backed by the Linux page cache#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/facebookexperimental/eden" id="312">
      <title>facebookexperimental/eden: EdenSCM is...#__#&lt;&lt;Despite having originally evolved from Mercurial, EdenSCM is not a distributed&gt;&gt; &lt;&lt;not all repository data is downloaded to the client system when checking out&gt;&gt; &lt;&lt;CLI code can be found in the eden/scm&gt;&gt; &lt;&lt;eden/mononoke&gt;&gt; &lt;&lt;only on Linux#red&gt;&gt; &lt;&lt;not yet buildable outside of Facebook&apos;s internal environment.#red&gt;&gt; &lt;&lt;still in progress to support building Mononoke with Rust&apos;s cargo#red&gt;&gt; &lt;&lt;EdenFS is a virtual file system for managing EdenSCM checkouts.&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/jasonwhite/rudolfs" id="313">
      <title>GitHub - jasonwhite/rudolfs: A high-performance, caching Git LFS server with an AWS S3 and local storage back-end.</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/zggjvw/nosey_parker_a_new_scanner_for_hardcoded_secrets/" id="314">
      <title>(3) Nosey Parker, a new scanner for hardcoded secrets in Git history and textual data, written in Rust, can scan 100GB of Linux kernel history in 5 minutes on a laptop : rust</title>
    </bookmark>
    <bookmark href="https://github.com/Shnatsel/fast-io-cookbook" id="315">
      <title>Shnatsel/fast-io-cookbook</title>
    </bookmark>
  </folder>
  <folder id="65">
    <title>Lazy / Cell / Once</title>
    <bookmark href="https://doc.rust-lang.org/nightly/std/sync/struct.LazyLock.html" id="316">
      <title>LazyLock in std::sync - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/cell/struct.LazyCell.html" id="317">
      <title>LazyCell in std::cell - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/sync/struct.OnceLock.html" id="318">
      <title>OnceLock in std::sync - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/cell/struct.OnceCell.html" id="319">
      <title>OnceCell in std::cell - Rust</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=918150" id="320">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://docs.rs/once_cell/latest/once_cell/" id="321">
      <title>once_cell - Rust#__#&lt;&lt;arbitrary non-Copy&gt;&gt; &lt;&lt;like with RefCell and Mutex, the set method requires only a shared reference&gt;&gt; &lt;&lt;sync flavor is thread-safe&gt;&gt; &lt;&lt;unsync one is not&gt;&gt; &lt;&lt;Global Data&gt;&gt; &lt;&lt;static INSTANCE: OnceCell&lt;Logger&gt; = OnceCell::new();&gt;&gt; &lt;&lt;essentially the lazy_static! macro, but without a macro#green&gt;&gt; &lt;&lt;variable that holds Lazy is declared as static#green&gt;&gt; &lt;&lt;not const#red&gt;&gt; &lt;&lt;mportant: using const instead compiles, but works wrong#red&gt;&gt; &lt;&lt;If you need a lazy field in a struct, you probably should use OnceCell directly#green&gt;&gt; &lt;&lt;allow you to access self during initialization&gt;&gt; &lt;&lt;“compile regex on every loop iteration” problem#green&gt;&gt; &lt;&lt;Unlike lazy_static!#red&gt;&gt; &lt;&lt;Lazy works with local variables.#green&gt;&gt; &lt;&lt;self.config.get_or_try_init(|| {&gt;&gt; &lt;&lt;parking_lot based&gt;&gt; &lt;&lt;is smaller by up to 16 bytes&gt;&gt; &lt;&lt;uses unsafe#red&gt;&gt; &lt;&lt;Unlike once_cell#red&gt;&gt; &lt;&lt;lazy_static supports spinlock#green&gt;&gt; &lt;&lt;which works with #![no_std]#green&gt;&gt; &lt;&lt;unsync has an additional benefit&gt;&gt; &lt;&lt;reentrant initialization causes a panic#green&gt;&gt; &lt;&lt;Minimum Supported rustc Version#green&gt;&gt; &lt;&lt;If only the std feature is enabled, MSRV will be updated conservatively.#green&gt;&gt; &lt;&lt;other features, like parking_lot, MSRV might be updated more frequently#green&gt;&gt; &lt;&lt;In both cases, increasing MSRV is not considered a semver-breaking change.#green&gt;&gt; &lt;&lt;based on the lazy_static and lazy_cell crates and std::sync::Once&gt;&gt; &lt;&lt;INSTANCE.get(#green&gt;&gt; &lt;&lt;INSTANCE.set(#green&gt;&gt; &lt;&lt;much more inside&gt;&gt; &lt;&lt;).unwrap()@1&gt;&gt; &lt;&lt;get_or_init&gt;&gt; &lt;&lt;use once_cell::sync::OnceCell;&gt;&gt; &lt;&lt;easier to debug#green&gt;&gt; &lt;&lt;than a deadlock#red&gt;&gt; &lt;&lt;At the moment&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/74465" id="322">
      <title>Tracking Issue for `once_cell` · Issue #74465 · rust-lang/rust</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/generic_once_cell" id="323">
      <title>generic_once_cell - crates.io: Rust Package Registry</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=790846" id="324">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/nox/mitochondria/blob/master/Cargo.toml" id="325">
      <title>mitochondria/Cargo.toml at master · nox/mitochondria#__#&lt;&lt;no_std = []#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang-nursery/lazy-static.rs/blob/master/Cargo.toml" id="1078">
      <title>lazy-static.rs/Cargo.toml at master · rust-lang-nursery/lazy-static.rs#__#&lt;&lt;spin_no_std = [&quot;spin&quot;]#green&gt;&gt; &lt;&lt;maintenance = { status = &quot;passively-maintained&quot; }#red&gt;&gt; &lt;&lt;is-it-maintained-issue-resolution = { repository = &quot;rust-lang-nursery/lazy-static.rs&quot; }#red&gt;&gt; &lt;&lt;is-it-maintained-open-issues = { repository = &quot;rust-lang-nursery/lazy-static.rs&quot; }#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/indiv0/lazycell/blob/master/src/lib.rs" id="1079">
      <title>lazycell/lib.rs at master · indiv0/lazycell#__#&lt;&lt;With a `RefCell`, the inner contents cannot be borrowed for the lifetime#red&gt;&gt; &lt;&lt;the entire object#red&gt;&gt; &lt;&lt;only of the borrows returned#green&gt;&gt; &lt;&lt;the outer object#green&gt;&gt; &lt;&lt;#![cfg_attr(feature = &quot;nightly&quot;, feature(plugin))]#green&gt;&gt; &lt;&lt;#![cfg_attr(feature = &quot;clippy&quot;, plugin(clippy))]#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/lazy-init/latest/lazy_init/" id="1080">
      <title>lazy_init - Rust#__#&lt;&lt;better than Mutex&lt;Option&lt;T&gt;&gt;#red&gt;&gt; &lt;&lt;Immutable after creation&gt;&gt; &lt;&lt;after creation accessing T&gt;&gt; &lt;&lt;not require any locking#green&gt;&gt; &lt;&lt;just a single boolean load with Ordering::Acquire#green&gt;&gt; &lt;&lt;on x86 is just a compiler barrier#green&gt;&gt; &lt;&lt;not an actual memory barrier#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/cell/index.html" id="1081">
      <title>core::cell - Rust#__#&lt;&lt;to do aliasing and mutation between multiple threads it is possible to use Mutex&lt;T&gt;, RwLock&lt;T&gt; or atomic&gt;&gt; &lt;&lt;‘interior mutability’&gt;&gt; &lt;&lt;‘inherited mutability’&gt;&gt; &lt;&lt;OnceCell&lt;T&gt;@3&gt;&gt; &lt;&lt;Sync version@1&gt;&gt; &lt;&lt;is OnceLock&lt;T&gt;&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/sync/atomic/index.html" id="1082">
      <title>core::sync::atomic - Rust#__#&lt;&lt;#[cfg(target_has_atomic)]&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/sync/struct.Once.html" id="1083">
      <title>Once in std::sync - Rust#__#&lt;&lt;If that closure panics, however, then it will poison#red&gt;&gt; &lt;&lt;similar to poisoning with mutexes#red&gt;&gt; &lt;&lt;ignores poisoning#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/panic/trait.RefUnwindSafe.html" id="1084">
      <title>RefUnwindSafe in core::panic - Rust#__#&lt;&lt;namely not implemented by UnsafeCell#red&gt;&gt; &lt;&lt;root of all interior mutability&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/panic/trait.UnwindSafe.html" id="1085">
      <title>UnwindSafe in core::panic - Rust#__#&lt;&lt;&amp;mut T#red&gt;&gt; &lt;&lt;&amp;RefCell&lt;T&gt;#red&gt;&gt; &lt;&lt;not unwind safe#red&gt;&gt; &lt;&lt;general&gt;&gt; &lt;&lt;any mutable state&gt;&gt; &lt;&lt;shared across catch_unwind#red&gt;&gt; &lt;&lt;not unwind safe by default#red&gt;&gt; &lt;&lt;Types like &amp;Mutex&lt;T&gt;#green&gt;&gt; &lt;&lt;are unwind safe@1#green&gt;&gt; &lt;&lt;poisoning by default#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html" id="1086">
      <title>Ref in core::cell - Rust#__#&lt;&lt;needs to be used as Ref::clone(...)#green&gt;&gt; &lt;&lt;A Clone implementation or a method would interfere#red&gt;&gt; &lt;&lt;widespread use of r.borrow().clone() to clone the contents of a RefCell&gt;&gt; &lt;&lt;pub fn leak&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html" id="1087">
      <title>RefCell in core::cell - Rust</title>
    </bookmark>
  </folder>
  <folder id="66">
    <title>Low Level</title>
    <folder id="326">
      <title>Embedded</title>
      <bookmark href="https://docs.rust-embedded.org/embedonomicon/smallest-no-std.html" id="836">
        <title>The smallest #![no_std] program - The Embedonomicon#__#&lt;&lt;std does more than just providing a way to access OS abstractions#red&gt;&gt; &lt;&lt;setting up stack overflow protection#green&gt;&gt; &lt;&lt;processing command line arguments#green&gt;&gt; &lt;&lt;spawning the main thread before a program&apos;s main function is invoked#green&gt;&gt; &lt;&lt;#![no_std] application can be the first and / or the only code that runs on a system#red&gt;&gt; &lt;&lt;#![no_main]#green&gt;&gt; &lt;&lt;#![no_std]@8#green&gt;&gt; &lt;&lt;#[panic_handler]#green&gt;&gt; &lt;&lt;fn panic(_panic: &amp;PanicInfo&lt;&apos;_&gt;) -&gt; ! {#green&gt;&gt; &lt;&lt;will produce an empty binary&gt;&gt; &lt;&lt;# equivalent to `size target/thumbv7m-none-eabi/debug/app`#green&gt;&gt; &lt;&lt;cargo size --target thumbv7m-none-eabi --bin app#green&gt;&gt; &lt;&lt;Before linking the crate does contain the panicking symbol.#green&gt;&gt; &lt;&lt;cargo rustc --target thumbv7m-none-eabi -- --emit=obj#green&gt;&gt; &lt;&lt;cargo nm -- target/thumbv7m-none-eabi/debug/deps/app-*.o | grep &apos;[0-9]* [^N] &apos;#green&gt;&gt; &lt;&lt;00000000 T rust_begin_unwind#green&gt;&gt; &lt;&lt;set a default build target#green&gt;&gt; &lt;&lt;to avoid having to pass the --target#red&gt;&gt; &lt;&lt;mkdir .cargo#green&gt;&gt; &lt;&lt;# modify .cargo/config#green&gt;&gt; &lt;&lt;[build]#green&gt;&gt; &lt;&lt;target = &quot;thumbv7m-none-eabi&quot;#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/cross-rs/cross" id="837">
        <title>cross-rs/cross: “Zero setup” cross compilation and “cross testing” of Rust crates#__#&lt;&lt;Linux kernel with binfmt_misc#green&gt;&gt; &lt;&lt;cargo install cross#green&gt;&gt; &lt;&lt;Testing support (cross test) is more complicated. It relies on QEMU#red&gt;&gt; &lt;&lt;very slow. cross test runs units tests sequentially because QEMU#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-embedded/wg" id="838">
        <title>rust-embedded/wg: Coordination repository of the embedded devices Working Group#__#&lt;&lt;#rust-embedded:matrix.org#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/embedded-book/index.html" id="839">
        <title>Introduction - The Embedded Rust Book</title>
      </bookmark>
      <bookmark href="https://github.com/ivmarkov/rust-esp32-std-demo" id="840">
        <title>ivmarkov/rust-esp32-std-demo: Rust on ESP32 STD demo app. A demo STD binary crate for the ESP32[XX] and ESP-IDF, which connects to WiFi, Ethernet, drives a small HTTP server and draws on a LED screen.</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/cargo-embed" id="841">
        <title>cargo-embed - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://aur.archlinux.org/packages/stm32cubemx" id="842">
        <title>AUR (en) - stm32cubemx</title>
      </bookmark>
      <bookmark href="https://www.st.com/en/development-tools/stm32cubemx.html" id="843">
        <title>STM32CubeMX - STM32Cube initialization code generator - STMicroelectronics</title>
      </bookmark>
      <bookmark href="https://www.st.com/en/ecosystems/stm32cube.html" id="844">
        <title>STM32Cube Development Software - STM32 Open Development Environment - STMicroelectronics</title>
      </bookmark>
      <bookmark href="https://github.com/Zedjones/RustConf-Notes/blob/master/Unconf/Embedded.md" id="845">
        <title>RustConf-Notes/Unconf/Embedded.md at master · Zedjones/RustConf-Notes · GitHub</title>
      </bookmark>
    </folder>
    <folder id="327">
      <title>FFI</title>
      <folder id="846">
        <title>From Other Languages</title>
        <bookmark href="https://amirkoblog.wordpress.com/2018/07/05/calling-rust-code-from-c-c/" id="1088">
          <title>Calling Rust code from C/C++ – AmirShrestha&apos;s Blog</title>
        </bookmark>
        <bookmark href="https://blog.datalust.co/rust-at-datalust-how-we-integrate-rust-with-csharp/" id="1089">
          <title>How we integrate Rust with C#, Async &amp; Handles#__#&lt;&lt;thread_local! {#green&gt;&gt; &lt;&lt;handles carry additional semantics over the raw pointers#green&gt;&gt; &lt;&lt;handle has a definition in Rust and a corresponding pair in C##green&gt;&gt; &lt;&lt;handles in Rust are responsible for allocating and deallocating shared FFI state in Rust&apos;s heap#green&gt;&gt; &lt;&lt;opaque handle#green&gt;&gt; &lt;&lt;not safe to send across threads or access concurrently#red&gt;&gt; &lt;&lt;ThreadBound is similar to the fragile::Fragile#green&gt;&gt; &lt;&lt;it panics if it&apos;s dereferenced from a different thread#red&gt;&gt; &lt;&lt;where T: ?Sized;#green&gt;&gt; &lt;&lt;T: ?Sized + Send#green&gt;&gt; &lt;&lt;T: Send + &apos;static#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://zsiciarz.github.io/24daysofrust/book/vol1/day23.html" id="1090">
          <title>Day 23 - calling Rust from other languages | 24 days of Rust</title>
        </bookmark>
        <bookmark href="https://dev.to/dandyvica/how-to-call-rust-functions-from-c-on-linux-h37" id="1091">
          <title>How to call Rust functions from C on Linux - DEV#__#&lt;&lt;`stringify!` macro converts an `ident` into a string#green&gt;&gt; &lt;&lt;build a Rust string from C string#green&gt;&gt; &lt;&lt;let s = unsafe { CStr::from_ptr(c_string).to_string_lossy().into_owned() };#green&gt;&gt; &lt;&lt;std::ffi::{c_void, CStr}#green&gt;&gt; &lt;&lt;std::os::raw::c_char#green&gt;&gt; &lt;&lt;std::slice#green&gt;&gt; &lt;&lt;build a Rust array from array &amp; length#green&gt;&gt; &lt;&lt;let rust_array: &amp;[i32] = unsafe { slice::from_raw_parts(c_array, length as usize) };#green&gt;&gt; &lt;&lt;Vec&lt;_&gt;#green&gt;&gt; &lt;&lt;NULL-terminated C strings#green&gt;&gt; &lt;&lt;pub unsafe extern &quot;C&quot; fn rust_cstruct(c_struct: *mut RustStruct) {#green&gt;&gt; &lt;&lt;let rust_struct = &amp;*c_struct;#green&gt;&gt; &lt;&lt;cargo build will compile this lib.rs file and place the result in target/debug subdirectory of the Rust project directory. My lib is called librustcalls.so#green&gt;&gt; &lt;&lt;look at exported functions with the nm command:#green&gt;&gt; &lt;&lt;nm --defined-only  -D ./rustcalls/target/debug/librustcalls.so#green&gt;&gt; &lt;&lt;gcc -g call_rust.c -o call_rust -lrustcalls -L./rustcalls/target/debug#green&gt;&gt; &lt;&lt;-g is for including symbols for debugging with gdb#green&gt;&gt; &lt;&lt;-o call_rust will create call_rust as the executable#green&gt;&gt; &lt;&lt;call_rust.c is this file:#green&gt;&gt; &lt;&lt;pass a C struct#green&gt;&gt; &lt;&lt;struct CStruct c_struct;#green&gt;&gt; &lt;&lt;rust_cstruct(&amp;c_struct);#green&gt;&gt; &lt;&lt;strcpy(c_struct.s, &quot;0123456789&quot;);#red&gt;&gt; &lt;&lt;free(c_struct.s);#red&gt;&gt; &lt;&lt;look at linked libraries using the ldd command:#green&gt;&gt; &lt;&lt;LD_LIBRARY_PATH=rustcalls/target/debug ldd call_rust#green&gt;&gt; &lt;&lt;to execute:#green&gt;&gt; &lt;&lt;LD_LIBRARY_PATH=rustcalls/target/debug ./call_rust#green&gt;&gt; &lt;&lt;#[repr(C)]#green&gt;&gt; &lt;&lt;#[derive(Debug)]#green&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="847">
        <title>Pointers</title>
        <bookmark href="https://www.reddit.com/r/rust/comments/9fj9z6/call_rust_function_from_c/" id="1092">
          <title>Call Rust function from C. : rust</title>
        </bookmark>
      </folder>
      <folder id="848">
        <title>zOther</title>
        <bookmark href="https://riptutorial.com/rust/example/21345/calling-libc-function-from-nightly-rust" id="1093">
          <title>Rust - Calling libc function from nightly rust | rust Tutorial</title>
        </bookmark>
        <bookmark href="https://subscription.packtpub.com/book/application_development/9781838828103/10/ch10lvl1sec92/calling-rust-code-from-c" id="1094">
          <title>Calling Rust code from C - The Complete...</title>
        </bookmark>
        <bookmark href="https://github.com/alexcrichton/rust-ffi-examples" id="1095">
          <title>alexcrichton/rust-ffi-examples: FFI examples...</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch19-01-unsafe-rust.html" id="1096">
          <title>Unsafe Rust - The Rust Programming Language#__#&lt;&lt;Calling Rust Functions from Other Languages#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://wiki.mozilla.org/Oxidation" id="1097">
          <title>Oxidation - MozillaWiki#__#&lt;&lt;Compilation is slow.#red&gt;&gt; &lt;&lt;safety makes it easy to make significant changes quickly#green&gt;&gt; &lt;&lt;Pleasant to use, particularly once a moderate level of experience#green&gt;&gt; &lt;&lt;untrusted input, e.g. parsers#blue&gt;&gt; &lt;&lt;parallelism@1#blue&gt;&gt; &lt;&lt;vendoring is something of a hassle.#red&gt;&gt; &lt;&lt;regularly vendor it into mozilla-central.#red&gt;&gt; &lt;&lt;erring on the side of tighter coupling is advisable.#green&gt;&gt; &lt;&lt;Rust&apos;s learning curve is steep at the start, which can be intimidating.#red&gt;&gt; &lt;&lt;Crossing the C++/Rust boundary#red&gt;&gt; &lt;&lt;standalone programs are ideal#green&gt;&gt; &lt;&lt;good software engineering practice to write loosely-coupled components anyway#green&gt;&gt; &lt;&lt;components that are relatively standalone#green&gt;&gt; &lt;&lt;small and simple APIs#green&gt;&gt; &lt;&lt;minimizes the C++/Rust boundary#red&gt;&gt; &lt;&lt;where to keep Rust crates#blue&gt;&gt; &lt;&lt;other crates came to depend#red&gt;&gt; &lt;&lt;API changes#red&gt;&gt; &lt;&lt;ended up replacing it#green&gt;&gt; &lt;&lt;easier than modifying#red&gt;&gt; &lt;&lt;don&apos;t run tests for third-party crates#green&gt;&gt; &lt;&lt;large test fixtures should be removed when vendoring third-party crates#green&gt;&gt; &lt;&lt;a series of system calls, the error checking style is nice#green&gt;&gt; &lt;&lt;low-memory footprint thanks to `tinystr`#green&gt;&gt; &lt;&lt;parallelizable with Rayon#green&gt;&gt; &lt;&lt;reducing its surface area#green&gt;&gt; &lt;&lt;replaces expat, a 3rd-party library with a history of frequent security vulnerabilities#red&gt;&gt; &lt;&lt;Rust is a much better#green&gt;&gt; &lt;&lt;than Python#red&gt;&gt; &lt;&lt;for writing compilers@2#green&gt;&gt; &lt;&lt;Incremental compilation#red&gt;&gt; &lt;&lt;Why Rust? Works with network data#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://hacks.mozilla.org/2019/04/crossing-the-rust-ffi-frontier-with-protocol-buffers/" id="1098">
          <title>Crossing the Rust FFI frontier with Protocol... @Mozilla/Firefox#__#&lt;&lt;faster#blue&gt;&gt; &lt;&lt;safer#blue&gt;&gt; &lt;&lt;only one source of truth—the .proto schema#blue&gt;&gt; &lt;&lt;more work to convert our internal&gt;&gt; &lt;&lt;one more step during our build process&gt;&gt; &lt;&lt;ship both the producer and consumer of these binary streams as a unit#blue&gt;&gt; &lt;&lt;scale across more products#blue&gt;&gt; &lt;&lt;three Firefox Sync clients#red&gt;&gt; &lt;&lt;core business logic using Rust#green&gt;&gt; &lt;&lt;wrapping it in a thin platform-native#green&gt;&gt; &lt;&lt;uneven feature-completeness#red&gt;&gt; &lt;&lt;FlatBuffers#red&gt;&gt; &lt;&lt;Protobufs provided the right trade-off#green&gt;&gt; &lt;&lt;Rust macros#green&gt;&gt; &lt;&lt;ffi-support crate#green&gt;&gt; &lt;&lt;Foreign function interface#blue&gt;&gt; &lt;&lt;Performance: JSON#red&gt;&gt; &lt;&lt;Complexity and safety#red&gt;&gt; &lt;&lt;data structure field modification on the Rust side must be reflected#red&gt;&gt; &lt;&lt;C-shaped Rust structs by pointer#red&gt;&gt; &lt;&lt;prost crate#green&gt;&gt; &lt;&lt;very clean#green&gt;&gt; &lt;&lt;leveraging Rust derive macros#green&gt;&gt; &lt;&lt;Apache Arrow@1#green&gt;&gt; &lt;&lt;designed for sharing large amounts of columnar in-memory#green&gt;&gt; &lt;&lt;between data-intensive applications#green&gt;&gt; &lt;&lt;eliminate serialization/deserialization as much as possible#blue&gt;&gt; &lt;&lt;having each application use the same memory format#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/std/process/struct.Child.html" id="1099">
          <title>Child in std::process - Rust#__#&lt;&lt;By default, stdin, stdout and stderr are inherited from the parent#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://anssi-fr.github.io/rust-guide/07_ffi.html" id="1100">
          <title>Foreign Function Interface - Secure Rust Guidelines#__#&lt;&lt;#[repr(C, packed)]&gt;&gt; &lt;&lt;compatible with the following C&gt;&gt; &lt;&lt;__attribute__((packed))&gt;&gt; &lt;&lt;rust-bindgen or cbindgen&gt;&gt; &lt;&lt;A trap representation#red&gt;&gt; &lt;&lt;lot of Rust types are non-robust#red&gt;&gt; &lt;&lt;even among the C-compatible types:#red&gt;&gt; &lt;&lt;integer types (u*/i*)#green&gt;&gt; &lt;&lt;packed compound types#green&gt;&gt; &lt;&lt;that contain no non-robust fields#red&gt;&gt;</title>
        </bookmark>
      </folder>
    </folder>
    <folder id="328">
      <title>GPGPU</title>
      <bookmark href="https://github.com/blas-lapack-rs" id="849">
        <title>BLAS and LAPACK for Rust</title>
      </bookmark>
      <bookmark href="https://github.com/gfx-rs/wgpu-rs" id="850">
        <title>wgpu-rs - Emu low level; WASM</title>
      </bookmark>
      <bookmark href="https://bheisler.github.io/post/state-of-gpgpu-in-rust/" id="851">
        <title>The State of GPGPU in Rust | bheisler.github.io#__#&lt;&lt;8 Aug, 2018#red&gt;&gt; &lt;&lt;CUDA support in Rust is pretty poor#red&gt;&gt; &lt;&lt;rust-opencl#red&gt;&gt; &lt;&lt;is abandoned#red&gt;&gt; &lt;&lt;ocl@2#green&gt;&gt; &lt;&lt;drop down to the lower level if needed#green&gt;&gt; &lt;&lt;OpenCL kernels#red&gt;&gt; &lt;&lt;in OpenCL C#red&gt;&gt; &lt;&lt;source code is passed to the GPU driver for compilation at runtime#red&gt;&gt; &lt;&lt;lose all of the nice compile-time safety checks that Rust#red&gt;&gt; &lt;&lt;NVIDIA-only, CUDA#red&gt;&gt; &lt;&lt;more widely used#green&gt;&gt; &lt;&lt;than OpenCL#red&gt;&gt; &lt;&lt;write C or C++ and mark GPU code with special annotations#green&gt;&gt; &lt;&lt;compiler-wrapper called#green&gt;&gt; &lt;&lt;nvcc#green&gt;&gt; &lt;&lt;CUDA in Rust#red&gt;&gt; &lt;&lt;rustc#green&gt;&gt; &lt;&lt;supports LLVM’s NVPTX backend#green&gt;&gt; &lt;&lt;To compile to PTX, you have to use a specific nightly build (2018-04-10)#red&gt;&gt; &lt;&lt;Xargo to cross-compile#red&gt;&gt; &lt;&lt;core#red&gt;&gt; &lt;&lt;extra LLVM tools#red&gt;&gt; &lt;&lt;compiling them from source#red&gt;&gt; &lt;&lt;invalid PTX file or just crashes#red&gt;&gt; Archived!&lt;&lt;accel@1#red&gt;&gt; &lt;&lt;forked the Rust compiler#red&gt;&gt; &lt;&lt;only works on Linux#red&gt;&gt; &lt;&lt;documentation is poor#red&gt;&gt; &lt;&lt;Rust bindings for many CUDA libraries like#red&gt;&gt; &lt;&lt;CuBLAS#red&gt;&gt; &lt;&lt;also abandoned#red&gt;&gt; &lt;&lt;Collenchyma#red&gt;&gt; &lt;&lt;Parenchyma#red&gt;&gt; &lt;&lt;abandoned as well#red&gt;&gt; &lt;&lt;Higher-Level Libraries#green&gt;&gt; &lt;&lt;arrayfire-rust#green&gt;&gt; &lt;&lt;Rust binding@1#red&gt;&gt; &lt;&lt;pre-baked operations#red&gt;&gt; &lt;&lt;lower-level control to get that last bit of performance, or if your problem doesn’t fit their model, then I think you’re out of luck#red&gt;&gt; NVIDIA&lt;&lt;Thrust#green&gt;&gt; NVIDIA&lt;&lt;OpenACC#green&gt;&gt; &lt;&lt;Vulkano#red&gt;&gt; &lt;&lt;C-like language (similar to the one OpenCL#red&gt;&gt; &lt;&lt;API is quite verbose#red&gt;&gt; &lt;&lt;Vulkan is primarily focused on graphics#red&gt;&gt; &lt;&lt;rlsl#red&gt;&gt; &lt;&lt;shaders for graphics#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/em" id="852">
        <title>em (Emu) - crates.io: Rust Package Registry</title>
      </bookmark>
      <bookmark href="https://ehsanmkermani.com/2019/05/13/state-of-machine-learning-in-rust/" id="853">
        <title>State of Machine Learning in Rust – Ehsan&apos;s Blog</title>
      </bookmark>
      <bookmark href="https://github.com/rust-ndarray/ndarray" id="854">
        <title>rust-ndarray/ndarray: ndarray: an N-dimensional array with array views, multidimensional slicing, and efficient operations</title>
      </bookmark>
      <bookmark href="https://github.com/blas-lapack-rs/blas-lapack-rs.github.io/wiki" id="855">
        <title>Home · blas-lapack-rs/blas-lapack-rs.github.io Wiki</title>
      </bookmark>
      <bookmark href="https://github.com/spearow/coaster" id="856">
        <title>spearow/coaster: Extendable HPC-Framework for CUDA, OpenCL and common CPU#__#&lt;&lt;Archived#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/arrayfire/arrayfire-rust" id="857">
        <title>arrayfire/arrayfire-rust: Rust wrapper for ArrayFire</title>
      </bookmark>
      <bookmark href="https://github.com/calebwin/emu" id="858">
        <title>calebwin/emu: The write-once-run-anywhere GPGPU library for Rust#__#&lt;&lt;CUDA-esque#green&gt;&gt; &lt;&lt;over WebGPU#green&gt;&gt; &lt;&lt;desktop, mobile, and browser#green&gt;&gt; &lt;&lt;DeviceBox&lt;T&gt;#green&gt;&gt; &lt;&lt;for data that lives on the GPU#green&gt;&gt; &lt;&lt;ensuring type-safe data movement#green&gt;&gt; &lt;&lt;DevicePool#green&gt;&gt; &lt;&lt;no-config#red&gt;&gt; &lt;&lt;auto-managed pool of devices#green&gt;&gt; &lt;&lt;trait Cache#green&gt;&gt; &lt;&lt;no-setup#red&gt;&gt; &lt;&lt;LRU cache of JITed compute kernels#green&gt;&gt; &lt;&lt;at any point, you can decide to remove the abstraction and work directly with WebGPU constructs#green&gt;&gt; &lt;&lt;mix Emu with WebGPU#green&gt;&gt; &lt;&lt;zerocopy::*#green&gt;&gt; &lt;&lt;#[repr(C)]#green&gt;&gt; &lt;&lt;#[derive(AsBytes, FromBytes#green&gt;&gt; &lt;&lt;Debug)]#green&gt;&gt; &lt;&lt;For this example, we make this entire function async#red&gt;&gt; &lt;&lt;in reality you will only want small blocks of code to be async#green&gt;&gt; &lt;&lt;asynchronous memory transfers and computation#green&gt;&gt; &lt;&lt;these blocks will be sent off to an executor to execute#green&gt;&gt; &lt;&lt;don&apos;t want to do something like this where you are blocking#red&gt;&gt; &lt;&lt;doing an entire compilation step) in your async#red&gt;&gt; &lt;&lt;layout(local_size_x = 1) in; // our thread block size#green&gt;&gt; &lt;&lt;spawn 128 threads#green&gt;&gt; &lt;&lt;&lt;dyn#green&gt;&gt; &lt;&lt;move a bunch of rectangles to the GPU#green&gt;&gt; &lt;&lt;let mut x: DeviceBox&lt;[Rectangle]&gt; = vec![Default::default(); 128].as_device_boxed()?;#green&gt;&gt; &lt;&lt;spawn(128).launch(call!(c, &amp;mut x));#green&gt;&gt; &lt;&lt;futures::executor::block_on(x.get())?#green&gt;&gt; &lt;&lt;yet to be implemented#red&gt;&gt; &lt;&lt;portability#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.google.com/presentation/d/1TuK7xJGyV520JI5MD2pEGGwImE1c8ECpsf1UlSCfYlA/edit#slide=id.gcb9a0b074_1_0" id="1294">
        <title>GPU Progamming With Rust - Google Slides</title>
      </bookmark>
    </folder>
    <folder id="329">
      <title>no_std</title>
      <bookmark href="https://docs.rust-embedded.org/book/intro/no-std.html" id="859">
        <title>no_std - The Embedded Rust Book</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/1.7.0/book/using-rust-without-the-standard-library.html" id="860">
        <title>Using Rust Without the Standard Library#__#&lt;&lt;For details on binaries#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/1.7.0/book/no-stdlib.html" id="861">
        <title>No stdlib#__#&lt;&lt;For details on libraries#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/Simsys/arrform" id="862">
        <title>Simsys/arrform: String formatting in Rust without memory allocator</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/50200268/how-can-i-use-the-format-macro-in-a-no-std-environment" id="863">
        <title>text - How can I use the format! macro in a no_std environment? - Stack Overflow</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/hashbrown" id="864">
        <title>rust-lang/hashbrown: Rust port of Google&apos;s SwissTable hash map#__#&lt;&lt;Compatible with #[no_std] (but requires a global allocator with the alloc crate&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.dbrgn.ch/2019/12/24/testing-for-no-std-compatibility/" id="865">
        <title>Testing for no_std compatibility in Rust crates - blog.dbrgn.ch#__#&lt;&lt;different when it comes to dependencies that require std#red&gt;&gt; &lt;&lt;separate crate that is only used for testing whether compilation in a no_std#green&gt;&gt; &lt;&lt;make the crate no_std compatible&gt;&gt; &lt;&lt;[profile.dev]&gt;&gt; &lt;&lt;panic = &quot;abort&quot;#green&gt;&gt; &lt;&lt;[profile.release]&gt;&gt; &lt;&lt;src/main.rs&gt;&gt; &lt;&lt;#![no_main]&gt;&gt; &lt;&lt;#[panic_handler]&gt;&gt; &lt;&lt;pub extern &quot;C&quot; fn _start() -&gt; ! {&gt;&gt; &lt;&lt;cargo rustc -- -C link-arg=-nostartfiles#green&gt;&gt; &lt;&lt;GitHub Actions:&gt;&gt; &lt;&lt;uses: actions-rs/cargo@v1&gt;&gt; &lt;&lt;with:&gt;&gt; &lt;&lt;command: rustc&gt;&gt; &lt;&lt;args: --manifest-path=ensure_no_std/Cargo.toml -- -C link-arg=-nostartfiles&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/hobofan/cargo-nono" id="866">
        <title>hobofan/cargo-nono: Check your crate for (possible) no_std compatibility#__#&lt;&lt;cargo-nono also comes as prebuilt binaries (useful for CI&gt;&gt; 59 dependencies!&lt;&lt;cargo install cargo-nono#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/dbrgn/shtcx-rs/blob/master/.github/workflows/ci.yml" id="867">
        <title>shtcx-rs/ci.yml at master · dbrgn/shtcx-rs#__#&lt;&lt;Download cargo-nono&gt;&gt; &lt;&lt;https://github.com/hobofan/cargo-nono/releases/&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/compiler-builtins/issues/361" id="868">
        <title>SIGSEGV when trying to link with nostartfiles flag · Issue #361 · rust-lang/compiler-builtins#__#&lt;&lt;rustflags = &quot;-C link-arg=-nostartfiles&quot; in .cargo/config.toml&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/indexmap/latest/indexmap/" id="1295">
        <title>indexmap - Rust#__#&lt;&lt;no-std compatible hasher&gt;&gt; &lt;&lt;twox-hash#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://towardsdatascience.com/nine-rules-for-running-rust-on-the-web-and-on-embedded-94462ef249a2" id="1296">
        <title>Nine Rules for Running Rust on the Web and on Embedded | by Carl M. Kadie | Towards Data Science#__#&lt;&lt;top of lib.rs&gt;&gt; &lt;&lt;#![cfg_attr(not(test), no_std)]#green&gt;&gt; &lt;&lt;tells the Rust compiler not to include the standard library, except when testing&gt;&gt; &lt;&lt;alloc = []&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="330">
      <title>Unsafe</title>
      <bookmark href="https://blog.iany.me/2020/04/rust-pin/" id="869">
        <title>Rust Pin</title>
      </bookmark>
      <bookmark href="https://ehsanmkermani.com/2019/03/10/rust-std-study-series-vec/" id="870">
        <title>Rust std study series: Vec – Ehsan&apos;s Blog#__#&lt;&lt;Vec&lt;T&gt; contains (pointer, capacity, length)#green&gt;&gt; &lt;&lt;Vec::new(), vec![] or Vec::with_capacity(0)#green&gt;&gt; &lt;&lt;does not allocate for a Zero-Sized-Type (ZST) even with positive capacity#green&gt;&gt; &lt;&lt;(re)allocate by a certain#green&gt;&gt; &lt;&lt;growth factor is 2#green&gt;&gt; &lt;&lt;1.5 or a number a bit less than golden ratio is considered optimal#green&gt;&gt; &lt;&lt;insertion amortized#green&gt;&gt; &lt;&lt;pop (from back) is#green&gt;&gt; &lt;&lt;not amortized#green&gt;&gt; &lt;&lt;to free up some memory, use shrink_to_fit#green&gt;&gt; &lt;&lt;Vec for FFI or as a memory-backed collection#red&gt;&gt; &lt;&lt;deallocate memory with from_raw_parts and then drop explicitly#green&gt;&gt; This link shows a GitHub Gist at play.rust-lang.org&lt;&lt;into slice#green&gt;&gt; &lt;&lt;FFI and need to pass as pointer#red&gt;&gt; &lt;&lt;shrink_to_fit or truncate by the length prior to passing the (as_mut_ptr() or as_ptr())#green&gt;&gt; &lt;&lt;to not pass uninitialized memory buffer#red&gt;&gt; &lt;&lt;Send/Sync#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://timothy.hobbs.cz/rust-play/petgraph-internals.html" id="871">
        <title>petgraph-internals - Visualise</title>
      </bookmark>
      <bookmark href="https://gankra.github.io/blah/tower-of-weakenings/" id="872">
        <title>The Tower of Weakenings: Memory Models For Everyone - Faultlore</title>
      </bookmark>
      <bookmark href="https://smallcultfollowing.com/babysteps/blog/2016/05/23/unsafe-abstractions/" id="873">
        <title>Baby Steps</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/nomicon/safe-unsafe-meaning.html" id="874">
        <title>How Safe and Unsafe Interact - The Rustonomicon#__#&lt;&lt;#![forbid(unsafe_code)]&gt;&gt; &lt;&lt;Safe Rust inherently has to trust that any Unsafe Rust it touches has been written correctly&gt;&gt; &lt;&lt;Unsafe Rust cannot trust Safe Rust without care#red&gt;&gt; &lt;&lt;BTreeMap has Unsafe#red&gt;&gt; &lt;&lt;BTreeMap must be written to be robust against Ord implementations which aren&apos;t actually total#red&gt;&gt; &lt;&lt;Unsafe Rust code just can&apos;t trust the Safe Rust code to be written correctly#red&gt;&gt; &lt;&lt;BTreeMap will still behave completely erratically if you feed in values that don&apos;t have a total&gt;&gt; &lt;&lt;just won&apos;t ever cause Undefined Behavior#green&gt;&gt; &lt;&lt;why can it trust any Safe code?&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/pacak/omnomnomicon" id="875">
        <title>pacak/omnomnomicon</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nomicon/intro.html" id="876">
        <title>Introduction - The Rustonomicon</title>
      </bookmark>
      <bookmark href="https://github.com/Zedjones/RustConf-Notes/blob/master/Talks/Unsafe%20Code.md" id="877">
        <title>RustConf-Notes/Talks/Unsafe Code.md at master · Zedjones/RustConf-Notes · GitHub</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md" id="878">
        <title>unsafe-code-guidelines/wip/stacked-borrows.md at master · rust-lang/unsafe-code-guidelines</title>
      </bookmark>
    </folder>
    <folder id="331">
      <title>zOther</title>
      <bookmark href="https://crates.io/crates/bitflags" id="879">
        <title>bitflags - Rust</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/nom" id="880">
        <title>nom - parsing at lowe level</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/book/ch12-02-reading-a-file.html" id="881">
        <title>Reading a File - The Rust Programming Language#__#&lt;&lt;use std::fs;#green&gt;&gt; &lt;&lt;let contents = fs::read_to_string(filename)#green&gt;&gt; &lt;&lt;.expect(&quot;Something went wrong reading the file&quot;);#green&gt;&gt; &lt;&lt;function has multiple responsibilities#red&gt;&gt; &lt;&lt;each function is responsible for only one idea#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.linuxfromscratch.org/blfs/view/svn/introduction/notes-on-building.html" id="882">
        <title>Notes on Building Software#__#&lt;&lt;default is 3, like -O3, e.g. -Copt-level=3#green&gt;&gt; &lt;&lt;default all CPUs#green&gt;&gt; &lt;&lt;CARGO_BUILD_JOBS=&lt;N&gt; or passing --jobs &lt;N&gt; to cargo#green&gt;&gt; &lt;&lt;compiling rustc itself#green&gt;&gt; &lt;&lt;x.py#green&gt;&gt; &lt;&lt;--jobs &lt;N&gt;@1#green&gt;&gt; &lt;&lt;together with the CARGO_BUILD_JOBS#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rust-lang.github.io/rustup/installation/other.html" id="883">
        <title>Other installation methods - The rustup book#__#&lt;&lt;i686-unknown-linux-gnu#green&gt;&gt; &lt;&lt;x86_64-unknown-linux-gnu#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://rtic.rs/1.0/book/en/" id="884">
        <title>Preface - Real-Time Interrupt-driven Concurrency</title>
      </bookmark>
      <bookmark href="https://research.checkpoint.com/2023/rust-binary-analysis-feature-by-feature/" id="885">
        <title>Rust Binary Analysis, Feature by Feature - Check Point Research#__#&lt;&lt;sum_types (here), more_sum_types (here) and truly_pathological_sum_types#green&gt;&gt; &lt;&lt;check is compiled away to nothingness&gt;&gt; &lt;&lt;only one possible answer&gt;&gt; &lt;&lt;piggyback off the String structure’s buf#green&gt;&gt; &lt;&lt;not going to do with 4 fields#red&gt;&gt; &lt;&lt;what it can do with 3#green&gt;&gt; &lt;&lt;Option&lt;Beatle&gt; is still a single field just like Beatle, but now it supports another value: 4#green&gt;&gt; &lt;&lt;Option&lt;Beatle&gt; of course the compiler would piggyback#green&gt;&gt; &lt;&lt;A C programmer would balk at this – what’s a struct worth if you can’t do pointer arithmetic on it#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/cargo-show-asm/0.2.18/cargo_show_asm/" id="886">
        <title>cargo_show_asm - Rust#__#&lt;&lt;LLVM-IR, MIR and WASM&gt;&gt; &lt;&lt;llvm-mca&gt;&gt; &lt;&lt;My function isn’t there!@1#red&gt;&gt; &lt;&lt;function takes a generic parameter#red&gt;&gt; &lt;&lt;making a monomorphic wrapper around it#green&gt;&gt; &lt;&lt;make it pub#green&gt;&gt; &lt;&lt;#[inline(never)]#green&gt;&gt; &lt;&lt;cargo-asm is not maintained#red&gt;&gt; &lt;&lt;cargo install cargo-show-asm -F bright-color#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://blog.japaric.io/brave-new-io/" id="887">
        <title>Brave new I/O | Embedded in Rust</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/16xhpta/progress_report_26_rustc_codegen_gcc_can_now/" id="888">
        <title>Reddit - Dive into anything#__#&lt;&lt;rustc_codegen_gcc&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.linkedin.com/feed/update/urn:li:activity:7136037388279066624/" id="1297">
        <title>(23) Post | Feed | LinkedIn#__#&lt;&lt;Rust std fs slower than Python?&gt;&gt; &lt;&lt;No, it&apos;s hardware#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/" id="1298">
        <title>Rust std fs slower than Python!? No, it&apos;s hardware!</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="67">
    <title>Memory</title>
    <folder id="332">
      <title>Cache</title>
      <bookmark href="https://docs.rs/cache-size/latest/cache_size/" id="889">
        <title>cache_size - Rust#__#&lt;&lt;only supports x86#red&gt;&gt; &lt;&lt;via the raw_cpuid crate&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/crossbeam-utils/latest/crossbeam_utils/struct.CachePadded.html" id="890">
        <title>CachePadded in crossbeam_utils - Rust</title>
      </bookmark>
    </folder>
    <folder id="333">
      <title>Initialise, MaybeUninit...</title>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/items/static-items.html" id="891">
        <title>Static items - The Rust Reference#__#&lt;&lt;Static items do not call drop#red&gt;&gt; &lt;&lt;static initializer is a constant expression evaluated at compile time#red&gt;&gt; &lt;&lt;Sync trait bound#green&gt;&gt; &lt;&lt;Constants cannot refer to statics.#red&gt;&gt; &lt;&lt;initializer expression must be omitted in an external block#red&gt;&gt; &lt;&lt;unsafe block is required when either reading or writing a mutable static variable.#red&gt;&gt; &lt;&lt;Mutable statics have the same restrictions as normal statics, except that the type does not have to implement the Sync#blue&gt;&gt; &lt;&lt;Constants should, in general, be preferred over statics unless#green&gt;&gt; &lt;&lt;Large amounts of data#red&gt;&gt; &lt;&lt;single-address property of statics is required#red&gt;&gt; &lt;&lt;Interior mutability is required#green&gt;&gt;&lt;&lt;static item defined in a generic scope#blue&gt;&gt; &lt;&lt;in a blanket&gt;&gt; &lt;&lt;or default implementation&gt;&gt; &lt;&lt;result in exactly one static item being defined#red&gt;&gt; &lt;&lt;as if the static definition was pulled out of the current scope into the module#green&gt;&gt; &lt;&lt;not be one item per monomorphization#red&gt;&gt; &lt;&lt;impl&lt;T&gt; Tr#red&gt;&gt; &lt;&lt;fn blanket_impl() {#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://google.github.io/comprehensive-rust/unsafe-rust/mutable-static.html" id="892">
        <title>Mutable Static Variables - Comprehensive Rust 🦀</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/61891801/can-rust-constant-expressions-use-traits-like-default" id="893">
        <title>Can Rust constant expressions use traits...#__#&lt;&lt;..Default::default() syntax is not restricted to Default::default()#green&gt;&gt; &lt;&lt;a: A = A {@1#green&gt;&gt; &lt;&lt;b: None,@2#green&gt;&gt; &lt;&lt;.A::new()#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/mem/fn.zeroed.html" id="894">
        <title>std::mem::zeroed - Rust</title>
      </bookmark>
      <bookmark href="https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=efa6fb4de4d30d4813a8790fefbb7bed" id="895">
        <title>Rust Playground</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/mem/union.MaybeUninit.html" id="896">
        <title>MaybeUninit in core::mem - Rust#__#&lt;&lt;partially initialized arrays&gt;&gt; &lt;&lt;in low-level datastructures#green&gt;&gt; &lt;&lt;out-pointers&gt;&gt; &lt;&lt;avoid unnecessary moves#green&gt;&gt; &lt;&lt;zero-initializing a variable of reference type causes instantaneous undefined behavior#red&gt;&gt; &lt;&lt;no matter whether that reference ever gets used to access memory#red&gt;&gt; &lt;&lt;for various optimizations#green&gt;&gt; &lt;&lt;uninitialized memory may have any content#red&gt;&gt; &lt;&lt;while a bool must always#red&gt;&gt; &lt;&lt;true or false#red&gt;&gt; &lt;&lt;let b: bool = unsafe { mem::uninitialized() };#red&gt;&gt; &lt;&lt;let b: bool = unsafe { MaybeUninit::uninit().assume_init() };#red&gt;&gt; &lt;&lt;uninitialized memory is special#red&gt;&gt; &lt;&lt;not have a fixed value#red&gt;&gt; &lt;&lt;change without being written to#red&gt;&gt; &lt;&lt;Reading the same uninitialized byte multiple times#red&gt;&gt; &lt;&lt;give different results#red&gt;&gt; &lt;&lt;beyond merely being considered initialized at the type level#red&gt;&gt; &lt;&lt;1-initialized Vec&lt;T&gt; is considered initialized#red&gt;&gt; &lt;&lt;the only requirement the compiler knows about#red&gt;&gt; &lt;&lt;pointer must be non-null&gt;&gt; &lt;&lt;not cause immediate undefined behavior#red&gt;&gt; &lt;&lt;but will cause undefined behavior#red&gt;&gt; &lt;&lt;safe operations#red&gt;&gt; &lt;&lt;including dropping it#red&gt;&gt; &lt;&lt;a signal to the compiler#green&gt;&gt; &lt;&lt;let mut v = MaybeUninit::uninit();&gt;&gt; &lt;&lt;v.as_mut_ptr()&gt;&gt; &lt;&lt;v.assume_init()&gt;&gt; &lt;&lt;unsafe { make_vec(#blue&gt;&gt; &lt;&lt;field-by-field#green&gt;&gt; &lt;&lt;dropping a MaybeUninit&lt;T&gt; will never call T’s drop#red&gt;&gt; &lt;&lt;Setting hello does not leak prior allocations#green&gt;&gt; &lt;&lt;drops them#green&gt;&gt; &lt;&lt;reference into the `MaybeUninit&lt;T&gt;`#green&gt;&gt; &lt;&lt;okay because we initialized#green&gt;&gt; &lt;&lt;bitwise copy#red&gt;&gt; &lt;&lt;Copy trait or not#red&gt;&gt; &lt;&lt;`Copy`, so we may read multiple#green&gt;&gt; &lt;&lt;Duplicating a `None` value is okay#green&gt;&gt; &lt;&lt;If you have ownership&gt;&gt; &lt;&lt;can also use assume_init&gt;&gt; &lt;&lt;but don’t have ownership#green&gt;&gt; &lt;&lt;compiler then knows to not make any incorrect assumptions or optimizations#green&gt;&gt; &lt;&lt;mem::transmute::&lt;_, [Vec&lt;u32&gt;; 1000]&gt;(data)&gt;&gt; &lt;&lt;std::ptr::addr_of_mut macro#green&gt;&gt; &lt;&lt;preferable to use assume_init#green&gt;&gt; &lt;&lt;prevents duplicating#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ptr/index.html" id="897">
        <title>core::ptr - Rust#__#&lt;&lt;the only really concerning operation that wasn’t obviously already Undefined Behaviour is casts from usize to a pointer#red&gt;&gt; &lt;&lt;#![feature(strict_provenance)]#green&gt;&gt; &lt;&lt;null pointer is never#red&gt;&gt; &lt;&lt;not even for accesses of size zero#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/rust-lang/rust/issues/95228" id="898">
        <title>Tracking Issue for strict_provenance · Issue #95228 · rust-lang/rust#__#&lt;&lt;Problematic (And Might Be Impossible)#red&gt;&gt; &lt;&lt;Pointer Compression&gt;&gt; &lt;&lt;V8 and JVM&gt;&gt; &lt;&lt;want the evil shit you do with pointers#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html" id="899">
        <title>Behavior considered undefined - The Rust Reference</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ptr/fn.write.html" id="900">
        <title>write in core::ptr - Rust#__#&lt;&lt;without reading or dropping#red&gt;&gt; &lt;&lt;does not drop src#red&gt;&gt; &lt;&lt;Semantically, src is moved&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ptr/fn.read.html" id="1299">
        <title>read in core::ptr - Rust#__#&lt;&lt;without moving it#red&gt;&gt; &lt;&lt;leaves the memory in src unchanged.&gt;&gt; &lt;&lt;src must be properly aligned#red&gt;&gt; &lt;&lt;read_unaligned@1#green&gt;&gt; &lt;&lt;even if T has size 0#red&gt;&gt; &lt;&lt;bitwise copy#blue&gt;&gt; &lt;&lt;regardless of whether T is Copy#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ptr/macro.addr_of_mut.html" id="1300">
        <title>addr_of_mut in core::ptr - Rust#__#&lt;&lt;without creating an intermediate reference#green&gt;&gt; &lt;&lt;`{...}` forces copying#green&gt;&gt; &lt;&lt;instead of creating a reference#red&gt;&gt; &lt;&lt;`&amp;uninit.as_mut().field`#red&gt;&gt; &lt;&lt;reference to an uninitialized `bool`#red&gt;&gt; &lt;&lt;uninit =&gt;&gt; &lt;&lt;let f1_ptr =&gt;&gt; &lt;&lt;unsafe { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };#green&gt;&gt; &lt;&lt;unsafe { f1_ptr.write(true); }&gt;&gt; &lt;&lt;unsafe { uninit.assume_init() }&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/mem/fn.transmute.html" id="1301">
        <title>transmute in core::mem - Rust#__#&lt;&lt;chaining of `as`#red&gt;&gt; &lt;&lt;`as` is not transitive#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="334">
      <title>Leak/Track/Valgrind</title>
      <bookmark href="https://github.com/firecracker-microvm/firecracker/issues/119" id="901">
        <title>Check for Memory Leaks · Issue #119...#__#&lt;&lt;unsafe code#red&gt;&gt; &lt;&lt;CString which needs to be deallocated explicitly#red&gt;&gt; &lt;&lt;could use valgrind#green&gt;&gt; &lt;&lt;See creativcoder.github.io/post/checking_memory_leaks_in_rust_ffi#green&gt;&gt; &lt;&lt;as it might not work out of the box.#red&gt;&gt; &lt;&lt;wanted to start by trying the sanitizers rustc ships with (japaric/rust-san#green&gt;&gt; &lt;&lt;but they apparently don&apos;t work with musl at this point#red&gt;&gt; &lt;&lt;valgrind does not work with the stable toolchain, because there&apos;s no way to switch to the system allocator from jemalloc.#red&gt;&gt; &lt;&lt;Unfortunately, even if this is possible on nightly, valgrind still appears to miss detecting any heap allocation.#red&gt;&gt; &lt;&lt;This does not appear to be related to musl.#blue&gt;&gt; &lt;&lt;#[global_allocator] attribute was stabilized#green&gt;&gt; &lt;&lt;enabling the switch to the system or a custom allocator on a stable toolchain#green&gt;&gt; &lt;&lt;As per your information, jemalloc can now be replaced with the System allocator in the stable toolchain. We could try do that and give it a go with the valgrind&gt;&gt; &lt;&lt;As per #639, firecracker can be built with glibc#green&gt;&gt; &lt;&lt;check again to see if the provided rustc sanitizers can now work with musl.&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/ralloc" id="902">
        <title>crates.io: Rust Package Registry#__#See Yawas for gitlab.redox-os.org/redox-os/ralloc/-/blob/master/README.md&lt;&lt;ralloc&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/crate/alloc-stdlib/latest" id="903">
        <title>alloc-stdlib 0.2.2 - Docs.rs#__#&lt;&lt;stdlib-independent&gt;&gt; &lt;&lt;described by rust-alloc-no-stdlib&gt;&gt; &lt;&lt;on the stack&gt;&gt; &lt;&lt;unsafely linking to calloc#red&gt;&gt; &lt;&lt;unsafely referencing a mutable global#red&gt;&gt; &lt;&lt;leak memory if free_cell isn&apos;t specifically invoked#red&gt;&gt; &lt;&lt;if linked by a library that actually can depend on the stdlib#green&gt;&gt; &lt;&lt;pass in a few allocators and use the standard Box#green&gt;&gt; &lt;&lt;free automatically.#green&gt;&gt; &lt;&lt;jail a rust application that needs dynamic&gt;&gt; &lt;&lt;preallocating a maximum#green&gt;&gt; &lt;&lt;using calloc&gt;&gt; &lt;&lt;seccomp to disallow future syscalls#green&gt;&gt; &lt;&lt;most efficient way to get a zero&apos;d#green&gt;&gt; &lt;&lt;dynamically sized#green&gt;&gt; &lt;&lt;without the stdlib#green&gt;&gt; &lt;&lt;invoke the C calloc&gt;&gt; &lt;&lt;hence must invoke unsafe#red&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="335">
      <title>Matrix</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/2s4scj/2_3_n_dimensional_arrays/" id="904">
        <title>2, 3, n dimensional arrays : rust#__#&lt;&lt;[[f32; 4]; 4]#green&gt;&gt; &lt;&lt;[[1.0, 0.0, 0.0, 0.0],#green&gt;&gt; &lt;&lt;[0.0, 0.0, 0.0, 1.0]]#green&gt;&gt; &lt;&lt;Matrices and multidimensional arrays#green&gt;&gt; &lt;&lt;crates with varying focus#green&gt;&gt; &lt;&lt;nalgebra is one of the best#green&gt;&gt; &lt;&lt;piston#green&gt;&gt; &lt;&lt;I&apos;ve created an &quot;ndarray&quot;#green&gt;&gt; &lt;&lt;numpy&apos;s ndarray#green&gt;&gt; &lt;&lt;broadcasting support#green&gt;&gt; &lt;&lt;adding arrays of differing ndim#green&gt;&gt; &lt;&lt;overload the Index trait to use tuple coordinates: matrix[(2, 4, 5)]#green&gt;&gt; &lt;&lt;array prefilled with the same data, you can use ([x; n], where n is the length#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/array2d/0.2.1/array2d/" id="905">
        <title>array2d - Rust</title>
      </bookmark>
    </folder>
    <folder id="336">
      <title>MMap</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/906u4k/memorymapped_files_in_rust/" id="906">
        <title>Memory-mapped files in Rust : rust#__#&lt;&lt;fundamental mismatch#red&gt;&gt; &lt;&lt;Safe Rust assumes that memory won&apos;t be modified behind its back#blue&gt;&gt; &lt;&lt;mmap allows the OS to asynchronously free the memory#red&gt;&gt; &lt;&lt;not possible to soundly create safe borrows of mmapped memory#red&gt;&gt; &lt;&lt;The copying in step 6 is probably necessary#green&gt;&gt; &lt;&lt;any thread-local variable that&apos;s shared between the main flow of execution and a signal handler needs to be volatile#red&gt;&gt; &lt;&lt;volatile not atomic#red&gt;&gt; &lt;&lt;warn the compiler that attempting to read from the mapped memory means that the signal variable may change. read_volatile#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/8dacce/shared_memory_wrapper_for_rust/" id="907">
        <title>Shared Memory Wrapper for Rust : rust#__#&lt;&lt;shared_memory#blue&gt;&gt; &lt;&lt;crate different from what this one(memmap#blue&gt;&gt; &lt;&lt;I think that mem_file is a wrapper around shm#green&gt;&gt; &lt;&lt;memmap is a wrapper for mmaping files.#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/28516996/how-to-create-and-write-to-memory-mapped-files" id="908">
        <title>rust - How to create and write to memory mapped files? - Stack Overflow#__#&lt;&lt;use a crate#green&gt;&gt; &lt;&lt;cross-platform#green&gt;&gt; Better than std::os::MemoryMap&lt;&lt;use memmap#green&gt;&gt; &lt;&lt;Allocate space in the file first#green&gt;&gt; &lt;&lt;change from outside of the Rust program, breaking#red&gt;&gt; &lt;&lt;invariants that the unsafe block is supposed to hold#red&gt;&gt; &lt;&lt;programmer needs to ensure that the file doesn&apos;t change#green&gt;&gt; &lt;&lt;crate itself does not provide much assistance to prevent#red&gt;&gt; &lt;&lt;or even any documentation warning the user#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/how-unsafe-is-mmap/19635/10" id="909">
        <title>How unsafe is mmap? - help - The Rust Programming Language Forum#__#&lt;&lt;If you’re handing a &amp;[u8] to another crate, then you can be pretty sure that all its going to do is read from it.@1#green&gt;&gt; UB = Undefined Behavior&lt;&lt;But as established by the example of using str, just reading could definitely be enough for UB#red&gt;&gt; &lt;&lt;generally not expect that an external library is not allowed to try to turn the byte slice into a string and then use that string to e.g. parse it into an integer.#red&gt;&gt; &lt;&lt;|digits| unsafe { from_utf8_unchecked(digits).parse() }#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/how-unsafe-is-mmap/19635/5" id="910">
        <title>How unsafe is mmap? - help - The Rust Programming Language Forum#__#&lt;&lt;if you write a Rust library that uses memory maps, then that use of unsafe needs to be propagated outwards into your public API#green&gt;&gt; &lt;&lt;memory maps here: https://www.reddit.com/r/rust/comments/906u4k/memorymapped_files_in_rust/e2rac2e/#green&gt;&gt; &lt;&lt;don’t know how to safely encapsulate the use of a memory map inside a library#red&gt;&gt; &lt;&lt;both portable#red&gt;&gt; &lt;&lt;doesn’t negate some or all of the benefits of using memory maps#red&gt;&gt; &lt;&lt;In ripgrep’s case, it never creates a &amp;str from a memory mapped region of &amp;[u8]#blue&gt;&gt; &lt;&lt;but there’s nothing stopping safe code from doing that#green&gt;&gt; &lt;&lt;If the &amp;[u8] gets truncated, then I’ve seen that result in a SIGBUS and thus process termination, which is good and avoids memory safety issues#red&gt;&gt; &lt;&lt;at least on Linux#blue&gt;&gt; &lt;&lt;If the &amp;[u8] gets mutated out-of-process though, then I don’t know what that means.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/rkyv/0.6.6/rkyv/" id="911">
        <title>rkyv - Rust - MMap and serialize#__#&lt;&lt;allows all serialized types to be defined in code&gt;&gt; &lt;&lt;can serialize a wide variety of types that the others cannot&gt;&gt; &lt;&lt;produces data that is guaranteed deserialization free&gt;&gt; &lt;&lt;mmap your file into memory, cast a pointer&gt;&gt; &lt;&lt;Limited data mutation&gt;&gt; &lt;&lt;with Deserialize if full mutation&gt;&gt; &lt;&lt;primarily for loading bulk&gt;&gt; &lt;&lt;isn’t well equipped for data migration#red&gt;&gt; &lt;&lt;can use serde with the same types as rkyv&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/how-unsafe-is-mmap/19635/7" id="912">
        <title>How unsafe is mmap? - help - The Rust Programming Language Forum#__#&lt;&lt;guess a mutable memory mapping that is mutated by some other process is even worse as the compiler can make even more assumption about &amp;mut [u8] w.r.t. aliasing#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/how-unsafe-is-mmap/19635/32" id="913">
        <title>How unsafe is mmap? - help - The Rust Programming Language Forum#__#&lt;&lt;read-only mmap to a temporary, unlinked file#green&gt;&gt; &lt;&lt;which should avoid any other process interacting with the same file#red&gt;&gt; &lt;&lt;on Linux#red&gt;&gt; &lt;&lt;current belief and testing is that this is sufficient to not require me propagating the unsafe in my interface#blue&gt;&gt; &lt;&lt;However I’m also now exposing a alternate constructor that takes an arbitrary File#red&gt;&gt; &lt;&lt;should mark that alt constructor unsafe#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/how-unsafe-is-mmap/19635/23" id="914">
        <title>How unsafe is mmap? - help - Rust &amp; Unix#__#&lt;&lt;manual page of fcntl#green&gt;&gt; &lt;&lt;Mandatory locking#red&gt;&gt; &lt;&lt;This is an initial step toward removing this feature completely.#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/std/primitive.pointer.html" id="915">
        <title>pointer - Rust#__#&lt;&lt;no known 64-bit platform can ever serve a request for 263 bytes&gt;&gt; &lt;&lt;page-table limitations#red&gt;&gt; &lt;&lt;splitting the address space#red&gt;&gt; &lt;&lt;However, some 32-bit and 16-bit platforms may successfully serve a request for more than isize::MAX#red&gt;&gt; &lt;&lt;with things like Physical Address Extension#red&gt;&gt; &lt;&lt;As such&gt;&gt; &lt;&lt;directly from allocators#red&gt;&gt; &lt;&lt;memory mapped#red&gt;&gt; &lt;&lt;may be too large to handle with this function#red&gt;&gt; &lt;&lt;Consider using wrapping_offset instead if these constraints are difficult to satisfy#green&gt;&gt; &lt;&lt;only advantage of this method is that it enables more aggressive compiler optimizations#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/how-unsafe-is-mmap/19635/16" id="1302">
        <title>How unsafe is mmap? - help - The Rust...#__#&lt;&lt;&amp;[Cell&lt;u8&gt;] (or, equivalently, &amp;Cell&lt;[u8]&gt; ) and &amp;[AtomicU8]#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="337">
      <title>zero copy</title>
      <bookmark href="https://github.com/google/zerocopy" id="916">
        <title>google/zerocopy</title>
      </bookmark>
      <bookmark href="https://github.com/udoprog/musli/tree/main/crates/musli-zerocopy" id="917">
        <title>musli/crates/musli-zerocopy at main · udoprog/musli</title>
      </bookmark>
      <bookmark href="https://github.com/google/flatbuffers/blob/master/rust/flexbuffers/src/buffer.rs" id="918">
        <title>flatbuffers/rust/flexbuffers/src/buffer.rs at master · google/flatbuffers</title>
      </bookmark>
      <bookmark href="https://github.com/google/flatbuffers/blob/master/rust/flexbuffers/src/buffer.rs" id="919">
        <title>flatbuffers/rust/flexbuffers/src/buffer.rs at master · google/flatbuffers</title>
      </bookmark>
    </folder>
    <folder id="338">
      <title>zOther</title>
      <bookmark href="https://docs.rs/smallvec/1.6.1/smallvec/" id="920">
        <title>smallvec - Rust#__#&lt;&lt;optional dependency is enabled, SmallVec implements the serde#green&gt;&gt; &lt;&lt;union feature&gt;&gt; &lt;&lt;track its state#green&gt;&gt; &lt;&lt;without the use of an enum tag#red&gt;&gt; &lt;&lt;reducing the size of the smallvec by one machine word#green&gt;&gt; &lt;&lt;potentially no space overhead compared to Vec#green&gt;&gt; &lt;&lt;smallvec can still be larger than Vec if the inline buffer is larger than two machine words#red&gt;&gt; &lt;&lt;const_generics#green&gt;&gt; &lt;&lt;specialization#green&gt;&gt; &lt;&lt;serde#green&gt;&gt; &lt;&lt;SmallVec::from(slice)&gt;&gt; &lt;&lt;improved performance for slices of Copy#green&gt;&gt; &lt;&lt;Without this feature, you can use SmallVec::from_slice to get optimal performance for Copy#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/fitzgen/bumpalo" id="921">
        <title>fitzgen/bumpalo: A fast bump allocation arena for Rust</title>
      </bookmark>
      <bookmark href="https://docs.rs/tinystr/0.3.2/tinystr/" id="922">
        <title>tinystr - Rust</title>
      </bookmark>
      <bookmark href="https://abramov.io/rust-dropping-things-in-another-thread" id="923">
        <title>Rust: Dropping heavy things in another thread can make your code 10000 times faster#__#&lt;&lt;to show something to the end user as fast as possible#green&gt;&gt; &lt;&lt;significant chunk&gt;&gt; &lt;&lt;not in doing any computations#red&gt;&gt; &lt;&lt;but in dropping large data structures#red&gt;&gt; &lt;&lt;at the end of the function#red&gt;&gt; &lt;&lt;function that takes some heavy object#red&gt;&gt; &lt;&lt;if HeavyThing is a very complex#red&gt;&gt; &lt;&lt;a while to deallocate#red&gt;&gt; &lt;&lt;sucks for UIs and interactive CLIs#red&gt;&gt; &lt;&lt;We got all needed data to respond#green&gt;&gt; &lt;&lt;but can&apos;t do anything with it until we finish cleaning things up#red&gt;&gt; &lt;&lt;workarounds#green&gt;&gt; &lt;&lt;defer dropping#green&gt;&gt; &lt;&lt;by moving it to another thread#green&gt;&gt; &lt;&lt;let size = a.size();#green&gt;&gt; &lt;&lt;std::thread::spawn(move || drop(a));#green&gt;&gt; &lt;&lt;HashMap&lt;usize, Vec&lt;usize&gt;&gt; data structure that has 1M keys#red&gt;&gt; &lt;&lt;10K times faster#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/smallvec" id="924">
        <title>smallvec - crates.io: Rust Package Registry#__#&lt;&lt;let mut v: SmallVec&lt;[i32; 4]&gt; = smallvec![1, 2, 3, 4];#green&gt;&gt; &lt;&lt;// It will automatically move its contents to the heap if#green&gt;&gt; &lt;&lt;v.push(5);#green&gt;&gt; &lt;&lt;// SmallVec points to a slice, so you can use normal slice#green&gt;&gt; &lt;&lt;// indexing and other methods#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/fasteval/0.2.4/fasteval/slab/" id="925">
        <title>fasteval::slab - Rust - by Christopher Sebastian#__#&lt;&lt;one single, large allocation#green&gt;&gt; &lt;&lt;many small allocations#red&gt;&gt; &lt;&lt;re-use a Slab#green&gt;&gt; &lt;&lt;Slab is the main key to fasteval&apos;s excellent performance#green&gt;&gt; &lt;&lt;ExpressionI, ValueI, and InstructionI index types#green&gt;&gt; &lt;&lt;index types are necessary to side-step the Rust borrow checker&gt;&gt; &lt;&lt;borrow-splitting of contiguous allocations (like arrays)#red&gt;&gt; &lt;&lt;mutate a Slab while simultaneously holding references&gt;&gt; &lt;&lt;Slab contains two fields: ps (&quot;Parse Slab&quot;) and cs (&quot;Compile Slab&quot;)&gt;&gt; &lt;&lt;two fields can be borrowed and mutated independently&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="68">
    <title>Optimize</title>
    <bookmark href="http://likebike.com/posts/How_To_Write_Fast_Rust_Code.html" id="339">
      <title>How To Write Fast Rust Code#__#&lt;&lt;using techniques from other languages, it got slower#red&gt;&gt; &lt;&lt;the harder I tried, the slower#red&gt;&gt; &lt;&lt;release BUILD OF YOUR PROGRAM WHEN MEASURING#green&gt;&gt; &lt;&lt;close all the background apps, especially web browsers#red&gt;&gt; &lt;&lt;disable power-saving#red&gt;&gt; &lt;&lt;Layout Randomization&gt;&gt; &lt;&lt;each iteration of my benchmark loop&gt;&gt; &lt;&lt;inject a random number of no-op instructions into my benchmark code (using sed#green&gt;&gt; &lt;&lt;then run the benchmark loop many times#green&gt;&gt; &lt;&lt;until I no longer observe any performance improvements for 500 seconds#green&gt;&gt; &lt;&lt;around 15 minutes#green&gt;&gt; &lt;&lt;use the &apos;minimum&apos; times as my final result#blue&gt;&gt; &lt;&lt;&apos;mean&apos; times help to verify&gt;&gt; &lt;&lt;know whether a change helps performance#green&gt;&gt; &lt;&lt;RUSTFLAGS=&quot;--emit=asm&quot; cargo bench#green&gt;&gt; &lt;&lt;time cargo run --release#green&gt;&gt; &lt;&lt;perf record --call-graph dwarf -- cargo run --release#green&gt;&gt; &lt;&lt;perf report#green&gt;&gt; &lt;&lt;__GI___libc_malloc (inlined)#red&gt;&gt; &lt;&lt;9 seconds&gt;&gt; &lt;&lt;2 seconds&gt;&gt; &lt;&lt;compile it into a more efficient form#green&gt;&gt; &lt;&lt;50 milliseconds&gt;&gt; &lt;&lt;similar effect by passing -C codegen-units=1&gt;&gt; &lt;&lt;Putting all the crates into a single LLVM module with -C lto=fat#green&gt;&gt; &lt;&lt;twice as fast&gt;&gt; &lt;&lt;compiler can usually do a better job than a person&gt;&gt; &lt;&lt;other times it will hurt#red&gt;&gt; &lt;&lt;measure the results#green&gt;&gt; &lt;&lt;&apos;pub&apos; functions to be inlinable across crates#green&gt;&gt; &lt;&lt;#[inline]&gt;&gt; &lt;&lt;Measure any code that can panic#red&gt;&gt; &lt;&lt;test out non-panicky alternatives#green&gt;&gt; &lt;&lt;For most situations, if let + get() tends to outperform other indexing#green&gt;&gt; &lt;&lt;including the unsafe#red&gt;&gt; &lt;&lt;let v = a[i];#red&gt;&gt; &lt;&lt;if let Some(v) = a.get(i) {#green&gt;&gt; &lt;&lt;Memory operations are very slow#red&gt;&gt; &lt;&lt;sharing data#green&gt;&gt; &lt;&lt;rather than copying#red&gt;&gt; &lt;&lt;fasteval uses a specialized parser#green&gt;&gt; &lt;&lt;generate an AST directly from a string#green&gt;&gt; &lt;&lt;allocating and discarding the temporary#red&gt;&gt; &lt;&lt;data structures, try to make them &quot;infallible&quot;#green&gt;&gt; &lt;&lt;design them so that it is impossible to represent an invalid value#green&gt;&gt; &lt;&lt;don&apos;t need to perform validity checks#red&gt;&gt; &lt;&lt;defend against incorrect API usage#red&gt;&gt;&lt;&lt;performance was not intuitive#red&gt;&gt; &lt;&lt;Measurements from a non-release build will be very misleading.#red&gt;&gt; &lt;&lt;measurements will be affected by many#blue&gt;&gt; &lt;&lt;compiler often makes poor decisions#red&gt;&gt; &lt;&lt;Layout Randomization technique similar to Coz#blue&gt;&gt; &lt;&lt;for F in /sys/devices/system/cpu/cpufreq/policy*/scaling_governor; do echo performance &gt;$F; done#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://shnatsel.medium.com/how-to-avoid-bounds-checks-in-rust-without-unsafe-f65e618b4c1e" id="340">
      <title>How to avoid bounds checks in Rust (without unsafe!) | by Sergey &quot;Shnatsel&quot; Davidoff | Medium#__#&lt;&lt;real-world performance impact&gt;&gt; &lt;&lt;surprisingly low#green&gt;&gt; &lt;&lt;greatest impact I’ve ever seen&gt;&gt; &lt;&lt;15%&gt;&gt; &lt;&lt;typical gains are in 1% to 3%&gt;&gt; &lt;&lt;that only&gt;&gt; &lt;&lt;lot of number crunching&gt;&gt; &lt;&lt;occasionally see greater impact#green&gt;&gt; &lt;&lt;as we’ll see soon&gt;&gt; &lt;&lt;removing bounds checks allows&gt;&gt; &lt;&lt;other optimizations#green&gt;&gt; &lt;&lt;cargo install cargo-show-asm hyperfine&gt;&gt; &lt;&lt;https://github.com/Shnatsel/bounds-check-cookbook&gt;&gt; &lt;&lt;more code attributed to this line#red&gt;&gt; &lt;&lt;not all in one place#red&gt;&gt; &lt;&lt;That code path leads to a panic&gt;&gt; &lt;&lt;panics are rare&gt;&gt; &lt;&lt;don’t even load the code that is only executed when leading up to a panic&gt;&gt; &lt;&lt;Instead of indexing up to length#red&gt;&gt; &lt;&lt;just some integer#red&gt;&gt; &lt;&lt;index up to fib.len()#green&gt;&gt; &lt;&lt;Instead of using a Vec#red&gt;&gt; &lt;&lt;make a slice of it once#green&gt;&gt; &lt;&lt;index into the slice#green&gt;&gt; &lt;&lt;clear that the length doesn’t change#green&gt;&gt; &lt;&lt;fastblur&gt;&gt; &lt;&lt;shaved off 6x as much&gt;&gt; &lt;&lt;other means first#green&gt;&gt; &lt;&lt;assembly on ARM is really short:#green&gt;&gt; &lt;&lt;like loop unrolling#red&gt;&gt; &lt;&lt;optimizer hints#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/11qdtln/why_is_safe_version_of_function_faster_than_unsafe/" id="341">
      <title>why is safe version of function faster than unsafe? : r/rust#__#&lt;&lt;mir optimization&gt;&gt; &lt;&lt;unsafe version of the function is in fact unsound#red&gt;&gt; &lt;&lt;ExactSizeIterator docs:&gt;&gt; &lt;&lt;this trait is a safe trait&gt;&gt; &lt;&lt;as such does not#red&gt;&gt; &lt;&lt;cannot guarantee#red&gt;&gt; &lt;&lt;the returned length#blue&gt;&gt; &lt;&lt;TrustedLen which is similar, but is an unsafe#green&gt;&gt; &lt;&lt;safe code adds asserts&gt;&gt; &lt;&lt;using unsafe to avoid unwrapping#red&gt;&gt; &lt;&lt;false economy#red&gt;&gt; &lt;&lt;unwrap_unchecked sorta adds an assert too&gt;&gt; &lt;&lt;unwrap adds a panic#green&gt;&gt; &lt;&lt;safely assumed to end the program#green&gt;&gt; &lt;&lt;while unreachable_unchecked adds UB#red&gt;&gt; &lt;&lt;panic behavior does seem to be the key here#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://msfjarvis.dev/posts/simple-tricks-for-faster-rust-programs/" id="342">
      <title>Simple tricks for faster Rust programs | Harsh Shandilya#__#&lt;&lt;default runs a “thin” LTO#red&gt;&gt; &lt;&lt;each individual codegen#red&gt;&gt; &lt;&lt;[profile.release]&gt;&gt; &lt;&lt;codegen-units = 1#green&gt;&gt; &lt;&lt;lto = &quot;fat&quot;#green&gt;&gt; &lt;&lt;entire crate as a single unit#green&gt;&gt; &lt;&lt;fat mode, LTO will perform optimization across the entire&gt;&gt; &lt;&lt;clone-on-write#green&gt;&gt; &lt;&lt;std::borrow::Cow#green&gt;&gt; &lt;&lt;fn abs_all(input: &amp;mut Cow&lt;[i32]&gt;) {#green&gt;&gt; &lt;&lt;// Clones into a vector if not already owned.#green&gt;&gt; &lt;&lt;input.to_mut()[i] = -v;#green&gt;&gt; &lt;&lt;// No clone occurs because `input` doesn&apos;t need to be mutated.#green&gt;&gt; &lt;&lt;Cow::from(&amp;slice[..]);#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1415">
    <title>Parallel</title>
    <folder id="1502">
      <title>Atomic</title>
      <bookmark href="https://crates.io/crates/crossbeam" id="1612">
        <title>crossbeam - crates.io: Rust Package Registry#__#&lt;&lt;#non-blocking #lock-free #garbage #rcu#green&gt;&gt; &lt;&lt;work-stealing deques for building task schedulers#green&gt;&gt; &lt;&lt;epoch-based garbage collector.#green&gt;&gt; &lt;&lt;sharded reader-writer lock#green&gt;&gt; &lt;&lt;fast concurrent reads#green&gt;&gt; &lt;&lt;synchronizing the beginning or end#green&gt;&gt; &lt;&lt;exponential backoff in spin loops#green&gt;&gt; &lt;&lt;padding and aligning a value to the length of a cache#green&gt;&gt; &lt;&lt;spawning threads that borrow local variables from the stack#green&gt;&gt; USE: docs.rs/cratename/* maps to the current version!&lt;&lt;AtomicCell#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/sync/atomic/index.html" id="1613">
        <title>core::sync::atomic - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/nomicon/atomics.html" id="1614">
        <title>Atomics - The Rustonomicon#__#&lt;&lt;Data accesses are the bread-and-butter&gt;&gt; &lt;&lt;fundamentally unsynchronized#red&gt;&gt; &lt;&lt;literally impossible to write correct synchronized#red&gt;&gt; &lt;&lt;using only data accesses#red&gt;&gt; &lt;&lt;set of orderings&gt;&gt; &lt;&lt;Sequentially Consistent (SeqCst)&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1503">
      <title>Fork</title>
      <bookmark href="https://internals.rust-lang.org/t/why-no-fork-in-std-process/13770/2" id="1615">
        <title>Why no `fork()` in `std::process`? - libs - Rust Internals#__#&lt;&lt;OS specific#red&gt;&gt; &lt;&lt;potentially very unsafe#red&gt;&gt; &lt;&lt;particularly in multi-threaded#red&gt;&gt; &lt;&lt;fork(2)#green&gt;&gt; &lt;&lt;signal-safety(7)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://internals.rust-lang.org/t/why-no-fork-in-std-process/13770/4" id="1616">
        <title>Why no `fork()` in `std::process`? - libs - Rust Internals#__#&lt;&lt;discussion around before_exec#green&gt;&gt; &lt;&lt;was a safe way to execute code in the forked process&gt;&gt; &lt;&lt;deprecated#red&gt;&gt; &lt;&lt;in favor of an unsafe function#green&gt;&gt; &lt;&lt;after a fork from a multi-threaded process#red&gt;&gt; &lt;&lt;POSIX allows only allows async-signal-safe functions#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.microsoft.com/en-us/research/uploads/prod/2019/04/fork-hotos19.pdf" id="1617">
        <title>A fork() in the road - fork-hotos19.pdf</title>
      </bookmark>
      <bookmark href="https://www.yanismansour.com/articles/20210723-Threads-VS-Forks-C++" id="1618">
        <title>Threads vs forks in C++ - Speed test (Linux) - By Yanis MANSOUR</title>
      </bookmark>
      <bookmark href="https://docs.oracle.com/cd/E19455-01/806-5257/gen-2/index.html" id="1619">
        <title>The Fork-One Model (Multithreaded Programming Guide)#__#&lt;&lt;pthreads fork(2)&gt;&gt; &lt;&lt;behavior&gt;&gt; &lt;&lt;same as&gt;&gt; &lt;&lt;Solaris fork1(2)&gt;&gt; &lt;&lt;duplicating the complete address space&gt;&gt; &lt;&lt;but duplicating only the calling thread#red&gt;&gt; &lt;&lt;useful when&gt;&gt; &lt;&lt;child process immediately calls exec()#green&gt;&gt; &lt;&lt;most calls to fork()#green&gt;&gt; &lt;&lt;In the child, do not call any library#red&gt;&gt; &lt;&lt;after calling fork()#red&gt;&gt; &lt;&lt;before calling exec()&gt;&gt; &lt;&lt;because one of the library functions might use a lock#red&gt;&gt; &lt;&lt;held in the parent#red&gt;&gt; &lt;&lt;child process might execute only Async-Signal-Safe#red&gt;&gt; &lt;&lt;until one of the exec() handlers#green&gt;&gt; &lt;&lt;deadlock#red&gt;&gt; &lt;&lt;printf#red&gt;&gt; &lt;&lt;Solaris fork() duplicates all threads#green&gt;&gt; &lt;&lt;most obvious way to do this is to have the forking thread acquire all the locks#green&gt;&gt; &lt;&lt;that could possibly be used by the child&gt;&gt; &lt;&lt;cannot do this for locks like those in printf()#red&gt;&gt; &lt;&lt;printf() is owned by libc#blue&gt;&gt; &lt;&lt;vfork(2) function is unsafe in multithreaded#red&gt;&gt; &lt;&lt;like fork1(2) in that only the calling thread is copied&gt;&gt; &lt;&lt;vfork() does not copy the address space for the child#red&gt;&gt; &lt;&lt;vfork() gives the parent address space to the child#red&gt;&gt; &lt;&lt;pthread_atfork()#green&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1504">
      <title>Threads</title>
      <folder id="1620">
        <title>Atomics and Locs - Mara Bos</title>
        <bookmark href="https://marabos.nl/atomics/basics.html" id="1747">
          <title>Rust Atomics and Locks — Chapter 1. Basics of Rust Concurrency#__#&lt;&lt;interior mutability&gt;&gt; &lt;&lt;mutex&gt;&gt; &lt;&lt;condition variable&gt;&gt; &lt;&lt;thread parking&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1621">
        <title>CrossBeam</title>
        <bookmark href="https://docs.rs/crossbeam/0.8.1/crossbeam/thread/struct.Scope.html" id="1748">
          <title>Scope in crossbeam::thread - Rust</title>
        </bookmark>
      </folder>
      <folder id="1622">
        <title>Futex</title>
        <bookmark href="https://shift.click/blog/futex-like-apis/" id="1749">
          <title>Futex-likes - shift.click#__#&lt;&lt;like you would on linux#green&gt;&gt; &lt;&lt;Various BSDs@1#green&gt;&gt; &lt;&lt;Fuchsia OS#green&gt;&gt; &lt;&lt;its documentation, which is quite good#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://marabos.nl/atomics/os-primitives.html" id="1750">
          <title>Rust Atomics and Locks — Chapter 8. Operating System Primitives#__#&lt;&lt;can spuriously wake up, even when nothing happened#red&gt;&gt; &lt;&lt;new syscall allows waiting for more than one futex at once&gt;&gt; &lt;&lt;initial implementation only supports 32-bit atomics#red&gt;&gt; &lt;&lt;high priority thread effectively has its priority &quot;inverted,&quot;#red&gt;&gt; &lt;&lt;has to wait for the low priority thread to release the lock#red&gt;&gt; &lt;&lt;solution to this problem is priority inheritance#green&gt;&gt; &lt;&lt;temporarily increasing the priority of the low priority thread#green&gt;&gt; &lt;&lt;general futex operations we discussed before do not have any requirements for the exact contents of the atomic variable&gt;&gt; &lt;&lt;priority inheritance futex operations specify the exact contents of the 32-bit atomic variable#green&gt;&gt; &lt;&lt;kernel can understand#green&gt;&gt; &lt;&lt;robust#green&gt;&gt; &lt;&lt;gracefully handle a situation where its &quot;owning&quot; thread unexpectedly terminates#red&gt;&gt; &lt;&lt;wait operation verifies the expected value of the atomic, which is used to avoid missing notifications#green&gt;&gt; &lt;&lt;Pthread types are designed for C, not for Rust#red&gt;&gt; &lt;&lt;Linux specifically, the syscall interface is guaranteed to be stable#green&gt;&gt; &lt;&lt;syscalls directly, without using libc#green&gt;&gt; &lt;&lt;becoming more popular&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1623">
        <title>Rayon</title>
        <bookmark href="https://github.com/vancouver-rs/talks/blob/master/progress-bars/linya-progress-bars.org" id="1751">
          <title>talks/linya-progress-bars.org at master · vancouver-rs/talks</title>
        </bookmark>
        <bookmark href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrydccbpb" id="1752">
          <title>Monthly meetup, Tue, Jan 11, 2022, 6:30 PM | Meetup#__#&lt;&lt;Rayon/ndarray::parallel while returning all errors#green&gt;&gt; &lt;&lt;letting users control the number of parallel threads#green&gt;&gt; &lt;&lt;nice errors with thiserror#green&gt;&gt; &lt;&lt;Carl is a retired Applied Researcher (Microsoft)#green&gt;&gt; &lt;&lt;github.com/CarlKCarlK#green&gt;&gt; &lt;&lt;www.youtube.com/watch?v=oIxYsR47q3Q#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://docs.rs/rayon/latest/rayon/struct.Scope.html" id="1753">
          <title>Scope in rayon - Rust</title>
        </bookmark>
        <bookmark href="https://github.com/rayon-rs/rayon" id="1754">
          <title>rayon-rs/rayon: Rayon: A data parallelism library for Rust</title>
        </bookmark>
      </folder>
      <folder id="1624">
        <title>std:: (excl. std::sync), Mutex, RwLock</title>
        <bookmark href="https://doc.rust-lang.org/nightly/std/rc/struct.Rc.html" id="1755">
          <title>Rc in std::rc - Rust#__#&lt;&lt;allow you to construct a T which holds a weak pointer to itself#green&gt;&gt; &lt;&lt;calls your closure, giving it a Weak&lt;T&gt;&gt;&gt; &lt;&lt;calling upgrade on the weak reference inside your closure will fail#red&gt;&gt; &lt;&lt;get_mut(this: &amp;mut Rc&lt;T&gt;) -&gt; Option&lt;&amp;mut T&gt;&gt;&gt; &lt;&lt;not safe to mutate a shared value#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/std/rc/index.html" id="1756">
          <title>std::rc - Rust#__#&lt;&lt;Weak is used to break cycles#green&gt;&gt; &lt;&lt;Weak pointers from children back to their parents#green&gt;&gt; &lt;&lt;Rc::clone(&amp;from) syntax is the most idiomatic#green&gt;&gt; &lt;&lt;conveys more explicitly#green&gt;&gt; &lt;&lt;Weak&lt;T&gt; does not auto-dereference to T#red&gt;&gt; &lt;&lt;may have already been dropped#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/std/sync/struct.Arc.html" id="1757">
          <title>Arc in std::sync - Rust#__#&lt;&lt;new_cyclic#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html" id="1758">
          <title>Sync in core::marker - Rust#__#&lt;&lt;surprising consequence of the definition is that &amp;mut T is Sync#blue&gt;&gt; &lt;&lt;if T is Sync&gt;&gt; &lt;&lt;trick is that a mutable reference behind a shared reference (that is, &amp; &amp;mut T) becomes read-only&gt;&gt; &lt;&lt;not Sync are those that have “interior mutability” in a non-thread-safe form, such as Cell and RefCell.#red&gt;&gt; &lt;&lt;Another example of a non-Sync type is the reference-counting pointer Rc.#red&gt;&gt; &lt;&lt;See the Nomicon#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://rust-unofficial.github.io/too-many-lists/third-final.html" id="1759">
          <title>Final Code - Learning Rust With Entirely Too Many Linked Lists#__#&lt;&lt;immutable&gt;&gt; &lt;&lt;impl&lt;T&gt; Drop&gt;&gt; &lt;&lt;.take()&gt;&gt; &lt;&lt;if let Ok(mut node) = Rc::try_unwrap(node)&gt;&gt; &lt;&lt;node.next.take()&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=634740" id="1760">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://botahamec.dev/blog/how-happylock-works.html" id="1761">
          <title>How HappyLock Works#__#&lt;&lt;Adrian Taylor&gt;&gt; &lt;&lt;make duplicate checks free is to run them at compile-time&gt;&gt; &lt;&lt;pacak keeps reminding&gt;&gt; &lt;&lt;const functions with a Bloom filter&gt;&gt; &lt;&lt;currently, the Lockable interface requires a Vec of pointers#red&gt;&gt; &lt;&lt;livelocking can still be an issue#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://www.reddit.com/r/rust/comments/vcaabk/rwlock_vs_mutex_please_tell_me_like_im_5/" id="1762">
          <title>Reddit - Dive into anything</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/50704279/when-or-why-should-i-use-a-mutex-over-an-rwlock" id="1763">
          <title>multithreading - When or why should I use a Mutex over an RwLock? - Stack Overflow</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=994993" id="1764">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://docs.rs/parking_lot/latest/parking_lot/type.RwLock.html" id="1847">
          <title>RwLock in parking_lot - Rust</title>
        </bookmark>
        <bookmark href="https://docs.rs/parking_lot/latest/parking_lot/index.html" id="1848">
          <title>parking_lot - Rust</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=776870" id="1849">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/50425910/how-to-create-a-cyclic-reference-with-arc-and-weak" id="1850">
          <title>rust - How to create a cyclic reference with Arc and Weak? - Stack Overflow#__#&lt;&lt;to get rid of all runtime overhead of the Mutex#green&gt;&gt; &lt;&lt;using unsafe@1#red&gt;&gt; &lt;&lt;UnsafeCell. It has zero overhead#green&gt;&gt; &lt;&lt;UnsafeCell is not Sync#red&gt;&gt; &lt;&lt;mem::transmute&gt;&gt; &lt;&lt;Arc::downgrade&gt;&gt; &lt;&lt;Arc::new_cyclic@1#green&gt;&gt; &lt;&lt;weak_a.clone()#green&gt;&gt; &lt;&lt;extra block#green&gt;&gt; &lt;&lt;so that the Mutex&apos;s write lock is dropped#green&gt;&gt; &lt;&lt;before we return a#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=825384" id="1851">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/std/sync/struct.MutexGuard.html" id="1852">
          <title>MutexGuard in std::sync - Rust</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=451735" id="1853">
          <title>-----</title>
        </bookmark>
      </folder>
      <folder id="1625">
        <title>std::sync</title>
        <bookmark href="https://www.lurklurk.org/effective-rust/deadlock.html" id="1765">
          <title>Item 17: Be wary of shared-state parallelism - Effective Rust#__#&lt;&lt;std::sync::mpsc&gt;&gt; &lt;&lt;channel()&gt;&gt; &lt;&lt;deadlock detection tools in your CI&gt;&gt; &lt;&lt;as no_deadlocks, ThreadSanitizer, or parking_lot::deadlock#green&gt;&gt; &lt;&lt;last resort: design, document, test and police a locking hierarchy#red&gt;&gt; &lt;&lt;data structures that must be kept consistent with each other#green&gt;&gt; &lt;&lt;single lock#green&gt;&gt; &lt;&lt;lock scopes small#green&gt;&gt; &lt;&lt;obvious;#green&gt;&gt; &lt;&lt;Avoid invoking closures with locks held#red&gt;&gt; &lt;&lt;at the mercy of whatever closure#red&gt;&gt; &lt;&lt;avoid returning a MutexGuard#red&gt;&gt; &lt;&lt;shared-state parallelism@1#red&gt;&gt; &lt;&lt;Do not communicate by sharing memory#red&gt;&gt; &lt;&lt;share memory by communicating#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://nickymeuleman.netlify.app/blog/multithreading-rust" id="1766">
          <title>Multithreading in Rust | Nicky blogs#__#&lt;&lt;mutex will be sent into a thread, it is often wrapped in an Arc&gt;&gt; &lt;&lt;returned values from std::sync::mpsc::channel are called tx and rx&gt;&gt; &lt;&lt;channel closes&gt;&gt; &lt;&lt;either all the senders&gt;&gt; &lt;&lt;the single receiver&gt;&gt; &lt;&lt;dropped.&gt;&gt; &lt;&lt;iterate over the receiver&gt;&gt; &lt;&lt;problem if we want to send cloned Sender#red&gt;&gt; &lt;&lt;original Sender is never dropped#red&gt;&gt; &lt;&lt;channel will remain open#red&gt;&gt; &lt;&lt;let sender = sender.clone();@1#red&gt;&gt; &lt;&lt;drop the original sender#green&gt;&gt; &lt;&lt;can also wrap the entire top section in a scope by using curly&gt;&gt; &lt;&lt;everything leaves scope by the time the iterator&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch16-03-shared-state.html" id="1767">
          <title>Shared-State Concurrency - The Rust Programming Language</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=884598" id="1768">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch16-02-message-passing.html" id="1769">
          <title>Using Message Passing to Transfer Data Between Threads - The Rust Programming Language</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/std/sync/mpsc/index.html" id="1770">
          <title>std::sync::mpsc - Rust#__#&lt;&lt;Sender or SyncSender is used to send data to a Receiver. Both senders are clone-able (multi-producer)&gt;&gt; &lt;&lt;many threads can send simultaneously to one receiver&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html" id="1771">
          <title>channel in std::sync::mpsc - Rust#__#&lt;&lt;same order as it was sent#green&gt;&gt; &lt;&lt;no send will block the calling thread#green&gt;&gt; &lt;&lt;this channel has an “infinite buffer”#green&gt;&gt; &lt;&lt;unlike sync_channel, which will block after its buffer limit is reached#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=854552" id="1772">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://oylenshpeegul.github.io/slides/rust-atomics-and-locks-10/" id="1773">
          <title>Rust Atomics and Locks 10#__#&lt;&lt;Tim Heaney&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1626">
        <title>Thread-Local</title>
        <bookmark href="https://doc.rust-lang.org/std/macro.thread_local.html" id="1774">
          <title>thread_local in std - Rust#__#&lt;&lt;special const {} syntax#green&gt;&gt; &lt;&lt;more efficient#green&gt;&gt; &lt;&lt;For types that do not need to be dropped, this can enable an even more efficient#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/rust-lang/rust/issues/29594" id="1775">
          <title>Tracking issue for `thread_local` stabilization · Issue #29594 · rust-lang/rust#__#&lt;&lt;-Ztls-model#green&gt;&gt; &lt;&lt;bare-metal Arm targets seem to support #[thread_local]#green&gt;&gt; &lt;&lt;target_thread_local#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/tls-model.html" id="1776">
          <title>tls_model - The Rust Unstable Book</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=218339" id="1777">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/std/thread/struct.LocalKey.html" id="1778">
          <title>LocalKey in std::thread - Rust#__#&lt;&lt;owns its contents#green&gt;&gt; &lt;&lt;fastest possible implementation available to it for the target platform#green&gt;&gt; &lt;&lt;instantiated with the thread_local! macro#green&gt;&gt; &lt;&lt;primary method is the with#green&gt;&gt; &lt;&lt;helpers to make working with Cell types#green&gt;&gt; &lt;&lt;Drop get destructed when a thread exits#green&gt;&gt; &lt;&lt;Some caveats#red&gt;&gt; &lt;&lt;only shared (&amp;T) references#red&gt;&gt; &lt;&lt;not all platforms can guarantee that destructors#red&gt;&gt; &lt;&lt;Unix#red&gt;&gt; &lt;&lt;pthread-based TLS#red&gt;&gt; &lt;&lt;destructors will not#red&gt;&gt; &lt;&lt;TLS values#red&gt;&gt; &lt;&lt;main thread when it exits#red&gt;&gt; &lt;&lt;possible for TLS to re-initialize other TLS slots during destruction#red&gt;&gt; &lt;&lt;Some platforms ensure that this cannot happen infinitely&gt;&gt; &lt;&lt;but not all platforms have this guard#red&gt;&gt; &lt;&lt;platforms that do not guard typically have a synthetic limit&gt;&gt; &lt;&lt;Windows#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=805627" id="1779">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://docs.rs/thread_local/latest/thread_local/" id="1780">
          <title>thread_local - Rust#__#&lt;&lt;thread IDs are recycled#red&gt;&gt; &lt;&lt;possible for one thread to retrieve the object of another thread#red&gt;&gt; &lt;&lt;can only occur after a thread has exited#green&gt;&gt; &lt;&lt;not lead to any race conditions#blue&gt;&gt; &lt;&lt;a separate copy of an object&gt;&gt; &lt;&lt;for each thread&gt;&gt; &lt;&lt;per-object thread-local storage#blue&gt;&gt; &lt;&lt;unlike the standard library’s thread_local! macro#red&gt;&gt; &lt;&lt;which only allows static thread-local#blue&gt;&gt; &lt;&lt;Per-thread objects are not destroyed when a thread exits.#red&gt;&gt; &lt;&lt;Instead, objects are only destroyed when the ThreadLocal containing them is destroyed#blue&gt;&gt; &lt;&lt;can also iterate over the thread-local values of all thread in a ThreadLocal object using the iter_mut and into_iter#green&gt;&gt; &lt;&lt;only be done if you have mutable#green&gt;&gt; &lt;&lt;uarantees that you are the only thread currently accessing#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://separator.floccus.org/?id=412571" id="1781">
          <title>-----</title>
        </bookmark>
        <bookmark href="https://matklad.github.io/2020/10/03/fast-thread-locals-in-rust.html" id="1782">
          <title>Fast Thread Locals In Rust#__#&lt;&lt;slower than they could be#red&gt;&gt; &lt;&lt;violate zero-cost abstraction#red&gt;&gt; &lt;&lt;initialized on the first access#red&gt;&gt; &lt;&lt;laziness#red&gt;&gt; &lt;&lt;allocator fast path#green&gt;&gt; &lt;&lt;thread-local heap#green&gt;&gt; &lt;&lt;unstable #[thread_local]#green&gt;&gt; &lt;&lt;or a zero-cost#green&gt;&gt; Alternative: core::hint::black_box(...)&lt;&lt;prevent LLVM from evaluating the sum at compile time#green&gt;&gt; &lt;&lt;no standard way to get monotonic wall-clock time in C#red&gt;&gt; &lt;&lt;C version is not cross-platform#red&gt;&gt; &lt;&lt;crossing the language boundary#red&gt;&gt; &lt;&lt;compiler can’t inline#red&gt;&gt; &lt;&lt;cross-language Link Time Optimization#green&gt;&gt; &lt;&lt;-flto=thin#green&gt;&gt; &lt;&lt;RUSTFLAGS&gt;&gt; &lt;&lt;&quot;-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld&quot;#green&gt;&gt; &lt;&lt;same version of LLVM#red&gt;&gt; &lt;&lt;excludes gcc#red&gt;&gt; &lt;&lt;either the compiler/linker was able to lift thread-local access out of the loop#green&gt;&gt; &lt;&lt;or its cost is masked by arithmetics#red&gt;&gt; &lt;&lt;Even on a single OS#red&gt;&gt; &lt;&lt;differences depending on compilation#red&gt;&gt; &lt;&lt;dynamic libraries differ from static#red&gt;&gt; &lt;&lt;Compiler Explorer#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter8-20.html" id="1783">
          <title>Thread-Local Storage Access Models - Linker and Libraries Guide</title>
        </bookmark>
      </folder>
      <folder id="1627">
        <title>Thread-per-Core</title>
        <bookmark href="https://glaubercosta-11125.medium.com/c-vs-rust-an-async-thread-per-core-story-28c4b43c410c" id="1784">
          <title>C++ vs Rust: an async Thread-per-Core story | by Glauber Costa | Medium#__#&lt;&lt;Rust is opinionated about style&gt;&gt; &lt;&lt;read-ahead#red&gt;&gt; &lt;&lt;RAII is of limited use for things that need to be destroyed asynchronously#red&gt;&gt; &lt;&lt;memory that was set to 0 in a place would magically flip to 1 the line below#red&gt;&gt; &lt;&lt;Avi (creator of both ScyllaDB and the KVM hypervisor&gt;&gt; &lt;&lt;reference counted objects are immutable&gt;&gt; &lt;&lt;to change its contents#green&gt;&gt; &lt;&lt;use a RefCell#green&gt;&gt; &lt;&lt;interior mutability#green&gt;&gt; &lt;&lt;asynchronous + Thread-per-Core model really shines#green&gt;&gt; &lt;&lt;thread local#green&gt;&gt; &lt;&lt;and there is only one thread#green&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1628">
        <title>zOther</title>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch16-01-threads.html" id="1785">
          <title>Using Threads to Run Code Simultaneously - The Rust Programming Language#__#&lt;&lt;green-threaded model is called the M:N model#blue&gt;&gt; &lt;&lt;Smaller runtimes#green&gt;&gt; &lt;&lt;easier to combine the language with other languages#green&gt;&gt; &lt;&lt;standard library only provides an implementation of 1:1 threading&gt;&gt; &lt;&lt;crates that implement M:N&gt;&gt; &lt;&lt;lower costs of context switching#green&gt;&gt; &lt;&lt;new thread will be stopped when the main thread ends#red&gt;&gt; &lt;&lt;can’t guarantee that the spawned thread will get to run at all#red&gt;&gt; &lt;&lt;JoinHandle#green&gt;&gt; &lt;&lt;handle.join().unwrap();#green&gt;&gt; &lt;&lt;closure may outlive the current function, but it borrows#red&gt;&gt; &lt;&lt;drop(v);#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch16-02-message-passing.html" id="1786">
          <title>Using Message Passing to Transfer Data Between Threads - The Rust Programming Language#__#&lt;&lt;Go language&gt;&gt; &lt;&lt;Do not communicate by sharing memory#red&gt;&gt; &lt;&lt;instead, share memory by communicating#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://crates.io/crates/lazy_static" id="1787">
          <title>lazy_static - crates.io: Rust Package Registry#__#Crates.io TEAMS: https://crates.io/teams/github:rust-lang-nursery:libs&lt;&lt;Owners#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://docs.rs/syn/1.0.65/syn/" id="1788">
          <title>syn - Rust#__#&lt;&lt;Functionality is aggressively feature gated#green&gt;&gt; &lt;&lt;so your procedural macros enable only what they need#green&gt;&gt; &lt;&lt;do not pay in compile time for all the rest#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://gitlab.com/rust-saar/material/-/tree/main/2021_03_09" id="1789">
          <title>2021_03_09 · main · Rust-Saar / Material · GitLab</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch03-01-variables-and-mutability.html" id="1790">
          <title>Variables and Mutability - The Rust Programming Language#__#&lt;&lt;easier to reason through#green&gt;&gt; &lt;&lt;don’t have to keep track#red&gt;&gt; &lt;&lt;how and where a value might change#red&gt;&gt; &lt;&lt;constants using the const#green&gt;&gt; &lt;&lt;type of the value must be annotated#green&gt;&gt; &lt;&lt;Constants can be declared in any scope#green&gt;&gt; &lt;&lt;including the global scope#green&gt;&gt; &lt;&lt;constants may be set only to a constant expression#green&gt;&gt; &lt;&lt;not the result of a function call#red&gt;&gt; &lt;&lt;const MAX_POINTS: u32 = 100_000;#green&gt;&gt; &lt;&lt;Shadowing#green&gt;&gt; &lt;&lt;let x = 5;@2#green&gt;&gt; &lt;&lt;let x = x + 1;#green&gt;&gt; &lt;&lt;can change the type of the value but reuse the same name#green&gt;&gt; &lt;&lt;spares us from having to come up with different names#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/reference/macros.html" id="1791">
          <title>Macros - The Rust Reference#__#&lt;&lt;Visibility qualifiers are never allowed before a macro invocation#red&gt;&gt; &lt;&lt;or macro_rules definition#red&gt;&gt; &lt;&lt;Macros may be invoked#green&gt;&gt; &lt;&lt;including associated items#green&gt;&gt; &lt;&lt;// Used in a pattern#green&gt;&gt; &lt;&lt;macro_rules! pat {&gt;&gt; &lt;&lt;($i:ident) =&gt; (Some($i))&gt;&gt; &lt;&lt;if let pat!(x) = Some(1) {#green&gt;&gt; &lt;&lt;// Used in a type#green&gt;&gt; &lt;&lt;type N2 = Tuple!(i32, i32);#green&gt;&gt; &lt;&lt;// Used as an item#green&gt;&gt; &lt;&lt;thread_local!(&gt;&gt; &lt;&lt;static FOO: RefCell&lt;u32&gt; = RefCell::new(1)#green&gt;&gt; &lt;&lt;// Used as an associated item#green&gt;&gt; &lt;&lt;macro_rules! const_maker {&gt;&gt; &lt;&lt;($t:ty, $v:tt) =&gt; { const CONST: $t = $v; };#green&gt;&gt; &lt;&lt;trait T {&gt;&gt; &lt;&lt;const_maker!{i32, 7}#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://riptutorial.com/rust/example/11086/lazy-static-" id="1792">
          <title>Rust Tutorial =&gt; lazy_static!#__#&lt;&lt;dereference COUNT because it&apos;s type is &amp;usize#red&gt;&gt; &lt;&lt;don&apos;t dereference with * because of Deref coercions#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://www.reddit.com/r/rust/comments/uhhs3a/as_part_of_the_stdlib_mutex_overhaul_stdsyncmutex/" id="1793">
          <title>As part of the stdlib mutex overhaul, std::sync::Mutex on Linux now has competitive performance with parking_lot : rust</title>
        </bookmark>
        <bookmark href="https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html" id="1794">
          <title>Announcing Rust 1.71.0 | Rust Blog#__#&lt;&lt;const initialized thread local#green&gt;&gt; &lt;&lt;not make const { ... } a valid expression or syntax in other contexts#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://hacks.mozilla.org/2019/02/fearless-security-thread-safety/" id="1854">
          <title>Fearless Security: Thread Safety - Mozilla Hacks - the Web developer blog#__#&lt;&lt;ownership rules and type safety to guarantee data race freedom at compile time.&gt;&gt; &lt;&lt;Each variable has a unique owner and can either be moved or borrowed.&gt;&gt; &lt;&lt;either one mutable borrow or as many immutable borrows as you want.#green&gt;&gt; &lt;&lt;never simultaneously have a mutable borrow and an immutable borrow#red&gt;&gt; &lt;&lt;we know that no other threads will try to reference an out of date borrow—borrowing enforces either sharing or writing, but never both.&gt;&gt; &lt;&lt;identifying valid resource use and enforcing that validity during compilation&gt;&gt; &lt;&lt;this doesn’t necessarily provide thread-safe data structures&gt;&gt; &lt;&lt;data structure in Rust is either thread-safe or it’s not. This is communicated to the compiler using the type&gt;&gt; &lt;&lt;Two important built-in traits are Send and Sync, which are exposed by default by the Rust compiler for every type&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch16-00-concurrency.html" id="1855">
          <title>Fearless Concurrency &amp; threads#__#&lt;&lt;For simplicity’s sake, we’ll refer to many of the problems as concurrent&gt;&gt; &lt;&lt;concurrent and/or parallel#blue&gt;&gt; &lt;&lt;Many languages are dogmatic#red&gt;&gt; &lt;&lt;Erlang has elegant functionality for message-passing#green&gt;&gt; &lt;&lt;but has only obscure ways to share state between threads#red&gt;&gt; &lt;&lt;Supporting only a subset of possible solutions is a reasonable strategy for higher-level languages#blue&gt;&gt; &lt;&lt;higher-level language promises benefits from giving up some control to gain abstractions#blue&gt;&gt; &lt;&lt;lower-level languages#green&gt;&gt; &lt;&lt;fewer abstractions over the hardware#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://lucumr.pocoo.org/2022/11/23/stack-tokens/" id="1856">
          <title>A Better Way to Borrow in Rust: Stack Tokens | Armin Ronacher&apos;s Thoughts and Writings#__#&lt;&lt;send a non Send&gt;&gt; &lt;&lt;safely to other threads&gt;&gt; used by Mockall!&lt;&lt;Fragile puts#green&gt;&gt; &lt;&lt;crate called fragile&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://docs.rs/loom/latest/loom/" id="1857">
          <title>loom - Rust#__#PARALLEL&lt;&lt;testing&gt;&gt; &lt;&lt;may not surface&gt;&gt; &lt;&lt;even if you run the code millions or billions of times#red&gt;&gt; &lt;&lt;correct under all executions#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/tokio-rs/loom" id="1858">
          <title>tokio-rs/loom: Concurrency permutation testing tool for Rust.#__#&lt;&lt;[target.&apos;cfg(loom)&apos;.dependencies]&gt;&gt; &lt;&lt;a test@2&gt;&gt; &lt;&lt;use loom::#red&gt;&gt; &lt;&lt;#[should_panic]&gt;&gt; &lt;&lt;RUSTFLAGS=&quot;--cfg loom&quot;&gt;&gt; &lt;&lt;--release&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://morestina.net/blog/1976/a-close-encounter-with-false-sharing" id="1859">
          <title>A close encounter with false sharing | More Stina Blog!#__#&lt;&lt;Atomic operations&gt;&gt; &lt;&lt;memory not shared with other threads&gt;&gt; &lt;&lt;normally uncontended&gt;&gt; &lt;&lt;therefore almost as fast as non-atomic&gt;&gt; &lt;&lt;false sharing can&gt;&gt; &lt;&lt;orders of magnitude more slowly#red&gt;&gt; &lt;&lt;space the data farther apart#green&gt;&gt; &lt;&lt;distinct cache lines#green&gt;&gt; &lt;&lt;Nov&gt;&gt; &lt;&lt;2023&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://docs.rs/crossbeam/latest/crossbeam/utils/struct.CachePadded.html" id="1860">
          <title>CachePadded in crossbeam::utils - Rust#__#&lt;&lt;x86-64&gt;&gt; &lt;&lt;aarch64&gt;&gt; &lt;&lt;N = 128&gt;&gt; &lt;&lt;modern Intel&gt;&gt; &lt;&lt;spatial prefetcher&gt;&gt; &lt;&lt;pairs of 64-byte cache lines&gt;&gt; &lt;&lt;pessimistically&gt;&gt; &lt;&lt;128 bytes&gt;&gt;</title>
        </bookmark>
      </folder>
    </folder>
    <folder id="1505">
      <title>zOther</title>
      <bookmark href="https://doc.rust-lang.org/edition-guide/rust-2018/simd-for-faster-computing.html" id="1629">
        <title>SIMD for faster computing - The Edition Guide</title>
      </bookmark>
      <bookmark href="https://github.com/mmstick/parallel" id="1630">
        <title>mmstick/parallel: This project now lives on in a rewrite at https://gitlab.redox-os.org/redox-os/parallel - memory</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="1416">
    <title>zOther</title>
    <bookmark href="https://nnethercote.github.io/perf-book/introduction.html" id="1506">
      <title>Introduction - The Rust Performance Book</title>
    </bookmark>
    <bookmark href="https://stackoverflow.com/questions/45037547/why-is-logarithm-slower-in-rust-than-in-java" id="1507">
      <title>floating point - Why is logarithm slower in Rust than in Java? - Stack Overflow</title>
    </bookmark>
  </folder>
</folder>
<folder id="9">
  <title>std &amp; other libraries</title>
  <folder id="69">
    <title>files - symlinks</title>
    <bookmark href="https://separator.floccus.org/?id=582753" id="343">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/fs/fn.soft_link.html" id="344">
      <title>soft_link in std::fs - Rust#__#&lt;&lt;Deprecated since 1.1.0#red&gt;&gt; &lt;&lt;replaced with&gt;&gt; &lt;&lt;std::os::unix::fs::symlink#green&gt;&gt; &lt;&lt;std::os::windows::fs::{symlink_file, symlink_dir}#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/os/unix/fs/fn.symlink.html" id="345">
      <title>symlink in std::os::unix::fs - Rust#__#&lt;&lt;Creates a new#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=202698" id="346">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/fs/fn.canonicalize.html" id="347">
      <title>canonicalize in std::fs - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/fs/fn.read_link.html" id="348">
      <title>read_link in std::fs - Rust</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=91966" id="349">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://docs.rs/symlink/latest/symlink/" id="350">
      <title>symlink - Rust#__#&lt;&lt;cross-platform#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/symlink" id="351">
      <title>crates.io: Rust Package Registry#__#&lt;&lt;about@3#red&gt;&gt; &lt;&lt;7 years ago#red&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="70">
    <title>files, std::fs &amp; std::os &amp; std::io</title>
    <bookmark href="https://doc.rust-lang.org/nightly/std/fs/fn.rename.html" id="352">
      <title>rename in std::fs - Rust#__#&lt;&lt;replacing the original file if to already exists&gt;&gt; &lt;&lt;not work if the new name is on a different mount#red&gt;&gt; &lt;&lt;Platform-specific#red&gt;&gt; &lt;&lt;On Unix&gt;&gt; &lt;&lt;if from is a directory, to must also be an (empty) directory#green&gt;&gt; &lt;&lt;If from is not a directory, to must also be not a directory#red&gt;&gt; &lt;&lt;this may change#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/io/index.html" id="353">
      <title>std::io - Rust#__#&lt;&lt;Platform-specific#red&gt;&gt; &lt;&lt;file descriptors can be exclusively owned&gt;&gt; &lt;&lt;OwnedFd&gt;&gt; &lt;&lt;Seek&gt;&gt; &lt;&lt;BufRead&gt;&gt; &lt;&lt;std::io::SeekFrom&gt;&gt; &lt;&lt;std::io::prelude::*@1&gt;&gt; &lt;&lt;BufReader works with the BufRead&gt;&gt; &lt;&lt;An iterator over u8&gt;&gt; &lt;&lt;buffer type used with Write::write_vectored&gt;&gt; &lt;&lt;buffer type used with Read::read_vectored&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/os/fd/struct.OwnedFd.html" id="354">
      <title>OwnedFd in std::os::fd - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/os/linux/fs/trait.MetadataExt.html" id="355">
      <title>MetadataExt in std::os::linux::fs - Rust#__#&lt;&lt;fn st_size&gt;&gt; &lt;&lt;fn st_atime&gt;&gt; &lt;&lt;fn st_atime_nsec&gt;&gt; &lt;&lt;in nanoseconds since st_atime#red&gt;&gt; &lt;&lt;fn st_blksize&gt;&gt; &lt;&lt;“preferred” block size#green&gt;&gt; &lt;&lt;fn st_blocks&gt;&gt; &lt;&lt;512-byte units#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/fs/struct.Metadata.html" id="356">
      <title>Metadata in std::fs - Rust#__#&lt;&lt;pub fn len&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/fs/struct.File.html" id="357">
      <title>File in std::fs - Rust#__#&lt;&lt;Files also implement Seek#green&gt;&gt; &lt;&lt;impl Read for &amp;File#green&gt;&gt; &lt;&lt;impl Read for File&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/os/linux/process/struct.PidFd.html" id="358">
      <title>PidFd in std::os::linux::process - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/io/trait.BufRead.html" id="359">
      <title>BufRead in std::io - Rust#__#&lt;&lt;line-by-line is inefficient without using a buffer#red&gt;&gt; &lt;&lt;BufRead, which includes a read_line#green&gt;&gt; &lt;&lt;lines iterator#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/io/struct.IoSliceMut.html" id="360">
      <title>IoSliceMut in std::io - Rust#__#&lt;&lt;with Read::read_vectored&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html" id="361">
      <title>IoSlice in std::io - Rust#__#&lt;&lt;with Write::write_vectored&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/io/trait.Read.html" id="1101">
      <title>Read in std::io - Rust#__#&lt;&lt;a “by reference” adaptor&gt;&gt; &lt;&lt;While for File, it is possible to reach the end&gt;&gt; &lt;&lt;get zero&gt;&gt; &lt;&lt;if more data is appended#red&gt;&gt; &lt;&lt;future calls to read will return more data#red&gt;&gt; &lt;&lt;not an error if the returned value n is smaller than the buffer#red&gt;&gt; &lt;&lt;even when the reader is not at the end of the stream yet#red&gt;&gt; &lt;&lt;fewer bytes are actually available right now#red&gt;&gt; &lt;&lt;interrupted by a signal#red&gt;&gt; &lt;&lt;safe to implement#red&gt;&gt; &lt;&lt;unsafe code cannot rely on n &lt;= buf.len() for safety#red&gt;&gt; &lt;&lt;fn read_vectored(&amp;mut self, bufs: &amp;mut [IoSliceMut&lt;&apos;_&gt;])&gt;&gt; &lt;&lt;fn is_read_vectored(&amp;self) -&gt; bool&gt;&gt; &lt;&lt;fn by_ref(&amp;mut self) -&gt; &amp;mut Self@1&gt;&gt; &lt;&lt;let reference = f.by_ref();#green&gt;&gt; &lt;&lt;reference.take(5)#green&gt;&gt; &lt;&lt;impl Read for &amp;File#green&gt;&gt; &lt;&lt;impl Read for &amp;[u8]#green&gt;&gt; &lt;&lt;impl&lt;A: Allocator&gt; Read for VecDeque&lt;u8, A&gt;&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/io/trait.Write.html" id="1102">
      <title>Write in std::io - Rust#__#&lt;&lt;fn write_vectored(&amp;mut self, bufs: &amp;[IoSlice&lt;&apos;_&gt;])&gt;&gt; &lt;&lt;fn write_all_vectored(&amp;mut self, bufs: &amp;mut [IoSlice&lt;&apos;_&gt;])&gt;&gt; &lt;&lt;fn write_fmt(&amp;mut self, fmt: Arguments&lt;&apos;_&gt;)&gt;&gt; &lt;&lt;fn by_ref(&amp;mut self) -&gt; &amp;mut Self@1&gt;&gt; &lt;&lt;impl Write for &amp;File#green&gt;&gt; &lt;&lt;impl Write for File&gt;&gt; &lt;&lt;impl Write for &amp;mut#green&gt;&gt; &lt;&lt;impl&lt;A&gt; Write for Cursor&lt;&amp;mut Vec&lt;u8, A&gt;&gt;&gt;&gt; &lt;&lt;impl&lt;A: Allocator&gt; Write for VecDeque&lt;u8, A&gt;&gt;&gt; &lt;&lt;impl&lt;A: Allocator&gt; Write for Vec&lt;u8, A&gt;&gt;&gt; &lt;&lt;impl Write for Cursor&lt;&amp;mut [u8]&gt;#green&gt;&gt; &lt;&lt;impl&lt;&apos;a&gt; Write for BorrowedCursor&lt;&apos;a&gt;&gt;&gt; &lt;&lt;impl&lt;A&gt; Write for Cursor&lt;Box&lt;[u8], A&gt;&gt;&gt;&gt; &lt;&lt;impl&lt;A&gt; Write for Cursor&lt;Vec&lt;u8, A&gt;&gt;&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/io/struct.Cursor.html" id="1103">
      <title>Cursor in std::io - Rust#__#&lt;&lt;in-memory buffer&gt;&gt; &lt;&lt;with a Seek&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/std/macro.println.html" id="1104">
      <title>println in std - Rust#__#&lt;&lt;lock the standard output on each call#red&gt;&gt; &lt;&lt;If you call println! within a hot loop#red&gt;&gt; &lt;&lt;bottleneck&gt;&gt; &lt;&lt;lock stdout with io::stdout().lock():#green&gt;&gt; &lt;&lt;let mut lock = stdout().lock();&gt;&gt; &lt;&lt;writeln!(lock,&gt;&gt; &lt;&lt;).unwrap();&gt;&gt; &lt;&lt;eprintln! instead to print error and progress&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="71">
    <title>HashMap</title>
    <bookmark href="https://docs.rs/maplit/latest/maplit/" id="362">
      <title>maplit - Rust#__#&lt;&lt;container literals&gt;&gt; &lt;&lt;Macros@1&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-phf/rust-phf" id="363">
      <title>rust-phf/rust-phf: Compile time static maps for Rust</title>
    </bookmark>
    <bookmark href="https://gist.github.com/mysteriouspants/9a3a327802ffcf95b10c66885412da04" id="364">
      <title>cache.rs</title>
    </bookmark>
    <bookmark href="https://users.rust-lang.org/t/are-there-copy-on-write-maps/27486" id="365">
      <title>Are there copy on write maps? - help - The Rust Programming Language Forum</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html" id="366">
      <title>Entry in std::collections::hash_map - Rust</title>
    </bookmark>
    <bookmark href="https://github.com/tkaitchuck/aHash/blob/master/README.md" id="367">
      <title>aHash/README.md at master · tkaitchuck/aHash#__#&lt;&lt;fastest&gt;&gt; &lt;&lt;DOS resistant&gt;&gt; &lt;&lt;high quality&gt;&gt; &lt;&lt;but#red&gt;&gt; &lt;&lt;not a cryptographically secure#red&gt;&gt; &lt;&lt;a keyed hash&gt;&gt; &lt;&lt;each map will produce completely different hashes&gt;&gt; &lt;&lt;Goals&gt;&gt; &lt;&lt;Non-Goals#green&gt;&gt; &lt;&lt;not have a fixed standard for its output#red&gt;&gt; &lt;&lt;allows it to improve over time#green&gt;&gt; &lt;&lt;exclusively for use in in-memory#red&gt;&gt; &lt;&lt;persist hashed values. (In these cases HighwayHash#green&gt;&gt; &lt;&lt;not be used as a MAC#red&gt;&gt; &lt;&lt;SHA-3#green&gt;&gt; &lt;&lt;HashMap&lt;i32, i32, RandomState&gt;&gt; &gt;&lt;&lt;map: AHashMap&lt;i32, i32&gt; = AHashMap::new()#green&gt;&gt; &lt;&lt;getrandom&gt;&gt; &lt;&lt;nightly-arm-aes&gt;&gt; &lt;&lt;AES instructions on 32-bit ARM&gt;&gt; &lt;&lt;requires nightly#red&gt;&gt; &lt;&lt;not needed on AArch64#green&gt;&gt; &lt;&lt;DOS resistance even if there is no random number generator available at runtime#green&gt;&gt; &lt;&lt;assuming the compiled binary is not public#red&gt;&gt; &lt;&lt;binary non-deterministic#red&gt;&gt; &lt;&lt;constrandom&gt;&gt; &lt;&lt;more representative performance comparison#blue&gt;&gt; &lt;&lt;includes the overhead of using a HashMap#red&gt;&gt; &lt;&lt;see HashBrown&apos;s benchmarks#green&gt;&gt; &lt;&lt;HashBrown now uses aHash#green&gt;&gt; &lt;&lt;FAQ document#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="72">
    <title>Iterators</title>
    <folder id="368">
      <title>core / std</title>
      <bookmark href="https://doc.rust-lang.org/nightly/core/iter/trait.ExactSizeIterator.html" id="926">
        <title>ExactSizeIterator in core::iter - Rust#__#&lt;&lt;Iterator::size_hint must return the exact#red&gt;&gt; &lt;&lt;TrustedLen trait gives this additional guarantee#green&gt;&gt; &lt;&lt;If an adapter makes an iterator longer#red&gt;&gt; &lt;&lt;usually incorrect for that adapter to implement ExactSizeIterator#red&gt;&gt; &lt;&lt;inner exact-sized iterator might already be usize::MAX-long#red&gt;&gt; &lt;&lt;why Chain&lt;A, B&gt; isn’t ExactSizeIterator, even when A and B are both ExactSizeIterator#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/iter/trait.DoubleEndedIterator.html" id="927">
        <title>DoubleEndedIterator in std::iter - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/iter/struct.Zip.html" id="928">
        <title>Zip in std::iter - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/iter/fn.repeat_with.html" id="929">
        <title>repeat_with in std::iter - Rust#__#&lt;&lt;not a DoubleEndedIterator#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/iter/fn.repeat.html" id="930">
        <title>repeat in std::iter - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/iter/trait.FusedIterator.html" id="931">
        <title>FusedIterator in core::iter - Rust#__#&lt;&lt;optimizing Iterator::fuse()&gt;&gt; &lt;&lt;not use FusedIterator in generic bounds#red&gt;&gt; &lt;&lt;just call Iterator::fuse() on the iterator#green&gt;&gt; &lt;&lt;If the iterator is already fused, the additional Fuse wrapper will be a no-op#green&gt;&gt; &lt;&lt;continues to yield None when exhausted#blue&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/iter/trait.TrustedLen.html" id="932">
        <title>TrustedLen in core::iter - Rust#__#&lt;&lt;nightly-only#red&gt;&gt; &lt;&lt;accurate length#green&gt;&gt; &lt;&lt;either exact#green&gt;&gt; &lt;&lt;or the upper bound is None#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/iter/trait.Iterator.html" id="933">
        <title>Iterator in core::iter - Rust#__#&lt;&lt;useful when you have an iterator over &amp;T, but you need an iterator over T#green&gt;&gt; &lt;&lt;collect&lt;B&gt;(self) -&gt; B#green&gt;&gt; &lt;&lt;take anything iterable&gt;&gt; &lt;&lt;fn scan#green&gt;&gt; &lt;&lt;fn by_ref#green&gt;&gt; &lt;&lt;while still retaining ownership of the original iterator&gt;&gt; &lt;&lt;only do this because we used `by_ref` earlier&gt;&gt; &lt;&lt;fn max_by_key&gt;&gt; &lt;&lt;fn max_by&lt;F&gt;(self, compare&gt;&gt; &lt;&lt;rev() only works on DoubleEndedIterator#red&gt;&gt; &lt;&lt;fn unzip&gt;&gt; &lt;&lt;fn copied&gt;&gt; See inside&lt;&lt;fn cloned#green&gt;&gt; &lt;&lt;best performance&gt;&gt; &lt;&lt;clone late:#green&gt;&gt; &lt;&lt;.cloned().filter(#red&gt;&gt; &lt;&lt;.filter(|s| s.len() == 1).cloned()#green&gt;&gt; &lt;&lt;fn cycle&gt;&gt; &lt;&lt;fn array_chunks#green&gt;&gt; &lt;&lt;.into_remainder() function of the iterator&gt;&gt; &lt;&lt;fn cmp#green&gt;&gt; &lt;&lt;Lexicographically compares#green&gt;&gt; &lt;&lt;fn partial_cmp#green&gt;&gt; &lt;&lt;fn partial_cmp_by#green&gt;&gt; &lt;&lt;iter.by_ref()#green&gt;&gt; &lt;&lt;.take_while(@3&gt;&gt; &lt;&lt;let result: Vec&lt;u32&gt; = iter.by_ref()#green&gt;&gt; &lt;&lt;.map_while(@2&gt;&gt; &lt;&lt;for_each may also be faster than a loop&gt;&gt; &lt;&lt;internal iteration on adapters like Chain&gt;&gt; &lt;&lt;fn count&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/iter/trait.FromIterator.html" id="934">
        <title>FromIterator in core::iter - Rust#__#&lt;&lt;to create a collection&gt;&gt; &lt;&lt;collect() method is preferred#green&gt;&gt; &lt;&lt;However, when you need to specify the container type#blue&gt;&gt; &lt;&lt;FromIterator::from_iter() can be more readable#green&gt;&gt; &lt;&lt;Vec::from_iter#green&gt;&gt; &lt;&lt;let v: Vec&lt;i32&gt; = five_fives.collect();#green&gt;&gt; &lt;&lt;collect::&lt;VecDeque&lt;i32&gt;&gt;()#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=504731" id="935">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/iter/trait.Extend.html" id="1303">
        <title>Extend in core::iter - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/core/ops/trait.RangeBounds.html" id="1304">
        <title>RangeBounds in core::ops - Rust</title>
      </bookmark>
    </folder>
    <folder id="369">
      <title>Collections</title>
      <folder id="936">
        <title>Ordered</title>
        <bookmark href="https://github.com/bluss/indexmap" id="1105">
          <title>bluss/indexmap: A hash table with consistent order and fast iteration; access items by key or sequence index</title>
        </bookmark>
        <bookmark href="https://crates.io/crates/ritelinked" id="1106">
          <title>ritelinked - crates.io: Rust Package Registry</title>
        </bookmark>
        <bookmark href="https://www.reddit.com/r/rust/comments/k7gljm/hashset_from_vec_while_maintaining_the_order_of/" id="1107">
          <title>(1) HashSet from Vec while maintaining the order of elements : rust#__#&lt;&lt;deterministic hash algorithm#green&gt;&gt; &lt;&lt;fnv crate provides a hasher that uses fnv, which is also a common choice for C++#green&gt;&gt; &lt;&lt;fnv::FnvBuildHasher&gt;&gt; &lt;&lt;If you instead just want a deterministic order&gt;&gt; &lt;&lt;HashSet using the with_hasher()#green&gt;&gt; &lt;&lt;linked-hash-set and the rest of the crates in the contain-rs org haven&apos;t been maintained#red&gt;&gt; &lt;&lt;panic in linked-hash-map#red&gt;&gt; &lt;&lt;wouldn&apos;t expect it to be fixed anytime soon#red&gt;&gt; &lt;&lt;hashlink#green&gt;&gt; &lt;&lt;indexmap is a decent#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://crates.io/crates/linked_hash_set" id="1108">
          <title>linked_hash_set - crates.io: Rust Package Registry</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/30243100/how-do-i-sort-a-map-by-order-of-insertion" id="1109">
          <title>rust - How do I sort a map by order of insertion? - Stack Overflow</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/alloc/collections/btree_map/struct.Cursor.html" id="1110">
          <title>Cursor in alloc::collections::btree_map - Rust</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/alloc/collections/btree_map/struct.BTreeMap.html" id="1111">
          <title>BTreeMap in alloc::collections::btree_map - Rust#__#&lt;&lt;fn range&gt;&gt; &lt;&lt;fn range_mut&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="937">
        <title>zOther</title>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch08-03-hash-maps.html" id="1112">
          <title>Storing Keys with Associated Values in Hash Maps - The Rust Programming Language#__#&lt;&lt;constructing a hash map is by using iterators and the collect method on a vector of tuples#green&gt;&gt; &lt;&lt;type annotation HashMap&lt;_, _&gt; is needed here because it’s possible to collect into many different data structures#red&gt;&gt; &lt;&lt;For the parameters for the key and value types, however, we use underscores#green&gt;&gt; &lt;&lt;Copy trait, like i32, the values are copied into the hash map#green&gt;&gt; &lt;&lt;owned values like String, the values will be moved and the hash map will be the owner#red&gt;&gt; &lt;&lt;insert references to values#green&gt;&gt; &lt;&lt;get returns an Option&lt;&amp;V&gt;&gt; &gt;&lt;&lt;scores.entry(String::from(&quot;Yellow&quot;)).or_insert(50);#green&gt;&gt; &lt;&lt;or_insert method on Entry is defined to return a mutable reference to the value#green&gt;&gt; &lt;&lt;cleaner than writing the logic ourselves#red&gt;&gt; &lt;&lt;Updating a Value Based on the Old Value&gt;&gt; &lt;&lt;let count = map.entry(word).or_insert(0);&gt;&gt; &lt;&lt;*count += 1;#green&gt;&gt; &lt;&lt;let mut scores: HashMap&lt;_, _&gt; =#green&gt;&gt; &lt;&lt;teams.into_iter().zip(initial_scores.into_iter()).collect();#green&gt;&gt; &lt;&lt;scores.get(&amp;team_name)#green&gt;&gt; &lt;&lt;for (key, value) in &amp;scores#green&gt;&gt; &lt;&lt;If we insert a key and a value#green&gt;&gt; &lt;&lt;value associated with that key will be replaced#green&gt;&gt; &lt;&lt;check whether a particular key has a value and, if it doesn’t, insert#green&gt;&gt; &lt;&lt;return value of the entry method is an enum called Entry#green&gt;&gt; &lt;&lt;or_insert method actually returns a mutable reference (&amp;mut V) to the value for this key#green&gt;&gt; &lt;&lt;By default, HashMap uses a hashing function called SipHash#green&gt;&gt; &lt;&lt;hasher is a type that implements the BuildHasher trait#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://gradebot.org/doc/ipur/iterator.html" id="1113">
          <title>Iterators - Introduction to Programming Using Rust</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/rust-by-example/std/hash.html" id="1114">
          <title>HashMap - Rust By Example#__#&lt;&lt;Eq and Hash traits#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://www.reddit.com/r/rust/comments/j0fm4x/implementing_a_custom_hash_function/" id="1115">
          <title>Implementing a custom hash function : rust</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/book/ch08-01-vectors.html" id="1116">
          <title>Storing Lists of Values with Vectors - The Rust Programming Language#__#&lt;&lt;When the vector gets dropped, all of its contents are also dropped#red&gt;&gt; &lt;&lt;two ways to get the third element&gt;&gt; &lt;&lt;&amp; and [], which gives us a reference#green&gt;&gt; &lt;&lt;or by using the get method with the index passed as an argument, which gives us an Option&lt;&amp;T&gt;#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html" id="1117">
          <title>HashMap in std::collections - Rust#__#&lt;&lt;quadratic probing&gt;&gt; &lt;&lt;SIMD lookup&gt;&gt; &lt;&lt;HashDoS attacks#red&gt;&gt; &lt;&lt;SipHash 1-3#green&gt;&gt; &lt;&lt;very competitive&gt;&gt; &lt;&lt;medium sized keys#green&gt;&gt; &lt;&lt;other hashing algorithms will outperform it&gt;&gt; &lt;&lt;small keys such as integers#red&gt;&gt; &lt;&lt;as well as large keys such as long strings#red&gt;&gt; &lt;&lt;though those algorithms will typically not protect against attacks such as HashDoS#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://gitlab.com/rust-saar/material/-/tree/main/2020_12_08" id="1118">
          <title>2020_12_08 · main · Rust-Saar / Material · GitLab</title>
        </bookmark>
        <bookmark href="https://www.reddit.com/r/rust/comments/n2429h/arrayvec_vs_smallvec_vs_tinyvec/" id="1119">
          <title>(1) arrayvec vs smallvec vs tinyvec : rust#__#&lt;&lt;tinyvec:#green&gt;&gt; &lt;&lt;smallvec had 5 memory safety bugs#red&gt;&gt; &lt;&lt;disadvantage of tinyvec is that it requires the Default trait#red&gt;&gt; &lt;&lt;arrayvec::ArrayVec as backing storage on the stack#green&gt;&gt; &lt;&lt;critical difference is when you do it many many times#green&gt;&gt; &lt;&lt;for very short moments#green&gt;&gt; &lt;&lt;access memory that is near other things you&apos;re using#green&gt;&gt; &lt;&lt;stack is almost always in the L1 cache, because you use it constantly#green&gt;&gt; &lt;&lt;large enough to drop your cache locality#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://users.rust-lang.org/t/finding-and-removing-an-element-in-a-vec/42166/3" id="1120">
          <title>Finding and removing an element in a vec - help - The Rust Programming Language Forum#__#&lt;&lt;some_vec.retain(|value| *value != 10);#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/26243025/remove-an-element-from-a-vector" id="1121">
          <title>rust - Remove an element from a vector - Stack Overflow</title>
        </bookmark>
        <bookmark href="https://lib.rs/crates/easy_collections" id="1325">
          <title>easy_collections — data structures in Rust // Lib.rs</title>
        </bookmark>
        <bookmark href="https://docs.rs/cc-traits/latest/cc_traits/" id="1326">
          <title>cc_traits - Rust#__#&lt;&lt;implemented for some popular crates&gt;&gt; &lt;&lt;enable the feature of the same name#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://stackoverflow.com/questions/53595542/how-do-i-express-generic-map-and-set-containers-in-rust" id="1327">
          <title>How do I express generic map and set containers in Rust? - Stack Overflow</title>
        </bookmark>
        <bookmark href="https://www.reddit.com/r/rust/comments/p547yd/collection_traits_abstract_operations_in_std/" id="1328">
          <title>Reddit - Dive into anything</title>
        </bookmark>
        <bookmark href="https://users.rust-lang.org/t/newbe-does-rust-have-an-abstract-map-trait/69240" id="1329">
          <title>[NEWBE] Does Rust have an &quot;abstract map&quot; trait? - The Rust Programming Language Forum</title>
        </bookmark>
        <bookmark href="https://doc.rust-lang.org/stable/std/ops/trait.Index.html" id="1330">
          <title>Index in std::ops - Rust</title>
        </bookmark>
        <bookmark href="https://medium.com/@knoldus/what-are-the-different-types-of-collection-in-rust-3fd724305c8f" id="1331">
          <title>What are the different types of collection in Rust | by Knoldus Inc. | Medium</title>
        </bookmark>
        <bookmark href="https://crates.io/crates/sled" id="1332">
          <title>sled - crates.io: Rust Package Registry</title>
        </bookmark>
        <bookmark href="https://robinmoussu.gitlab.io/blog/post/2021-03-25_rust_iterators_tips_and_tricks/" id="1333">
          <title>Rust iterators tips and tricks</title>
        </bookmark>
      </folder>
    </folder>
    <folder id="370">
      <title>zOther</title>
      <bookmark href="https://danielkeep.github.io/itercheat_baked.html" id="938">
        <title>Rust Iterator Cheat Sheet</title>
      </bookmark>
      <bookmark href="https://docs.google.com/presentation/d/17AywcduWjb0PQkhnm7A0Vk-icXBk_vTr0TFKDKufz70/edit#slide=id.gdf86c4eb99_2_781" id="939">
        <title>Rust Iterator Tidbits - Google Slides</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/ops/trait.RangeBounds.html" id="940">
        <title>std::ops::RangeBounds - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/std/iter/struct.Take.html" id="941">
        <title>std::iter::Take - Rust#__#&lt;&lt;&apos;Zips up&apos; two iterators into a single iterator of pairs#green&gt;&gt; &lt;&lt;Takes two iterators and creates a new iterator over both in sequence.#green&gt;&gt; &lt;&lt;Takes a closure and creates an iterator which calls that closure on each element.#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://gradebot.org/doc/ipur/iterator.html" id="942">
        <title>Iterators - Introduction to Programming Using Rust</title>
      </bookmark>
      <bookmark href="https://docs.rs/itertools/0.7.2/itertools/fn.merge.html" id="943">
        <title>itertools::merge - Rust</title>
      </bookmark>
      <bookmark href="https://docs.rs/itertools/0.7.8/itertools/fn.flatten.html" id="944">
        <title>itertools::flatten - Rust</title>
      </bookmark>
      <bookmark href="https://github.com/Janonard/pipes" id="945">
        <title>Janonard/pipes: Compositional, pipes-style stream processing.#__#&lt;&lt;produces a stream&gt;&gt; &lt;&lt;also consuming a stream#green&gt;&gt; &lt;&lt;many small functions&gt;&gt; &lt;&lt;to build one big one&gt;&gt; &lt;&lt;overhead&gt;&gt; &lt;&lt;only marginal#green&gt;&gt; &lt;&lt;about 1-2%#green&gt;&gt; &lt;&lt;removed completely by enabling link-time optimizations#green&gt;&gt; &lt;&lt;[profile.release]#green&gt;&gt; &lt;&lt;lto = true#green&gt;&gt; &lt;&lt;[profile.bench]#green&gt;&gt; &lt;&lt;but with lto#green&gt;&gt; &lt;&lt;exactly the same#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/itertools/latest/itertools/trait.Itertools.html#method.permutations" id="946">
        <title>Itertools in itertools - Rust</title>
      </bookmark>
      <bookmark href="https://docs.rs/itertools/latest/itertools/structs/struct.Combinations.html" id="947">
        <title>Combinations in itertools::structs - Rust#__#&lt;&lt;impl&lt;I&gt; RefUnwindSafe&gt;&gt; &lt;&lt;I: RefUnwindSafe&gt;&gt; &lt;&lt;&lt;I as Iterator&gt;::Item: RefUnwindSafe&gt;&gt; &lt;&lt;I: UnwindSafe&gt;&gt; &lt;&lt;&lt;I as Iterator&gt;::Item: UnwindSafe&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="73">
    <title>Parsing &amp; Strings</title>
    <bookmark href="https://doc.rust-lang.org/nightly/core/primitive.str.html" id="371">
      <title>str - Rust#__#&lt;&lt;3 here - the previous character took up two bytes#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/str/struct.Chars.html" id="372">
      <title>Chars in core::str - Rust#__#&lt;&lt;subslice of the original data&gt;&gt; &lt;&lt;same lifetime as the original slice&gt;&gt; &lt;&lt;so the iterator can continue to be used while this exists#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://sanjeevi.hashnode.dev/answering-rust-strings-utf-8-variable-encoding-clone-on-write-cow-string-trait-methods-and-why-strings-cant-be-indexed" id="1954">
      <title>Rust, String, UTF-8#__#&lt;&lt;right to left&gt;&gt; &lt;&lt;next() in those languages returns the last character as the first#red&gt;&gt; &lt;&lt;char::REPLACEMENT_CHARACTER&gt;&gt; &lt;&lt;char::UNICODE_VERSION&gt;&gt; &lt;&lt;unsigned 8-bit value can be converted to an ASCII character using the char::from&gt;&gt; &lt;&lt;infallible, every U8 value is a valid Unicode point&gt;&gt; &lt;&lt;can&apos;t mutate through a string slice#red&gt;&gt; &lt;&lt;concat! macro builds a static string slice#green&gt;&gt; &lt;&lt;let u8_bytes_from_slice : &amp;[u8; 5] = b&quot;hello&quot;;#green&gt;&gt; &lt;&lt;grapheme cluster&gt;&gt; &lt;&lt;combination of Unicode scalars&gt;&gt; &lt;&lt;Python and Julia#red&gt;&gt; &lt;&lt;use byte indexing&gt;&gt; &lt;&lt;prints values at the specified index, without indicating whether it&apos;s an actual character in Unicode#red&gt;&gt; &lt;&lt;Python doesn&apos;t provide any awareness in this context#red&gt;&gt; &lt;&lt;Julia refuses to compile if the byte index is not valid#green&gt;&gt; &lt;&lt;Index&lt;String::Index&gt;#green&gt;&gt; &lt;&lt;Range&lt;String::Index&gt;#green&gt;&gt; &lt;&lt;methods like char_indices#green&gt;&gt; &lt;&lt;variable-width encoding@2#red&gt;&gt; &lt;&lt;UTF-8 results in fewer internationalization issues#green&gt;&gt; &lt;&lt;JSON, where, as is increasingly the case, it is the only#green&gt;&gt; &lt;&lt;.char_indices()&gt;&gt; &lt;&lt;.for_each(|(index, char)|&gt;&gt; &lt;&lt;implemented for String&gt;&gt; &lt;&lt;Index&lt;Range&gt;&gt; &gt;&lt;&lt;Construct from&gt;&gt; &lt;&lt;vector of u8 bytes#green&gt;&gt; &lt;&lt;without additional allocation (using the original vector)&gt;&gt; &lt;&lt;Slices of type &amp;[T] have&gt;&gt; &lt;&lt;o_vec method#green&gt;&gt; &lt;&lt;to_owned() on any type that implements the Clone#green&gt;&gt; &lt;&lt;return independent copies#green&gt;&gt; &lt;&lt;calling to_owned on the Owned type itself#blue&gt;&gt; &lt;&lt;like a clone&gt;&gt; &lt;&lt;to_string() method on&gt;&gt; &lt;&lt;implement the Display&gt;&gt; &lt;&lt;format_args&gt;&gt; &lt;&lt;write to the string#green&gt;&gt; &lt;&lt;writeln!(#green&gt;&gt; &lt;&lt;{:?} are&gt;&gt; &lt;&lt;Debug&gt;&gt; &lt;&lt;slice_of_str.join(&quot;\n&quot;)&gt;&gt; &lt;&lt;slice_of_str.concat()&gt;&gt; &lt;&lt;multiple push_str&gt;&gt; &lt;&lt;string_by_concat.extend([&gt;&gt; &lt;&lt;collect method on an iterator#green&gt;&gt; &lt;&lt;item produced by the iterator is char, &amp;str, or String itself#green&gt;&gt; &lt;&lt;String type implements the from_iter method for these&gt;&gt; &lt;&lt;include_str!&gt;&gt; &lt;&lt;insert your textual file into the binary&gt;&gt; &lt;&lt;fn add(self, other: &amp;str) -&gt; String&gt;&gt; &lt;&lt;+ operator and the add method&gt;&gt; &lt;&lt;import the Add trait#green&gt;&gt; &lt;&lt;+=&gt;&gt; &lt;&lt;add_assign&gt;&gt; &lt;&lt;.repeat(4)&gt;&gt; &lt;&lt;.lines()&gt;&gt; &lt;&lt;.cycle().take(5)#green&gt;&gt; &lt;&lt;{:0x?} to see the bytes in hexadecimal&gt;&gt; &lt;&lt;interpret the bytes:&gt;&gt; &lt;&lt;as a character#red&gt;&gt; &lt;&lt;not equivalent to the character you might expect#red&gt;&gt; &lt;&lt;but a Unicode point#blue&gt;&gt; &lt;&lt;s a Grapheme cluster#green&gt;&gt; &lt;&lt;doesn&apos;t provide this functionality in the standard library#red&gt;&gt; &lt;&lt;replace and replacen&gt;&gt; &lt;&lt;Methods that start with r&gt;&gt; &lt;&lt;nth(index).map(|index|#red&gt;&gt; &lt;&lt;enumerate and char_indices are exactly equivalent for single-byte&gt;&gt; &lt;&lt;but not for multi-byte#red&gt;&gt; &lt;&lt;Instead of directly cloning#red&gt;&gt; &lt;&lt;Rc&lt;String&gt;&gt;&gt; &lt;&lt;make_ascii_uppercase()&gt;&gt; &lt;&lt;in-place modification&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=984585" id="373">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/bodil/smartstring/blob/master/README.md" id="374">
      <title>smartstring/README.md at master · bodil/smartstring#__#&lt;&lt;source compatible with std::string::String&gt;&gt; &lt;&lt;doesn&apos;t heap allocate for short&gt;&gt; &lt;&lt;up to 23 bytes on 64-bit arch&gt;&gt; &lt;&lt;Converting a heap allocated&gt;&gt; &lt;&lt;zero cost&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/smartstring/latest/smartstring/struct.SmartString.html" id="375">
      <title>SmartString in smartstring - Rust#__#&lt;&lt;Mode: SmartStringMode&gt;&gt; &lt;&lt;wraps one of two&gt;&gt; &lt;&lt;inline@1&gt;&gt; &lt;&lt;boxed&gt;&gt; &lt;&lt;Conversion between the two&gt;&gt; &lt;&lt;opportunistically#green&gt;&gt; &lt;&lt;transparently#green&gt;&gt; &lt;&lt;layout as its type argument:&gt;&gt; &lt;&lt;Compact or LazyCompact&gt;&gt; &lt;&lt;mimics the interface of String&gt;&gt; &lt;&lt;except where behaviour cannot be guaranteed to stay consistent between its boxed and inline#red&gt;&gt; &lt;&lt;still have capacity() and shrink_to_fit()&gt;&gt; &lt;&lt;because the inline variant can still give sensible behaviour&gt;&gt; &lt;&lt;but with_capacity(), reserve() etc are absent#red&gt;&gt; &lt;&lt;would have no effect on inline#red&gt;&gt; &lt;&lt;and the requested state changes wouldn’t carry over if the inline string is promoted to a boxed#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/smartstring/latest/smartstring/" id="376">
      <title>smartstring - Rust#__#&lt;&lt;two flavours&gt;&gt; &lt;&lt;LazyCompact, which takes up exactly as much space as a String&gt;&gt; &lt;&lt;generally a little faster#green&gt;&gt; &lt;&lt;Compact, which is the same as LazyCompact except it will aggressively re-inline any expanded Strings which become short enough&gt;&gt; &lt;&lt;intended use for SmartString&gt;&gt; &lt;&lt;key type for a B-tree#green&gt;&gt; &lt;&lt;BTreeMap&gt;&gt; &lt;&lt;cache locality#green&gt;&gt; &lt;&lt;reducing your heap allocations#green&gt;&gt; &lt;&lt;use smartstring::alias::String;#green&gt;&gt; &lt;&lt;string.push_str&gt;&gt; &lt;&lt;write!(string&gt;&gt; &lt;&lt;23 bytes to store the string&gt;&gt; &lt;&lt;7 bits to encode the string’s length&gt;&gt; &lt;&lt;relies on pointer alignment#green&gt;&gt; &lt;&lt;able to store a discriminant bit in its inline form that will never be present in its String form#green&gt;&gt; &lt;&lt;Compact mode, it is aggressive about inlining&gt;&gt; &lt;&lt;unintended allocations#red&gt;&gt; &lt;&lt;repeatedly adjust#red&gt;&gt; &lt;&lt;across the inline capacity threshold#red&gt;&gt; &lt;&lt;doesn’t aim to be more performant than String in the general#blue&gt;&gt; &lt;&lt;exceed String’s performance perceptibly on shorter strings#green&gt;&gt; &lt;&lt;memory efficient in these cases#green&gt;&gt; &lt;&lt;always be a slight overhead on all operations on boxed strings#red&gt;&gt; &lt;&lt;compared to String#green&gt;&gt; &lt;&lt;proptest@2&gt;&gt; &lt;&lt;strategy for generating SmartStrings from a regular expression&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/smartstring/latest/smartstring/struct.LazyCompact.html" id="377">
      <title>LazyCompact in smartstring - Rust#__#&lt;&lt;doesn’t aggressively inline&gt;&gt; &lt;&lt;to defer heap allocation#green&gt;&gt; &lt;&lt;rather than to ensure cache locality#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/smartstring/latest/smartstring/struct.Compact.html" id="378">
      <title>Compact in smartstring - Rust#__#&lt;&lt;performs generally as well as String on all ops on boxed strings&gt;&gt; &lt;&lt;and better than Strings on inlined strings#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/bodil/smartstring/pull/48" id="379">
      <title>Size optimization for `Option` by dragazo · Pull Request #48 · bodil/smartstring#__#&lt;&lt;no real need to use MaybeUninit&lt;InlineString&gt;#red&gt;&gt; &lt;&lt;just InlineString#green&gt;&gt; &lt;&lt;due to it&gt;&gt; &lt;&lt;a POD type#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=241900" id="380">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/primitive.char.html" id="1122">
      <title>char - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/core/primitive.u32.html" id="1123">
      <title>u32 - Rust#__#&lt;&lt;From&lt;char&gt; for u32&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/ascii/enum.Char.html" id="1124">
      <title>Char in core::ascii - Rust</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=817160" id="1125">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/mobusoperandi/mobzero/blob/mob/main/aoc/2015/day8/src/main.rs" id="1126">
      <title>mobzero/main.rs at mob/main · mobusoperandi/mobzero#__#&lt;&lt;et re3 = Regex::new(r#&quot;\\x[0-9a-f]{2}&quot;#).unwrap();&gt;&gt; &lt;&lt;let line = re3.replace_all(&amp;line, &quot;c&quot;).as_ref().to_owned();&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/aliri_braid/latest/aliri_braid/" id="1127">
      <title>aliri_braid - Rust</title>
    </bookmark>
    <bookmark href="https://blog.burntsushi.net/bstr/" id="1128">
      <title>A byte string library for Rust - Andrew Gallant&apos;s Blog#__#&lt;&lt;Andrew Gallant&gt;&gt; &lt;&lt;arbitrary sequences of bytes&gt;&gt; &lt;&lt;most useful when those bytes are UTF-8#green&gt;&gt; &lt;&lt;UTF-8 by convention#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/bpaf/latest/bpaf/_applicative/index.html" id="1129">
      <title>bpaf::_applicative - Rust</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/y6gaxe/practical_parsing_in_rust_with_nom/" id="1130">
      <title>Practical Parsing in Rust with nom : rust#__#&lt;&lt;tfpk.github.io/nominomicon#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/pacak/omnomnomicon/blob/master/src/tutorial.rs" id="1131">
      <title>omnomnomicon/tutorial.rs at master · pacak/omnomnomicon</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/regex" id="1334">
      <title>rust-lang/regex: An implementation of regular expressions for Rust. This implementation uses finite automata and guarantees linear time matching on all inputs.#__#&lt;&lt;[dependencies.regex]#green&gt;&gt; &lt;&lt;minimum supported rustc version is 1.60.0#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://docs.rs/const_format/latest/const_format/" id="1335">
      <title>const_format - Rust</title>
    </bookmark>
    <bookmark href="https://internals.rust-lang.org/t/using-a-more-efficient-string-matching-algorithm/16719/6" id="1336">
      <title>Using a more efficient string matching algorithm - libs - Rust Internals#__#&lt;&lt;burntsushi@1&gt;&gt; &lt;&lt;memchr::memmem&gt;&gt; &lt;&lt;Two-Way (the same thing std&gt;&gt; &lt;&lt;but also has SIMD&gt;&gt; &lt;&lt;ripgrep&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/learnrust/comments/sh8n1g/efficient_sorting_of_a_huge_number_of_strings/" id="1337">
      <title>efficient sorting of a huge number of strings : r/learnrust#__#&lt;&lt;Parsing the above into &quot;slices&quot; takes 172ms#green&gt;&gt; &lt;&lt;Parsing the above into &quot;String&quot;#red&gt;&gt; &lt;&lt;individually copied into heap#red&gt;&gt; &lt;&lt;1.4 seconds#red&gt;&gt; &lt;&lt;assume this is mostly rust-malloc#red&gt;&gt; Use Aaron Abramov&apos;s trcik - move to a separate thread&lt;&lt;final into_iter takes an EXTRA 1.8 seconds I assume for freeing/coallesing the heap strings#red&gt;&gt; &lt;&lt;ironic, the 6GB of RAM java used was FASTER#green&gt;&gt; &lt;&lt;than Rust - which peek at 2.4GB#red&gt;&gt; &lt;&lt;BTreeSet&lt;T&gt;#green&gt;&gt; &lt;&lt;BinaryHeap&lt;T&gt;#red&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="74">
    <title>zOther</title>
    <bookmark href="https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html" id="381">
      <title>Ord in core::cmp - Rust</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html" id="382">
      <title>PartialEq in core::cmp - Rust#__#&lt;&lt;If PartialOrd or Ord are also implemented#red&gt;&gt; &lt;&lt;must also be consistent with PartialEq#red&gt;&gt; &lt;&lt;accidentally make them disagree#red&gt;&gt; &lt;&lt;deriving some of the traits and manually implementing others#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html" id="383">
      <title>Eq in core::cmp - Rust</title>
    </bookmark>
  </folder>
</folder>
<folder id="10">
  <title>zOther</title>
  <folder id="75">
    <title>ABI</title>
    <bookmark href="https://zicklag.github.io/rust-tutorials/rust-plugins.html" id="384">
      <title>Rust Plugins - Rust Tutorials</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/reference/items/functions.html" id="385">
      <title>Functions - The Rust Reference#__#&lt;&lt;&quot;stdcall&quot; ABI&gt;&gt; &lt;&lt;&quot;C&quot; ABI&gt;&gt; &lt;&lt;extern &quot;Rust&quot; fn foo() {}&gt;&gt; &lt;&lt;when the extern keyword is used and the &quot;ABI&quot; is omitted&gt;&gt; &lt;&lt;ABI used defaults to &quot;C&quot;#green&gt;&gt; &lt;&lt;not support unwinding#red&gt;&gt; &lt;&lt;Except for lints#green&gt;&gt; &lt;&lt;idiomatic to only use outer attributes on function items#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=592207" id="386">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/120qndt/announcing_stabby_a_stable_abi_for_rust_with/" id="387">
      <title>Announcing `stabby`: a stable ABI for Rust with niche optimizations and much more! : r/rust#__#&lt;&lt;can use stabby incrementally#green&gt;&gt; &lt;&lt;marking what you&apos;re not willing to stabilize with StableLike&lt;UnstableType, CompilerVersion_1_68_0&lt;NoNiches&lt;Size, Align&gt;&gt; &lt;&lt;BlessedCompiler&lt;Unstable, Size, Align&gt;#green&gt;&gt; &lt;&lt;optimization-level may change calling conventions#red&gt;&gt; &lt;&lt;optimized and non-optimized builds#red&gt;&gt; &lt;&lt;not be assumed to be ABI-compatible#red&gt;&gt; &lt;&lt;using the same compiler version isn&apos;t enough#red&gt;&gt; &lt;&lt;ABI isn&apos;t guaranteed even across multiple runs of the same compiler on the same machine#red&gt;&gt; &lt;&lt;when you annotate a struct with#[stabby::stabby]&gt;&gt; &lt;&lt;gets annotated with repr(C)&gt;&gt; &lt;&lt;stabby::IStable trait is derived&gt;&gt; &lt;&lt;if your struct has no generic parameters, stabby will throw a compile error#red&gt;&gt; &lt;&lt;shared memory between processes&gt;&gt; &lt;&lt;passing trait objects in SHM#red&gt;&gt; &lt;&lt;likely cause segfaults#red&gt;&gt; &lt;&lt;because the vtables are referenced from the writer&apos;s non shared memor#blue&gt;&gt; &lt;&lt;call functions (including drop)#red&gt;&gt; &lt;&lt;proposals was to put type information generation inside the compiler&gt;&gt; &lt;&lt;crate showing how it could look: https://github.com/h33p/ctti&gt;&gt; &lt;&lt;I realized putting it immediately in the compiler would be tough#red&gt;&gt; &lt;&lt;Heep042&gt;&gt; &lt;&lt;email from the bottom of this page: https://blaz.is/about/&gt;&gt; &lt;&lt;lazy-port of Vec has no methods&gt;&gt; &lt;&lt;but through AccessAs, you get a guard that gives you a mutable reference to a std-vec#blue&gt;&gt; &lt;&lt;that will update the stable-vec on drop#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/ZettaScaleLabs/stabby/blob/main/README.md" id="388">
      <title>crates.io: Rust Package Registry#__#&lt;&lt;breaking change in Rust 1.78#red&gt;&gt; &lt;&lt;Only non-nightly, &gt;= 1.78#red&gt;&gt; &lt;&lt;v-tables&gt;&gt; &lt;&lt;global lock-free set&gt;&gt; &lt;&lt;leaked: valgrind will be angry#red&gt;&gt; &lt;&lt;set grows with the number of distinct (type, trait-set) pairs&gt;&gt; &lt;&lt;stabby-defined trait objects#blue&gt;&gt; &lt;&lt;compact sum-types&gt;&gt; &lt;&lt;without having&gt;&gt; &lt;&lt;sum-types (enums)&gt;&gt; &lt;&lt;explode in size#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=321944" id="389">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/194fvxa/static_vs_dynamic_linking_for_very_large_and/" id="390">
      <title>Static Vs Dynamic Linking for very large and complex software. : r/rust#__#&lt;&lt;abi_stable@1&gt;&gt; &lt;&lt;repr(C) under the hood&gt;&gt; &lt;&lt;macros and functionality&gt;&gt; &lt;&lt;you can use mostly rust types in safe code#green&gt;&gt; &lt;&lt;instead of&gt;&gt; &lt;&lt;C interfaces and unsafe#red&gt;&gt; &lt;&lt;rjelling&gt;&gt; &lt;&lt;At Microsoft some of us&gt;&gt; &lt;&lt;How Swift Achieved Dynamic Linking#green&gt;&gt; &lt;&lt;Fine, I&apos;ll just make my own stable ABI!&gt;&gt; &lt;&lt;crABI and #[export] RFCs#green&gt;&gt; &lt;&lt;want to provide my users a real SDK to my application#green&gt;&gt; &lt;&lt;clients would write their code using the same types#green&gt;&gt; &lt;&lt;Templates/generics#red&gt;&gt; &lt;&lt;one of the most obvious problems#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rodrimati1992/abi_stable_crates/blob/master/readme.md" id="391">
      <title>abi_stable_crates/readme.md at master · rodrimati1992/abi_stable_crates#__#&lt;&lt;Rust-to-Rust&gt;&gt; &lt;&lt;vtables&gt;&gt; &lt;&lt;ffi-safe nonexhaustive enums&gt;&gt; &lt;&lt;Checking at load-time that the types in the dynamic library have the expected layout&gt;&gt; &lt;&lt;semver compatible changes&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rodrimati1992/abi_stable_crates/issues" id="392">
      <title>Issues · rodrimati1992/abi_stable_crates</title>
    </bookmark>
    <bookmark href="https://github.com/rodrimati1992?tab=repositories&amp;q=&amp;type=&amp;language=rust&amp;sort=" id="393">
      <title>rodrimati1992 / June 2024</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=568654" id="1132">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://www.youtube.com/watch?app=desktop&amp;v=FxbYLRJT4_w" id="1133">
      <title>The Path to a Stable ABI for Rust — Amanieu d&apos;Antras | GOSIM Workshop 2023 - YouTube</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=507152" id="1134">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://smallcultfollowing.com/babysteps/blog/2024/04/23/dynsized-unsized/" id="1135">
      <title>Sized, DynSized, and Unsized · baby steps</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/43467" id="1136">
      <title>Tracking issue for RFC 1861: Extern types · Issue #43467 · rust-lang/rust</title>
    </bookmark>
  </folder>
  <folder id="76">
    <title>Applications of/use cases/use of</title>
    <folder id="394">
      <title>ActivityWatch</title>
      <bookmark href="https://docs.activitywatch.net/en/latest/installing-from-source.html" id="948">
        <title>Installing from source#__#&lt;&lt;source ./venv/bin/activate#green&gt;&gt; &lt;&lt;All the modules need to be installed in the same env#green&gt;&gt; &lt;&lt;creating a single venv for all activitywatch repos#green&gt;&gt; &lt;&lt;relying on poetry to setup a per-folder venv is not an option#red&gt;&gt; &lt;&lt;trayicon manager (Recommended for normal use&gt;&gt; &lt;&lt;Start each module separately (Recommended for developing#green&gt;&gt; &lt;&lt;--testing#green&gt;&gt; &lt;&lt;server on a different port (5666)&gt;&gt; &lt;&lt;separate database file&gt;&gt; &lt;&lt;make uninstall#green&gt;&gt; &lt;&lt;make build@2#green&gt;&gt; &lt;&lt;remove the virtualenv and start over#green&gt;&gt; &lt;&lt;rust server, run with: aw-server-rust/target/package/aw-server-rust#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://aur.archlinux.org/packages/activitywatch-bin" id="949">
        <title>AUR (en) - activitywatch-bin</title>
      </bookmark>
    </folder>
    <folder id="395">
      <title>Apache Parquet/Arrow</title>
      <bookmark href="https://github.com/travisbrown/parquetry" id="950">
        <title>travisbrown/parquetry</title>
      </bookmark>
    </folder>
    <folder id="396">
      <title>LogDNA Mezmo</title>
      <bookmark href="https://github.com/logdna/logdna-agent-v2" id="951">
        <title>logdna/logdna-agent-v2: The blazingly fast, resource efficient log collection client#__#&lt;&lt;Kubernetes 1.9+&gt;&gt; &lt;&lt;Red Hat OpenShift 4.5+&gt;&gt; &lt;&lt;as Non-Root&gt;&gt; &lt;&lt;build the agent: as a docker image&gt;&gt; &lt;&lt;Linux binary&gt;&gt; CJP10&lt;&lt;flavor of globber syntax&gt;&gt; &lt;&lt;deployed as a Kubernetes DaemonSet, creating one pod per node&gt;&gt; &lt;&lt;collects logs of all the pods in the node&gt;&gt; &lt;&lt;at least 128Mib and no more than 512Mib&gt;&gt; &lt;&lt;at least twenty millicpu&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/logdna/logdna-agent-v2/blob/master/docs/INTERNAL_METRICS.md" id="952">
        <title>logdna-agent-v2/INTERNAL_METRICS.md at master · logdna/logdna-agent-v2#__#&lt;&lt;agent&apos;s Prometheus&gt;&gt; &lt;&lt;LOGDNA_METRICS_PORT@1&gt;&gt; &lt;&lt;9881&gt;&gt; &lt;&lt;metrics that are agent-related, use the prefix logdna_agent_&gt;&gt; &lt;&lt;process status information (e.g.memory and CPU usage), use the prefix process_&gt;&gt; &lt;&lt;Prometheus implements service discovery within Kubernetes&gt;&gt; &lt;&lt;automatically scraping Kubernetes resources that define the annotations&gt;&gt; &lt;&lt;You only need to specify the annotations in the agent DaemonSet metadata template for Prometheus&gt;&gt; &lt;&lt;to scrape the metrics from each pod&gt;&gt; &lt;&lt;annotations:&gt;&gt; &lt;&lt;prometheus.io/scrape: &quot;true&quot;&gt;&gt; &lt;&lt;agent also publishes its internal metrics every minute as a log line&gt;&gt; &lt;&lt;useful in older versions for observability&gt;&gt; &lt;&lt;Prometheus metrics provide further detail and granularity#green&gt;&gt; &lt;&lt;than log#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/logdna/async-buf-pool-rs" id="953">
        <title>logdna/async-buf-pool-rs</title>
      </bookmark>
      <bookmark href="https://prometheus.io/docs/introduction/overview/" id="954">
        <title>Overview | Prometheus#__#&lt;&lt;time series&gt;&gt; &lt;&lt;with the timestamp&gt;&gt; &lt;&lt;optional key-value pairs called labels&gt;&gt; &lt;&lt;multi-dimensional data#green&gt;&gt; &lt;&lt;identified by metric name&gt;&gt; &lt;&lt;PromQL&gt;&gt; &lt;&lt;no reliance on distributed storage&gt;&gt; &lt;&lt;single server nodes are autonomous#green&gt;&gt; &lt;&lt;collection happens via a pull model over HTTP#blue&gt;&gt; &lt;&lt;pushing&gt;&gt; &lt;&lt;intermediary gateway#blue&gt;&gt; &lt;&lt;targets are discovered&gt;&gt; &lt;&lt;or static configuration&gt;&gt; &lt;&lt;metrics are numeric&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://boards.greenhouse.io/logdna/jobs/5025036002" id="955">
        <title>Job Application for Senior Software Engineer, Backend at Mezmo#__#that was 2021&lt;&lt;Last year&gt;&gt; &lt;&lt;triple digit revenue growth&gt;&gt; &lt;&lt;800 new customers&gt;&gt; &lt;&lt;scale#green&gt;&gt; &lt;&lt;petabyte per day&gt;&gt; &lt;&lt;distributed&gt;&gt; &lt;&lt;computer science&gt;&gt; &lt;&lt;SaaS&gt;&gt; &lt;&lt;product quality&gt;&gt; &lt;&lt;customer success&gt;&gt; &lt;&lt;Node.js&gt;&gt; &lt;&lt;ElasticSearch#green&gt;&gt; &lt;&lt;Kubernetes@1&gt;&gt; &lt;&lt;Azure&gt;&gt; &lt;&lt;REST&gt;&gt; &lt;&lt;Redis#green&gt;&gt; &lt;&lt;MongoDB#green&gt;&gt; &lt;&lt;RabbitMQ#green&gt;&gt; &lt;&lt;Kafka#green&gt;&gt; &lt;&lt;Data mining&gt;&gt; &lt;&lt;machine learning&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="397">
      <title>Meilisearch</title>
      <bookmark href="https://www.meilisearch.com/docs/learn/core_concepts/documents" id="956">
        <title>Meilisearch Documentation#__#&lt;&lt;strings, a value can contain at most 65535 positions#red&gt;&gt; &lt;&lt;If a field contains an object&gt;&gt; &lt;&lt;flattens&gt;&gt; &lt;&lt;dot notation&gt;&gt; &lt;&lt;brings the object&apos;s keys and values&gt;&gt; &lt;&lt;root level of the document&gt;&gt; &lt;&lt;ranking&gt;&gt; &lt;&lt;which fields are more relevant&gt;&gt; &lt;&lt;designate certain fields as displayed&gt;&gt; &lt;&lt;searchable@1&gt;&gt; &lt;&lt;SDKs/libraries&gt;&gt; &lt;&lt;Comparison to alternatives&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/overview" id="957">
        <title>Meilisearch Documentation#__#&lt;&lt;RESTful&gt;&gt; &lt;&lt;&lt; 50 milliseconds&gt;&gt; &lt;&lt;bespoke#red&gt;&gt; &lt;&lt;fits their needs&gt;&gt; &lt;&lt;Small-to-medium-sized businesses&gt;&gt; &lt;&lt;invisible costs on their user experience#red&gt;&gt; &lt;&lt;retention&gt;&gt; &lt;&lt;little configuration#green&gt;&gt; &lt;&lt;highly customizable#green&gt;&gt; &lt;&lt;each keystroke#green&gt;&gt; &lt;&lt;typos&gt;&gt; &lt;&lt;misspellings&gt;&gt; &lt;&lt;languages&gt;&gt; &lt;&lt;space as a word divider&gt;&gt; &lt;&lt;Return the whole document#blue&gt;&gt; &lt;&lt;common non-relevant words&gt;&gt; &lt;&lt;Highlighted search results&gt;&gt; &lt;&lt;define synonyms#green&gt;&gt; &lt;&lt;Search preview:&gt;&gt; &lt;&lt;without implementing a front-end&gt;&gt; &lt;&lt;instant search@1#green&gt;&gt; &lt;&lt;open source, easy to use, customizable&gt;&gt; &lt;&lt;most closely compares with Algolia&gt;&gt; &lt;&lt;simpler to deploy&gt;&gt; &lt;&lt;maintain&gt;&gt; &lt;&lt;than other competitors&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks" id="958">
        <title>Meilisearch Documentation#__#&lt;&lt;docs-scraper&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/meilisearch/meilisearch-rust" id="959">
        <title>meilisearch/meilisearch-rust: Rust wrapper for the Meilisearch API.#__#&lt;&lt;meili-bors&gt;&gt; &lt;&lt;in the Browser with WASM&gt;&gt; &lt;&lt;Cargo.toml:&gt;&gt; &lt;&lt;futures = &quot;0.3&quot; # To be able to block#red&gt;&gt; &lt;&lt;if you are not using an async runtime#red&gt;&gt; &lt;&lt;crate is async#green&gt;&gt; &lt;&lt;sync feature to make most structs Sync#red&gt;&gt; &lt;&lt;slower#red&gt;&gt; &lt;&lt;possible without serde&gt;&gt; &lt;&lt;but a lot of features require serde#red&gt;&gt; &lt;&lt;download and run a Meilisearch&gt;&gt; &lt;&lt;./meilisearch --master-key=masterKey#green&gt;&gt; &lt;&lt;&quot;hits&quot;:&gt;&gt; &lt;&lt;&quot;offset&quot;:&gt;&gt; &lt;&lt;&quot;limit&quot;:&gt;&gt; &lt;&lt;&quot;processingTimeMs&quot;:&gt;&gt; &lt;&lt;&quot;query&quot;:&gt;&gt; &lt;&lt;client.index(&quot;movies_2&quot;).search().with_query(&quot;caorl&quot;).execute::&lt;Movie&gt;().await&gt;&gt; &lt;&lt;.with_attributes_to_highlight(Selectors::Some(&amp;[&quot;*&quot;]))#green&gt;&gt; &lt;&lt;&quot;_formatted&quot;:&gt;&gt; &lt;&lt;&lt;em&gt;Phil&lt;/em&gt;#green&gt;&gt; &lt;&lt;10#red&gt;&gt; &lt;&lt;20#red&gt;&gt; &lt;&lt;filterable_attributes = [&gt;&gt; &lt;&lt;set_filterable_attributes#green&gt;&gt; &lt;&lt;only need to perform this operation once&gt;&gt; &lt;&lt;will rebuild your index whenever you update filterableAttributes#red&gt;&gt; &lt;&lt;track the process using the tasks#green&gt;&gt; &lt;&lt;.with_filter(&quot;id &gt; 1 AND genres = Action&quot;)#green&gt;&gt; &lt;&lt;&quot;estimatedTotalHits&quot;:#green&gt;&gt; &lt;&lt;with WASM@1&gt;&gt; &lt;&lt;very different design than a CLI#red&gt;&gt; WASM demo&lt;&lt;see the our#red&gt;&gt; &lt;&lt;panic if no Window is available#red&gt;&gt; &lt;&lt;ex: Web extension#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=9902" id="960">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://crates.io/users/meili-bot" id="961">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;find flaky tests#green&gt;&gt; &lt;&lt;cargo-flaky&gt;&gt; &lt;&lt;deserr&gt;&gt; &lt;&lt;Deserialization#green&gt;&gt; &lt;&lt;focus on error handling#green&gt;&gt; &lt;&lt;madness&gt;&gt; &lt;&lt;mDNS server/client#green&gt;&gt; &lt;&lt;on tokio#green&gt;&gt; &lt;&lt;segment&gt;&gt; &lt;&lt;Segment analytics client#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.meilisearch.com/" id="962">
        <title>Meili crates browser 2000#__#&lt;&lt;code of this&gt;&gt; &lt;&lt;how we made this search&gt;&gt; &lt;&lt;design was taken from lib.rs#green&gt;&gt; &lt;&lt;every 10 minutes from docs.rs#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=190779" id="963">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/meilisearch/segment" id="964">
        <title>meilisearch/segment: Segment analytics client for Rust https://segment.com/docs/libraries/rust</title>
      </bookmark>
      <bookmark href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/philosophy" id="965">
        <title>Meilisearch Documentation#__#&lt;&lt;intuitive&gt;&gt; &lt;&lt;Front-facing&gt;&gt; Wikipedia: Trie&lt;&lt;prefix search&gt;&gt; &lt;&lt;not be your main data store#red&gt;&gt; &lt;&lt;only the data you want your users to search#green&gt;&gt; &lt;&lt;If you must add data that is irrelevant to search&gt;&gt; &lt;&lt;make those fields non-search#red&gt;&gt; &lt;&lt;queries should be sent directly from the front-end#green&gt;&gt; &lt;&lt;The more proxies#red&gt;&gt; &lt;&lt;the slower#red&gt;&gt; &lt;&lt;search experience@1&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="398">
      <title>rome.tools</title>
      <bookmark href="https://github.com/rome/tools/issues/2262" id="966">
        <title>☂️ JSX Formatting Support · Issue #2262 · rome/tools</title>
      </bookmark>
      <bookmark href="https://rome.tools/#development-status=" id="967">
        <title>Development Status — Rome Toolchain</title>
      </bookmark>
      <bookmark href="https://craftinginterpreters.com/representing-code.html" id="968">
        <title>Representing Code · Crafting Interpreters</title>
      </bookmark>
      <bookmark href="https://reactjs.org/docs/introducing-jsx.html" id="969">
        <title>Introducing JSX – React</title>
      </bookmark>
      <bookmark href="https://play.rome.tools/#lineWidth=80&amp;indentStyle=tab&amp;indentWidth=2&amp;typescript=false&amp;jsx=false" id="970">
        <title>Rome Playground</title>
      </bookmark>
    </folder>
    <folder id="399">
      <title>Segment</title>
      <bookmark href="https://github.com/segmentio/analytics-rust" id="971">
        <title>segmentio/analytics-rust: Segment analytics client for Rust</title>
      </bookmark>
    </folder>
    <folder id="400">
      <title>Trustfall</title>
      <bookmark href="https://github.com/obi1kenobi/trustfall/blob/main/README.md" id="972">
        <title>trustfall/README.md at main · obi1kenobi/trustfall</title>
      </bookmark>
      <bookmark href="https://predr.ag/blog/speeding-up-rust-semver-checking-by-over-2000x/" id="973">
        <title>Speeding up Rust semver-checking by over 2000x</title>
      </bookmark>
    </folder>
    <folder id="401">
      <title>Warp (terminal)</title>
      <bookmark href="https://www.commands.dev/" id="974">
        <title>Commands.dev - Find commands at the speed of thought</title>
      </bookmark>
      <bookmark href="https://github.com/warpdotdev/workflows/blob/main/README.md" id="975">
        <title>workflows/README.md at main · warpdotdev/workflows</title>
      </bookmark>
      <bookmark href="https://github.com/warpdotdev/Warp/blob/main/README.md" id="976">
        <title>Warp/README.md at main · warpdotdev/Warp#__#&lt;&lt;issues-only repo#blue&gt;&gt; &lt;&lt;without joining a wait-list#red&gt;&gt; &lt;&lt;Web (WASM)&gt;&gt; &lt;&lt;release an update weekly, typically on Thursdays&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/warp-drive" id="977">
        <title>Warp Drive | Warp Documentation#__#&lt;&lt;offline mode, some files will be read-only#red&gt;&gt; &lt;&lt;can still create and edit files while offline#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/full-screen-apps" id="978">
        <title>Full-screen Apps | Warp Documentation#__#&lt;&lt;alt-grid apps&gt;&gt; &lt;&lt;Vim&gt;&gt; &lt;&lt;Emacs&gt;&gt; &lt;&lt;sending mouse&gt;&gt; &lt;&lt;scroll events&gt;&gt; &lt;&lt;to the alt-grid.&gt;&gt; &lt;&lt;ANSI escape sequences&gt;&gt; &lt;&lt;mouse event to go to Warp instead#red&gt;&gt; &lt;&lt;for example&gt;&gt; &lt;&lt;text selection#green&gt;&gt; &lt;&lt;without disabling mouse reporting#green&gt;&gt; &lt;&lt;hold the SHIFT key#green&gt;&gt; &lt;&lt;Toggle Mouse Reporting#green&gt;&gt; &lt;&lt;CMD-R#green&gt;&gt; &lt;&lt;Settings &gt; Features &gt; Enable Mouse Reporting&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/appearance/pane-dimming" id="979">
        <title>Pane Dimming | Warp Documentation#__#&lt;&lt;dimming inactive Panes&gt;&gt; &lt;&lt;easily see which pane is active&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/appearance/compact-mode" id="980">
        <title>Compact Mode | Warp Documentation#__#&lt;&lt;Command Palette@1&gt;&gt; &lt;&lt;&quot;Compact mode&quot; to toggle&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/appearance/tab-indicators" id="981">
        <title>Tab Indicators | Warp Documentation#__#&lt;&lt;two specific conditions:&gt;&gt; &lt;&lt;current pane is maximized&gt;&gt; &lt;&lt;a command exits with an error#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/command-palette" id="982">
        <title>Command Palette | Warp Documentation#__#&lt;&lt;locate Workflows#green&gt;&gt; &lt;&lt;Notebooks#green&gt;&gt; &lt;&lt;keyboard shortcuts#green&gt;&gt; &lt;&lt;actions#green&gt;&gt; &lt;&lt;SHIFT-CTRL-P#green&gt;&gt; &lt;&lt;workflows: or w:#green&gt;&gt; &lt;&lt;sessions:#green&gt;&gt; &lt;&lt;launch_configs:#green&gt;&gt; &lt;&lt;actions:#green&gt;&gt; &lt;&lt;Warp-specific actions#green&gt;&gt; &lt;&lt;settings and features#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/warp-drive/warp-drive-on-the-web-beta" id="983">
        <title>Warp Drive on the Web [Beta] | Warp Documentation#__#&lt;&lt;Access your Drive objects and Shared Sessions wherever#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=393099" id="1305">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/blocks" id="1306">
        <title>Blocks | Warp Documentation#__#&lt;&lt;commands and outputs&gt;&gt; &lt;&lt;easily:&gt;&gt; &lt;&lt;Re-input commands&gt;&gt; &lt;&lt;Share both a command and its output&gt;&gt; &lt;&lt;with formatting!#green&gt;&gt; &lt;&lt;Bookmark commands&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/blocks/block-basics" id="1307">
        <title>Block Basics | Warp Documentation#__#&lt;&lt;Input Editor&gt;&gt; &lt;&lt;pin to the bottom, pin to the top&gt;&gt; &lt;&lt;start at the top&gt;&gt; &lt;&lt;Blocks grow&gt;&gt; &lt;&lt;bottom to the top&gt;&gt; &lt;&lt;color-coded#green&gt;&gt; &lt;&lt;quit with a non-zero exit code#red&gt;&gt; &lt;&lt;red background#red&gt;&gt; &lt;&lt;red sidebar#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/blocks/block-actions" id="1308">
        <title>Block Actions | Warp Documentation</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=571815" id="1309">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/warp-drive/workflows" id="1310">
        <title>Workflows | Warp Documentation#__#&lt;&lt;parameterized command@1&gt;&gt; &lt;&lt;with descriptions&gt;&gt; &lt;&lt;arguments&gt;&gt; &lt;&lt;searchable&gt;&gt; &lt;&lt;indefinitely support the YAML Workflows#green&gt;&gt; &lt;&lt;includes personal and community workflows#green&gt;&gt; &lt;&lt;from an open-source repository#green&gt;&gt; &lt;&lt;can continue to access your .yaml file workflow#green&gt;&gt; &lt;&lt;Command Search or the Command Palette.#green&gt;&gt; &lt;&lt;However, these file-based workflows#red&gt;&gt; &lt;&lt;not be available to access, organize, or share in Warp Drive#red&gt;&gt; &lt;&lt;can also export Warp Drive workflows as .yaml files#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/entry/yaml-workflows" id="1311">
        <title>YAML Workflows | Warp Documentation#__#&lt;&lt;can continue to use YAML-based workflows&gt;&gt; &lt;&lt;but we recommend using new workflows in Warp Drive instead#green&gt;&gt; &lt;&lt;better editing experience#green&gt;&gt; &lt;&lt;Different from Aliases#red&gt;&gt; &lt;&lt;need to context switch#red&gt;&gt; &lt;&lt;attaching documentation#green&gt;&gt; &lt;&lt;search or share#green&gt;&gt; &lt;&lt;parameterize@1#green&gt;&gt; &lt;&lt;${XDG_DATA_HOME:-$HOME/.local/share}/warp-terminal/workflows/#green&gt;&gt; &lt;&lt;{{path_to_git_repo}}/.warp/workflows/#green&gt;&gt; &lt;&lt;create a workflow subdirectory within#green&gt;&gt; &lt;&lt;if the file format is valid Warp&gt;&gt; &lt;&lt;should automatically load it into the Workflows menu#green&gt;&gt; &lt;&lt;Add your workflow’s .yaml file to this directory&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/warp-drive/notebooks" id="1312">
        <title>Notebooks | Warp Documentation#__#&lt;&lt;markdown text&gt;&gt; &lt;&lt;unnable shell snippets#green&gt;&gt; &lt;&lt;export Notebooks in .md#green&gt;&gt; &lt;&lt;insert a Command block#green&gt;&gt; &lt;&lt;specify the language as “Shell”#green&gt;&gt; &lt;&lt;simplify terminal work#green&gt;&gt; &lt;&lt;arguments to Command Blocks#green&gt;&gt; &lt;&lt;parameters in the same format as Workflows.&gt;&gt; &lt;&lt;{{double_curly_brackets}}&gt;&gt; &lt;&lt;notebook is shared with a team&gt;&gt; &lt;&lt;all team members will have access to edit#red&gt;&gt; &lt;&lt;only one editor is allowed at a given time#red&gt;&gt; &lt;&lt;Opening the notebook while there is an active editor#red&gt;&gt; &lt;&lt;open the notebook in Viewing mode#red&gt;&gt; &lt;&lt;mode (view vs edit)#green&gt;&gt; &lt;&lt;toggled above the notebook’s title#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=726945" id="1313">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/sessions/launch-configurations" id="1314">
        <title>Launch Configurations | Warp Documentation#__#&lt;&lt;windows, tab, and panes&gt;&gt; &lt;&lt;per project#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/sessions/session-navigation" id="1396">
        <title>Session Navigation | Warp Documentation#__#&lt;&lt;quickly navigate&gt;&gt; &lt;&lt;keyboard or mouse&gt;&gt; &lt;&lt;terminal sessions you are looking for&gt;&gt; &lt;&lt;Command Palette#green&gt;&gt; &lt;&lt;session &gt;#green&gt;&gt; &lt;&lt;or type&gt;&gt; &lt;&lt;sessions:#green&gt;&gt; &lt;&lt;searching&gt;&gt; &lt;&lt;by prompt#green&gt;&gt; &lt;&lt;currently running command#green&gt;&gt; &lt;&lt;last run command#green&gt;&gt; &lt;&lt;command status#green&gt;&gt; &lt;&lt;Running&gt;&gt; &lt;&lt;Completed 10 minutes ago&gt;&gt; &lt;&lt;Empty Session&gt;&gt; &lt;&lt;ordered by recency#green&gt;&gt; &lt;&lt;most recently focused#green&gt;&gt; &lt;&lt;not have PS1 support#red&gt;&gt; &lt;&lt;can only show Warp&apos;s native prompt#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/sessions/session-restoration" id="1397">
        <title>Session Restoration | Warp Documentation#__#&lt;&lt;enabled by default&gt;&gt; &lt;&lt;opening windows at a specific position is not supported in Wayland#red&gt;&gt; &lt;&lt;Settings &gt; Features&gt;&gt; &lt;&lt;SQLite&gt;&gt; &lt;&lt;Toggling off Session Restoration will not clear#red&gt;&gt; &lt;&lt;.local/state}/warp-terminal/warp.sqlite&quot;&gt;&gt; &lt;&lt;Clear the blocks from your running Warp session#green&gt;&gt; &lt;&lt;CTRL-SHIFT-K#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=993903" id="1398">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://app.warp.dev/get_warp" id="1399">
        <title>Warp#__#dropdown &gt; .pkg.tar.zst &gt; save &gt; Manjaro &gt; Windows Key &gt; Install from .zst!&lt;&lt;get Warp&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/getting-started/privacy" id="1400">
        <title>Privacy | Warp Documentation</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/appearance/themes" id="1401">
        <title>Themes | Warp Documentation</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/integrations-and-plugins" id="1402">
        <title>Integrations | Warp Documentation#__#&lt;&lt;SHIFT-CMD-C while in VSCode&gt;&gt; &lt;&lt;Code -&gt; Settings -&gt; Settings. Type in &quot;terminal&quot; and change Terminal &gt; External&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/getting-started/using-warp-with-shells" id="1403">
        <title>Using Warp with [zsh|bash|fish] | Warp Documentation#__#&lt;&lt;supports bash, fish, and zsh&gt;&gt; &lt;&lt;If you run into issues configuring your RC files (~/.bashrc, ~/.zshrc, config.fish) with Warp,#red&gt;&gt; &lt;&lt;Configuring and debugging your RC files#green&gt;&gt; &lt;&lt;Settings &gt; Features&gt;&gt; &lt;&lt;Session section&gt;&gt; &lt;&lt;&quot;Startup shell for new sessions&quot;&gt;&gt; &lt;&lt;system&apos;s default shell&gt;&gt; &lt;&lt;chsh -s $(which bash)&gt;&gt; &lt;&lt;bashrc file@4&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/appearance/prompt" id="1404">
        <title>Prompt | Warp Documentation#__#&lt;&lt;Starship Settings&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/appearance/input-position" id="1405">
        <title>Input Position | Warp Documentation#__#&lt;&lt;default, Warp starts with input pinned to the bottom&gt;&gt; &lt;&lt;pin to the top,”&gt;&gt; &lt;&lt;input/output will flow down&gt;&gt; &lt;&lt;n reverse order#red&gt;&gt; &lt;&lt;latest results at the top.&gt;&gt; &lt;&lt;For long-running commands#red&gt;&gt; &lt;&lt;click &quot;Lock scrolling at bottom of block&quot;#green&gt;&gt; &lt;&lt;continue to follow the stdout#green&gt;&gt; &lt;&lt;Start at the top (Classic mode)#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/notifications" id="1508">
        <title>Notifications &amp; Audible Bell | Warp Documentation#__#&lt;&lt;when a command completes after a configurable number of seconds&gt;&gt; &lt;&lt;or&gt;&gt; &lt;&lt;when a running command needs you to enter a password to proceed#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=417893" id="1509">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/teams" id="1510">
        <title>Teams | Warp Documentation#__#&lt;&lt;can make their teams discoverable&gt;&gt; &lt;&lt;from the same email domain#red&gt;&gt; &lt;&lt;ny new user who joins the team will add a prorated charge#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.warp.dev/features/session-sharing" id="1511">
        <title>Session Sharing (Beta) | Warp Documentation#__#&lt;&lt;explicitly opt-in&gt;&gt; &lt;&lt;on a Team plan#red&gt;&gt; &lt;&lt;option to share without scrollback&gt;&gt; &lt;&lt;or from the start of the session&gt;&gt; &lt;&lt;If you initiate a shared session using Block actions&gt;&gt; &lt;&lt;will be given the option to start sharing from the selected block onwards&gt;&gt; &lt;&lt;During the Beta, it’s critical you only share your session links in private channels#red&gt;&gt; &lt;&lt;Multiple shared sessions#green&gt;&gt; &lt;&lt;in Beta, anybody who has access to a share link#red&gt;&gt; &lt;&lt;session size limit of 100MB per user per session#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.warp.dev/pricing" id="1512">
        <title>Pricing and plans for Warp#__#&lt;&lt;All offline terminal features&gt;&gt; &lt;&lt;3 shared Notebooks&gt;&gt; &lt;&lt;10 shared Workflows&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stripe.com/legal/restricted-businesses" id="1513">
        <title>Prohibited and Restricted Businesses | Stripe</title>
      </bookmark>
    </folder>
    <folder id="402">
      <title>WebDav</title>
      <bookmark href="https://github.com/miquels/webdav-server-rs" id="984">
        <title>miquels/webdav-server-rs: webdav server in rust#__#&lt;&lt;in rust&gt;&gt; &lt;&lt;Linux-only, since the server is threaded#green&gt;&gt; &lt;&lt;no other OSes have support for thread-local credentials#red&gt;&gt; &lt;&lt;local unix accounts&gt;&gt; &lt;&lt;not implement logging&gt;&gt; &lt;&lt;RFC4918: webdav, full support&gt;&gt; &lt;&lt;partial put support#green&gt;&gt; &lt;&lt;default the server builds with pam and quota#red&gt;&gt; &lt;&lt;cargo build --release --no-default-features#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/31708957/how-to-make-file-read-only-when-exposed-through-webdav" id="985">
        <title>jackrabbit - How to make file READ ONLY when exposed through WebDAV - Stack Overflow#__#&lt;&lt;WebDAV uses RFC3744 for access control&gt;&gt; &lt;&lt;However, most WebDAV clients ignore#red&gt;&gt; &lt;&lt;pretend that the entire server is either read-write&gt;&gt; &lt;&lt;read-only&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/niuhuan/wdav-rs" id="986">
        <title>niuhuan/wdav-rs: [RUST][BIN] Quick start a webdav server#__#&lt;&lt;-f, --folder&gt;&gt; &lt;&lt;default: .#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/messense/dav-server-rs" id="987">
        <title>messense/dav-server-rs: Rust WebDAV server library. A fork of the webdav-handler crate.#__#&lt;&lt;fork of the webdav-handler-rs#red&gt;&gt; &lt;&lt;fork of the webdav-handler-rs#red&gt;&gt; &lt;&lt;standard http types from the http and http_body crates#green&gt;&gt; &lt;&lt;hyper@1#green&gt;&gt; &lt;&lt;Compatibility modules for actix-web and warp#red&gt;&gt; &lt;&lt;Webdav Litmus Test testsuit#green&gt;&gt; &lt;&lt;preconditions&gt;&gt; &lt;&lt;partial transfers (Range)#green&gt;&gt; &lt;&lt;partial PUT#green&gt;&gt; &lt;&lt;two non-standard ways#red&gt;&gt; &lt;&lt;PUT with the Content-Range header, which is what Apache&apos;s mod_dav&gt;&gt; &lt;&lt;PATCH with the X-Update-Range header from SabreDav&gt;&gt; &lt;&lt;two filesystems:&gt;&gt; &lt;&lt;LocalFs: serves a directory on the local&gt;&gt; &lt;&lt;MemFs: ephemeral in-memory#green&gt;&gt; &lt;&lt;two locksystems:&gt;&gt; &lt;&lt;MemLs: ephemeral in-memory#green&gt;&gt;&lt;&lt;RUST_LOG=dav_server=debug#green&gt;&gt; &lt;&lt;--example sample-litmus-server#green&gt;&gt; &lt;&lt;in-memory filesystem@2#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/thecoshman/http" id="988">
        <title>thecoshman/http: Host These Things Please - a basic http server for hosting a folder fast and simply</title>
      </bookmark>
    </folder>
    <folder id="403">
      <title>zOther</title>
      <bookmark href="https://github.com/utam0k/youki" id="989">
        <title>utam0k/youki: An experimental container runtime written in Rust</title>
      </bookmark>
      <bookmark href="https://github.com/dalance/amber" id="990">
        <title>dalance/amber: A code search / replace tool</title>
      </bookmark>
      <bookmark href="https://kbknapp.dev/shell-completions/" id="991">
        <title>Kevin K&apos;s Blog - CLI Shell Completions in Rust</title>
      </bookmark>
      <bookmark href="https://github.com/AleoHQ/snarkOS" id="992">
        <title>AleoHQ/snarkOS: A Decentralized Operating System for Zero-Knowledge Applications</title>
      </bookmark>
      <bookmark href="https://www.seaplane.io/blog/a-year-of-cloud-conversations" id="993">
        <title>A Year of Cloud Conversations — Seaplane#__#&lt;&lt;cloud-native&gt;&gt; &lt;&lt;with users in more than one cloud region&gt;&gt; &lt;&lt;Startups are interesting because they care about velocity&gt;&gt; &lt;&lt;geographically optimized&gt;&gt; &lt;&lt;respecting local data regulations&gt;&gt; &lt;&lt;multiple providers&gt;&gt; &lt;&lt;feedback to be qualitative&gt;&gt; &lt;&lt;an individual engineer can&apos;t reason#red&gt;&gt; &lt;&lt;what is happening#red&gt;&gt; &lt;&lt;single human being can&apos;t pull this together#red&gt;&gt; &lt;&lt;even the ones with the time and resources to execute, decided not to go multi-region#red&gt;&gt; &lt;&lt;Multi-cloud was an even sorer#red&gt;&gt; &lt;&lt;most of the multi-cloud deployments we encountered were a result of mergers and acquisitions#red&gt;&gt; &lt;&lt;latency@1#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/seaplane-candidates/candidate-b14fada" id="994">
        <title>seaplane-candidates/candidate-b14fada#__#&lt;&lt;schedule-tasks&gt;&gt; &lt;&lt;infinite computers are available&gt;&gt; &lt;&lt;limited only by the dependencies between tasks&gt;&gt; &lt;&lt;need to warn us how many computers you&apos;re going to take in the worst case#red&gt;&gt; &lt;&lt;how long you need them for#red&gt;&gt; &lt;&lt;no cycles in the task dependencies#green&gt;&gt; &lt;&lt;Input files may contain mistakes#red&gt;&gt; &lt;&lt;For correct input#red&gt;&gt; &lt;&lt;critical path of your schedule#red&gt;&gt; &lt;&lt;ongest chain of tasks in your run#red&gt;&gt; &lt;&lt;minimum duration#red&gt;&gt; &lt;&lt;maximum parallelism#red&gt;&gt; &lt;&lt;maximum number of tasks you schedule simultaneously#red&gt;&gt; &lt;&lt;all tasks take non-negative integer#green&gt;&gt; &lt;&lt;no task has circular dependencies#red&gt;&gt; &lt;&lt;incorrect input files you should print the line and column for the first error you discover#red&gt;&gt; &lt;&lt;./schedule-tasks test/3-independent-tasks.tasks.in#green&gt;&gt; &lt;&lt;design document written in markdown#green&gt;&gt; &lt;&lt;short description of the tools#green&gt;&gt; &lt;&lt;Rust installation#green&gt;&gt; &lt;&lt;build / interpreters#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/xlpf3h/the_industry_coefficient_of_some_widely_used_rust/" id="995">
        <title>The &quot;Industry Coefficient&quot; of some widely used Rust crates : rust</title>
      </bookmark>
      <bookmark href="https://github.com/oxc-project/oxc" id="996">
        <title>oxc-project/oxc: ⚓ A collection of JavaScript tools written in Rust.#__#&lt;&lt;TypeScript&gt;&gt; &lt;&lt;in Rust&gt;&gt; &lt;&lt;vscode0 repository, which finishes linting 4000+ files in 0.5 seconds&gt;&gt; &lt;&lt;install oxlint#red&gt;&gt; &lt;&lt;npx oxlint#red&gt;&gt; &lt;&lt;50 times faster than ESLint#green&gt;&gt; &lt;&lt;scales with the number of CPU cores#green&gt;&gt; &lt;&lt;ready-for-production#green&gt;&gt; &lt;&lt;significant#green&gt;&gt; &lt;&lt;fine-tune the Rust compilation speed#green&gt;&gt; &lt;&lt;Individual crates are published&gt;&gt; &lt;&lt;umbrella crate oxc&gt;&gt; &lt;&lt;warm runs complete in 5 minutes#blue&gt;&gt; &lt;&lt;How is it so fast?&gt;&gt; &lt;&lt;less than a second for most codebases with a few hundred files#green&gt;&gt; &lt;&lt;a few seconds for larger monorepos#green&gt;&gt; &lt;&lt;binary is approximately 5MB#green&gt;&gt; &lt;&lt;download the linter binary#green&gt;&gt; &lt;&lt;latest release#green&gt;&gt; &lt;&lt;Every single lint rule is tuned#green&gt;&gt; &lt;&lt;Module resolution#red&gt;&gt; &lt;&lt;often become a performance bottleneck#red&gt;&gt; &lt;&lt;porting all test cases#green&gt;&gt; &lt;&lt;well-known minifiers#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://medium.com/@singhezra/how-rust-saved-my-eyes-4c1e4061a13e" id="997">
        <title>How Rust Saved My Eyes | by Ezra Singh | Jan, 2024 | Medium | Medium</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/18xhds9/ocrs_a_new_open_source_ocr_engine_written_in_rust/" id="998">
        <title>(7) ocrs - A new open source OCR engine, written in Rust : rust</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/1aldku3/we_made_a_highperformance_screensharing_software/" id="1315">
        <title>Reddit - Dive into anything#__#&lt;&lt;screensharing software with Rust &amp; WebRTC#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/brocode/fw" id="1316">
        <title>brocode/fw: workspace productivity booster</title>
      </bookmark>
      <bookmark href="https://predr.ag/blog/how-to-query-almost-everything-hytradboi/" id="1317">
        <title>How to Query (Almost) Everything#__#&lt;&lt;Predrag&gt;&gt; &lt;&lt;annotated talk&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.freedium.cfd/https://tomaszs2.medium.com/41-rust-apps-you-should-know-megapack-ep-1-e0596c06cca2" id="1318">
        <title>41 Rust Apps You Should Know Megapack EP 1 | by Tom Smykowski - Freedium#__#&lt;&lt;Kata Containers&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=906080" id="1319">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://xorio.rs/" id="1320">
        <title>Passionate about Rust, and all STEM | xorio homepage#__#&lt;&lt;encrypted file system&gt;&gt; &lt;&lt;in Rust&gt;&gt; &lt;&lt;FUSE on Linux&gt;&gt; &lt;&lt;egui for the above rencfs-desktop&gt;&gt; &lt;&lt;GDrive client in Rust using fuse3&gt;&gt; &lt;&lt;gdrive-rs&gt;&gt; &lt;&lt;template for a Rust project using fuse3&gt;&gt; &lt;&lt;rust-fuse3-template&gt;&gt; &lt;&lt;in-mem filesystem&gt;&gt; &lt;&lt;fuser crate&gt;&gt; &lt;&lt;in-mem-fs&gt;&gt; &lt;&lt;Checks if the version in Cargo.toml&gt;&gt; &lt;&lt;changed since last time the job runned&gt;&gt; &lt;&lt;automatically perform additional steps&gt;&gt; &lt;&lt;action-check-version-changed-rust&gt;&gt; &lt;&lt;Distributed filesystem written in Rust&gt;&gt; &lt;&lt;rfs&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://syncoxide.rs/" id="1321">
        <title>SyncOxiders | SyncOxiders homepage#__#&lt;&lt;PoC phase#red&gt;&gt; &lt;&lt;rencfs&gt;&gt; &lt;&lt;gdrive-rs for accesing Google Drive&gt;&gt; &lt;&lt;we’ll use present tense for several functionality, even though they are not yet implemented#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=4954" id="1322">
        <title>-----</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="77">
    <title>Bindgen &amp; Minify (binary size) &amp; Link-optimized &amp; Linking</title>
    <bookmark href="https://github.com/tweedegolf/cargo-minify" id="404">
      <title>tweedegolf/cargo-minify: A tool to remove unused code from a Rust project.#__#&lt;&lt;Remove unused code&gt;&gt; &lt;&lt;Primarily aimed at generated code#blue&gt;&gt; &lt;&lt;bindgen&gt;&gt; &lt;&lt;bindings&gt;&gt; &lt;&lt;Public functions and types#red&gt;&gt; &lt;&lt;also in binaries#red&gt;&gt; &lt;&lt;examples@1#red&gt;&gt; &lt;&lt;not considered unused#red&gt;&gt; &lt;&lt;cargo install cargo-minify&gt;&gt; &lt;&lt;cargo minify&gt;&gt; &lt;&lt;cargo minify --apply&gt;&gt; &lt;&lt;precise minifcation&gt;&gt; &lt;&lt;--ignore&gt;&gt; &lt;&lt;followed by a wildcard&gt;&gt; &lt;&lt;excluded files&gt;&gt; &lt;&lt;--kinds&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/johnthagen/min-sized-rust" id="405">
      <title>johnthagen/min-sized-rust: 🦀 How to minimize Rust binary size 📦#__#&lt;&lt;default, Rust optimizes for execution speed#green&gt;&gt; &lt;&lt;compilation speed#green&gt;&gt; &lt;&lt;ease of debugging#green&gt;&gt; &lt;&lt;rather than binary size#red&gt;&gt; &lt;&lt;vast majority of applications this is ideal#blue&gt;&gt; &lt;&lt;cargo build --release&gt;&gt; &lt;&lt;Cargo.toml in&gt;&gt; &lt;&lt;[profile.release]&gt;&gt; &lt;&lt;strip = true  # Automatically strip symbols&gt;&gt; &lt;&lt;run strip directly on the .elf file&gt;&gt; &lt;&lt;defaults its optimization level to 3&gt;&gt; &lt;&lt;release builds&gt;&gt; &lt;&lt;for speed&gt;&gt; &lt;&lt;for minimal binary size, use the z#green&gt;&gt; &lt;&lt;opt-level = &quot;z&quot;  # Optimize for size&gt;&gt; &lt;&lt;in some cases the &quot;s&quot;#green&gt;&gt; &lt;&lt;may result in a smaller#green&gt;&gt; &lt;&lt;than &quot;z&quot;#red&gt;&gt; &lt;&lt;explained in the opt-level#blue&gt;&gt; &lt;&lt;default, Cargo instructs compilation units&gt;&gt; &lt;&lt;optimized in isolation#red&gt;&gt; &lt;&lt;LTO instructs the linker to optimize at the link stage#green&gt;&gt; &lt;&lt;remove dead code#green&gt;&gt; &lt;&lt;lto = true#green&gt;&gt; &lt;&lt;jemalloc is removed#blue&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=414010" id="406">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/dtolnay/linkme/blob/master/README.md" id="407">
      <title>linkme/README.md at master · dtolnay/linkme#__#&lt;&lt;#[distributed_slice]&gt;&gt; &lt;&lt;elements may be registered into a distributed slice by a #[distributed_slice(...)]&gt;&gt; &lt;&lt;or in any downstream crate#green&gt;&gt; &lt;&lt;Elements across all crates linked#green&gt;&gt; &lt;&lt;safe&gt;&gt; &lt;&lt;cross-platform&gt;&gt; &lt;&lt;linker shenanigans&gt;&gt; &lt;&lt;rustc 1.62+&gt;&gt; &lt;&lt;static&gt;&gt; &lt;&lt;contiguous section of the binary&gt;&gt; &lt;&lt;link_section attributes&gt;&gt; &lt;&lt;platform-specific linker support#red&gt;&gt; &lt;&lt;not involve life-before-main#red&gt;&gt; &lt;&lt;any other runtime initialization#red&gt;&gt; &lt;&lt;zero-cost#green&gt;&gt; &lt;&lt;entirely during compilation and linking&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="78">
    <title>Contribute</title>
    <bookmark href="https://rustc-dev-guide.rust-lang.org/contributing.html" id="408">
      <title>Introduction - Guide to Rustc Development#__#&lt;&lt;./x.py test tidy --bless#green&gt;&gt; &lt;&lt;every new commit#red&gt;&gt; &lt;&lt;no merge-commit policy,#red&gt;&gt; &lt;&lt;always rebase&gt;&gt; &lt;&lt;When you resolve&gt;&gt; &lt;&lt;@rustbot@3#green&gt;&gt; &lt;&lt;@rustbot label -S-waiting-on-author +S-waiting-on-review#green&gt;&gt; &lt;&lt;closing issues#green&gt;&gt; &lt;&lt;keywords. This feature should be used#green&gt;&gt; &lt;&lt;&quot;closes #123&quot; text in the PR description#green&gt;&gt; &lt;&lt;rather than the issue commit#red&gt;&gt; &lt;&lt;during rebasing, citing the issue number in the commit can &quot;spam&quot;#red&gt;&gt; &lt;&lt;encouraged!) to use the CI to test your changes#green&gt;&gt; &lt;&lt;don&apos;t recommend running the full ./x.py test suite locally#red&gt;&gt; &lt;&lt;@rustbot@1&gt;&gt; &lt;&lt;r?#green&gt;&gt; &lt;&lt;random reviewer from a specific team#green&gt;&gt; &lt;&lt;r? rust-lang/groupname#green&gt;&gt; &lt;&lt;r? rust-lang/diagnostics#green&gt;&gt; &lt;&lt;full list of possible groupname&gt;&gt; &lt;&lt;adhoc_groups section at the triagebot.toml#green&gt;&gt; &lt;&lt;or the list of teams in the rust-lang teams#green&gt;&gt; &lt;&lt;@bors r+#green&gt;&gt; &lt;&lt;that your pull request has been approved&gt;&gt; &lt;&lt;PR then enters the merge queue&gt;&gt; &lt;&lt;where#green&gt;&gt; &lt;&lt;scale of the change&gt;&gt; &lt;&lt;@bors r+ rollup&gt;&gt; &lt;&lt;that this change should always be &quot;rolled up&quot;#green&gt;&gt; &lt;&lt;tested and merged alongside other PRs#green&gt;&gt; &lt;&lt;speed&gt;&gt; &lt;&lt;Typically only small changes&gt;&gt; &lt;&lt;expected not to conflict with one another#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rustc-dev-guide.rust-lang.org/git.html" id="409">
      <title>Using Git - Guide to Rustc Development#__#&lt;&lt;after rebasing or pulling-and-rebasing&gt;&gt; &lt;&lt;git push --force-with-lease#green&gt;&gt; &lt;&lt;track upstream&gt;&gt; &lt;&lt;long-running feature/issue,#red&gt;&gt; &lt;&lt;up to date@1#green&gt;&gt; &lt;&lt;git pull upstream master --ff-only@1#green&gt;&gt; &lt;&lt;To avoid merges#red&gt;&gt; &lt;&lt;git config pull.ff only#green&gt;&gt; &lt;&lt;will apply the config only to the local repo&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md" id="410">
      <title>rfcs/1574-more-api-documentation-conventions.md at master · rust-lang/rfcs#__#&lt;&lt;API Documentation Conventions#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rustc-dev-guide.rust-lang.org/compiler-debugging.html" id="411">
      <title>Debugging the Compiler - Guide to Rustc Development</title>
    </bookmark>
    <bookmark href="https://rustc-dev-guide.rust-lang.org/tracing.html" id="412">
      <title>Using the tracing/logging instrumentation - Guide to Rustc Development</title>
    </bookmark>
    <bookmark href="https://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/" id="413">
      <title>Rust Bug Minimization Patterns - The {pnk}f(eli)x Blog</title>
    </bookmark>
    <bookmark href="https://rustc-dev-guide.rust-lang.org/incrcomp-debugging.html" id="414">
      <title>Debugging and Testing - Guide to Rustc Development#__#&lt;&lt;#[rustc_if_this_changed]#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md" id="415">
      <title>rust/CONTRIBUTING.md at master · rust-lang/rust#__#&lt;&lt;recommended#green&gt;&gt; &lt;&lt;ask for help on the rust-zulip#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rust/issues/109407" id="416">
      <title>Allow passing the --nocapture flag to compiletest · Issue #109407 · rust-lang/rust#__#&lt;&lt;@rustbot claim#green&gt;&gt; &lt;&lt;rustbot assigned&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://std-dev-guide.rust-lang.org/development/building-and-debugging.html" id="417">
      <title>Building and debugging libraries - Standard library developers Guide</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/rustc-dev-guide/issues/443" id="1137">
      <title>Explain how to use gdb to debug the compiler · Issue #443 · rust-lang/rustc-dev-guide</title>
    </bookmark>
    <bookmark href="https://rustc-dev-guide.rust-lang.org/conventions.html" id="1138">
      <title>Coding conventions - Rust Compiler Development Guide#__#&lt;&lt;standard coding style&gt;&gt; &lt;&lt;./x.py fmt&gt;&gt; &lt;&lt;comment towards the top of the file&gt;&gt; &lt;&lt;// ignore-tidy-linelength&gt;&gt; &lt;&lt;exhaustive matches&gt;&gt; &lt;&lt;Individual commits do not have to build&gt;&gt; &lt;&lt;cx tends to be short for &quot;context&quot; and is often used as a suffix&gt;&gt; &lt;&lt;tcx is a common name for the Typing Context&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Replicating.20CI.20job.20.22PR.20-.20x86_64-gnu-llvm-16.22.20locally" id="1139">
      <title>#general &gt; Replicating CI job &quot;PR - x86_64-gnu-llvm-16&quot; locally - rust-lang - Zulip</title>
    </bookmark>
  </folder>
  <folder id="79">
    <title>Crypto</title>
    <bookmark href="https://gendignoux.com/blog/2019/11/29/rust-2020.html" id="418">
      <title>Rust 2020 | Blog | Guillaume Endignoux</title>
    </bookmark>
    <bookmark href="https://github.com/dfaranha/bls12_381" id="419">
      <title>dfaranha/bls12_381: Implementation of the BLS12-381 pairing-friendly elliptic curve group#__#See also https://crates.io/crates/subtle&lt;&lt;bls12_381&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/y58v4k/hifitime_350_timers_and_chrono_alternative_only/" id="420">
      <title>Hifitime 3.5.0: time.rs and chrono alternative, only more precise, formally verified, and used in scientific and engineering programs : rust</title>
    </bookmark>
  </folder>
  <folder id="80">
    <title>dylib dynamic library</title>
    <bookmark href="https://github.com/rust-lang/rust/issues/34909" id="421">
      <title>Cannot link to `--crate-type dylib` · Issue #34909 · rust-lang/rust</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang/cargo/issues/3573" id="422">
      <title>How should dynamic linking work in Rust? · Issue #3573 · rust-lang/cargo</title>
    </bookmark>
  </folder>
  <folder id="81">
    <title>Maths</title>
    <folder id="423">
      <title>Precision</title>
      <folder id="999">
        <title>MPFR</title>
        <bookmark href="https://docs.rs/rug/1.11.0/rug/" id="1140">
          <title>rug - Rust#__#&lt;&lt;operations like &amp;a - &amp;b do not perform a complete#red&gt;&gt; &lt;&lt;While the allocations might not affect performance noticeably for computationally intensive#red&gt;&gt; &lt;&lt;they can have a much more significant effect on faster functions like addition#red&gt;&gt; &lt;&lt;operation itself does not convey information about what precision#red&gt;&gt; &lt;&lt;Assign them to an existing object#green&gt;&gt; &lt;&lt;Assign trait@2#green&gt;&gt; &lt;&lt;int.assign(incomplete)#green&gt;&gt; &lt;&lt;float.assign_round(incomplete, Round::Up)#green&gt;&gt; &lt;&lt;Convert them to the final value using the From#green&gt;&gt; &lt;&lt;and Float::with_val(53,#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://www.mpfr.org/mpfr-current/mpfr.html" id="1141">
          <title>GNU MPFR 4.1.0#__#&lt;&lt;on the stack (for temporary memory only)#red&gt;&gt; &lt;&lt;or with the same allocator as the one configured for GMP&gt;&gt; &lt;&lt;allocator must be valid in all threads where MPFR may be used#red&gt;&gt; &lt;&lt;data allocated in one thread may be reallocated and/or freed in some other thread#red&gt;&gt; &lt;&lt;any such value changed in a library function should be restored before the function returns#red&gt;&gt; &lt;&lt;Writers of libraries using MPFR#blue&gt;&gt; &lt;&lt;mpfr_swap (mpfr_t x, mpfr_t y)#red&gt;&gt; &lt;&lt;not permit it. This is the case when x and/or y were declared and initialized with MPFR_DECL_INIT#red&gt;&gt; &lt;&lt;much faster than using mpfr_init2#green&gt;&gt; &lt;&lt;should not create variables with huge precision#red&gt;&gt; &lt;&lt;MPFR needs to increase the precision internally#red&gt;&gt; &lt;&lt;all MPFR functions expect output arguments before input#blue&gt;&gt; &lt;&lt;MPFR allows you to use the same variable for both input and output#green&gt;&gt; &lt;&lt;flags, the exponent range, the default precision, and the default rounding mode&gt;&gt; &lt;&lt;global@3#red&gt;&gt; &lt;&lt;or per-thread@2#red&gt;&gt; but not for stack-based!&lt;&lt;use mpfr_swap instead of mpfr_set#red&gt;&gt; &lt;&lt;If the precision is set to a value greater than the maximum value for an int, it will be silently reduced#red&gt;&gt; &lt;&lt;mpfr_get_emin_min#green&gt;&gt; &lt;&lt;MPFR_RNDN mode works like roundTiesToEven#green&gt;&gt; &lt;&lt;avoids the drift phenomenon mentioned by Knuth#red&gt;&gt; &lt;&lt;ulp (unit in the last place)#blue&gt;&gt; &lt;&lt;MPFR_RNDF: faithful#blue&gt;&gt; &lt;&lt;MPFR_RNDF mode works as#red&gt;&gt; &lt;&lt;may not be reproducible#red&gt;&gt; &lt;&lt;int return a ternary#blue&gt;&gt; &lt;&lt;positive (resp. negative), it means the value stored in the destination variable is greater (resp. lower) than the exact result#blue&gt;&gt; &lt;&lt;infinite result, it is considered as inexact when it was obtained by overflow#red&gt;&gt; &lt;&lt;default rounding mode is rounding to nearest&gt;&gt; &lt;&lt;mpfr_custom_move#red&gt;&gt; &lt;&lt;any variable has a significand of fixed size#green&gt;&gt; &lt;&lt;unless you change its precision, or clear and reinitialize#red&gt;&gt; &lt;&lt;int mpfr_prec_round#red&gt;&gt; &lt;&lt;not use this function if x was initialized with MPFR_DECL_INIT@1#red&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://crates.io/crates/rug" id="1142">
          <title>rug - crates.io: Rust Package Registry#__#&lt;&lt;Float is a multi-precision floating-point number with correct rounding&gt;&gt; &lt;&lt;Complex is a multi-precision complex#green&gt;&gt; &lt;&lt;MPFR for floating&gt;&gt; &lt;&lt;MPC for complex#green&gt;&gt; &lt;&lt;Rug is a high-level interface to the following GNU libraries:#green&gt;&gt; &lt;&lt;serde, disabled by default#green&gt;&gt; &lt;&lt;features = [&quot;integer&quot;, &quot;float&quot;, &quot;rand&quot;]#green&gt;&gt; &lt;&lt;Here only the integer, float and rand features are enabled.#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://crates.io/crates/gmp-mpfr-sys" id="1143">
          <title>gmp-mpfr-sys - crates.io: Rust Package Registry</title>
        </bookmark>
        <bookmark href="https://www.mpfr.org/faq.html" id="1144">
          <title>Frequently Asked Questions about GNU MPFR#__#&lt;&lt;precision of a MPFR variable is the exact number of bits#green&gt;&gt; &lt;&lt;increase the stack size limit with the limit, unlimit or ulimit#green&gt;&gt; &lt;&lt;to store a floating-point constant to a mpfr_t, you should use mpfr_set_str (or#green&gt;&gt; &lt;&lt;mpfr_const_pi for π)#green&gt;&gt; &lt;&lt;instead of mpfr_set_d or mpfr_set_ld#red&gt;&gt; &lt;&lt;irst converted into a reduced-precision (e.g., 53-bit)#red&gt;&gt; &lt;&lt;particular for most exact decimal#red&gt;&gt;</title>
        </bookmark>
      </folder>
      <folder id="1000">
        <title>zOther</title>
        <bookmark href="https://crates.io/crates/twofloat" id="1145">
          <title>twofloat - crates.io: Rust Package Registry#__#&lt;&lt;double-double@1&gt;&gt; &lt;&lt;not the same as the IEEE quadruple-precision#red&gt;&gt; &lt;&lt;Instead, higher precision is obtained by representing the value as the sum of two non-overlapping f64 values#green&gt;&gt; &lt;&lt;mathematical functions (exp, powf, etc.) is very preliminary#red&gt;&gt; &lt;&lt;using operations at the same precision as the result#red&gt;&gt; &lt;&lt;not return values which are correct to the full precision of the TwoFloat#red&gt;&gt; &lt;&lt;serde_support#green&gt;&gt;</title>
        </bookmark>
        <bookmark href="https://github.com/rust-lang/libm/issues/242" id="1146">
          <title>FMA implementation producing incorrect results · Issue #242 · rust-lang/libm#__#&lt;&lt;issue with the FMA implementation when investigating creating a no_std version of my double-double arithmetic crate. It breaks the algorithm for multiplying two f64 values to produce a double-double, for which I am using algorithm 3 from Joldes et al. (2017)&gt;&gt;</title>
        </bookmark>
      </folder>
    </folder>
    <folder id="424">
      <title>zOther</title>
      <bookmark href="https://github.com/dimforge?type=source" id="1001">
        <title>dimforge</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/primitive.f32.html" id="1002">
        <title>f32 - Rust#__#&lt;&lt;1.0 / 5.0 results in 0.20000000298023223876953125#red&gt;&gt; &lt;&lt;println and friends will often discard insignificant digits#red&gt;&gt; &lt;&lt;-0.0 == 0.0#green&gt;&gt; &lt;&lt;∞ and −∞: these result from calculations like 1.0 / 0.0#green&gt;&gt; &lt;&lt;(-1.0).sqrt(). NaN#red&gt;&gt; &lt;&lt;unequal to any float, including itself!#red&gt;&gt; &lt;&lt;neither smaller nor greater than any float#red&gt;&gt; &lt;&lt;impossible to sort#red&gt;&gt; &lt;&lt;infectious as almost all calculations where one of the operands is NaN will also result in NaN#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/nightly/std/convert/trait.FloatToInt.html" id="1003">
        <title>FloatToInt in std::convert - Rust</title>
      </bookmark>
      <bookmark href="https://doc.rust-lang.org/core/num/struct.Wrapping.html" id="1940">
        <title>Wrapping in core::num - Rust#__#&lt;&lt;relies upon modular arithmetic&gt;&gt; &lt;&lt;e.g., hashing&gt;&gt; &lt;&lt;same layout and ABI as T#green&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="82">
    <title>Security - cargo audit, vet, review</title>
    <bookmark href="https://www.reddit.com/r/rust/comments/yk7l3w/cargo_audit_can_now_scan_compiled_binaries/" id="425">
      <title>`cargo audit` can now scan compiled binaries : rust#__#&lt;&lt;auditable#green&gt;&gt; &lt;&lt;not everyone is going to use cargo auditable#red&gt;&gt; &lt;&lt;some sort of stop-gap measure for binaries built without it is also needed#green&gt;&gt; &lt;&lt;recover some of the dependencies from any binary#green&gt;&gt; &lt;&lt;rustc is really good at removing panics!#red&gt;&gt; &lt;&lt;cargo install cargo-audit --features=binary-scanning#blue&gt;&gt; &lt;&lt;cargo audit bin ~/.cargo/bin/*#blue&gt;&gt; &lt;&lt;install programs with cargo auditable#green&gt;&gt; &lt;&lt;cargo install cargo-auditable#blue&gt;&gt; &lt;&lt;cargo auditable install ripgrep#blue&gt;&gt; &lt;&lt;cargo audit bin ~/.cargo/bin/rg#blue&gt;&gt; &lt;&lt;Syft. It supports extracting the dependency data created by cargo auditable#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://mozilla.github.io/cargo-vet/" id="426">
      <title>Introduction - Cargo Vet</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=903048" id="427">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://github.com/geiger-rs/cargo-geiger/blob/master/README.md" id="428">
      <title>cargo-geiger/README.md at master · geiger-rs/cargo-geiger#__#&lt;&lt;several proposals / projects#green&gt;&gt; &lt;&lt;more end-user usable#green&gt;&gt; &lt;&lt;Unsafe block Cross-Tracking and Matching - #303#green&gt;&gt; &lt;&lt;based on&gt;&gt; &lt;&lt;https://github.com/icefoxen/cargo-osha#green&gt;&gt; &lt;&lt;https://github.com/sfackler/cargo-tree#green&gt;&gt; &lt;&lt;not meant to advise directly whether the code ultimately is truly insecure#red&gt;&gt; &lt;&lt;purpose of cargo-geiger&gt;&gt; &lt;&lt;provide statistical input to#green&gt;&gt; &lt;&lt;cargo-crev#green&gt;&gt; &lt;&lt;safety-dance#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/geiger-rs/cargo-geiger/discussions/303" id="429">
      <title>Unsafe block Cross-Tracking and Matching · geiger-rs/cargo-geiger · Discussion #303</title>
    </bookmark>
    <bookmark href="https://github.com/rust-secure-code/safety-dance" id="430">
      <title>rust-secure-code/safety-dance: Auditing crates for unsafe code which can be safely replaced#__#&lt;&lt;communicate about auditing unsafe code&gt;&gt; &lt;&lt;eplacing it with safe code&gt;&gt; &lt;&lt;File a tracking issue in this repo#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/crev-dev/cargo-crev" id="431">
      <title>crev-dev/cargo-crev: A cryptographically verifiable code review system for the cargo (Rust) package manager.</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=42172" id="432">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://lwn.net/Articles/897435/" id="433">
      <title>Vetting the cargo [LWN.net]#__#&lt;&lt;June 10, 2022#green&gt;&gt; &lt;&lt;Mozilla&gt;&gt; &lt;&lt;our hundred third-party crates&gt;&gt; &lt;&lt;new directory, called supply-chain&gt;&gt; &lt;&lt;audits.toml and config.toml&gt;&gt; &lt;&lt;mark a module as being audited&gt;&gt; &lt;&lt;that version 1.0 (and only that version)&gt;&gt; &lt;&lt;two &quot;audit criteria&quot;&gt;&gt; &lt;&lt;&quot;safe-to-deploy&quot;&gt;&gt; &lt;&lt;&quot;safe-to-run&quot;&gt;&gt; &lt;&lt;indicating that a range of versions has been audited&gt;&gt; &lt;&lt;patch from one version to the next&gt;&gt; &lt;&lt;a violation line with a version range#red&gt;&gt; &lt;&lt;import its audits.toml&gt;&gt; &lt;&lt;can also fetch the source for the dependencies in question from crates.io&gt;&gt; &lt;&lt;to ensure that the code being audited is the same as the code being deployed&gt;&gt; &lt;&lt;if one project has audited a dependency#green&gt;&gt; &lt;&lt;currently no#red&gt;&gt; &lt;&lt;way (in cargo vet at least) to verify that the person&gt;&gt; &lt;&lt;take something that was hard#blue&gt;&gt; &lt;&lt;make it easy@2#green&gt;&gt; &lt;&lt;reputation system#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://mozilla.github.io/cargo-vet/recording-audits.html" id="434">
      <title>Recording Audits - Cargo Vet</title>
    </bookmark>
    <bookmark href="https://mozilla.github.io/cargo-vet/importing-audits.html" id="1147">
      <title>Importing Audits - Cargo Vet</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=203982" id="1148">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://opensource.googleblog.com/2023/05/open-sourcing-our-rust-crate-audits.html" id="1149">
      <title>Open sourcing our Rust crate audits | Google Open Source Blog</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/cargo-supply-chain" id="1150">
      <title>cargo-supply-chain - crates.io: Rust Package Registry</title>
    </bookmark>
    <bookmark href="https://separator.floccus.org/?id=428250" id="1151">
      <title>-----</title>
    </bookmark>
    <bookmark href="https://anssi-fr.github.io/rust-guide/03_libraries.html" id="1152">
      <title>Libraries - Secure Rust Guidelines</title>
    </bookmark>
  </folder>
  <folder id="83">
    <title>Security - other</title>
    <bookmark href="https://github.com/rust-secure-code/wg/issues/27" id="435">
      <title>Improve clippy security lints · Issue #27 · rust-secure-code/wg</title>
    </bookmark>
    <bookmark href="https://github.com/epi052/feroxbuster" id="436">
      <title>epi052/feroxbuster: A fast, simple, recursive content discovery tool written in Rust.</title>
    </bookmark>
    <bookmark href="https://crates.io/crates/subtle" id="437">
      <title>subtle - crates.io: Rust Package Registry#__#&lt;&lt;side-channels are ultimately a property of a deployed cryptographic system including the hardware it runs on, not just of software.#red&gt;&gt; &lt;&lt;For a compiler to recognize that bitwise operations represent a conditional assignment, it needs to know that the value used to generate the bitmasks is really a boolean i1 rather than an i8 byte value.#red&gt;&gt; &lt;&lt;hide the value of a Choice&apos;s inner u8 by passing it through a volatile read#green&gt;&gt; &lt;&lt;prior to 2.2 recommended use of the nightly feature to enable an optimization barrier#green&gt;&gt; &lt;&lt;not required in versions 2.2 and above&gt;&gt; See also https://github.com/dfaranha/bls12_381&lt;&lt;constant-time crypto&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/DaGenix/rust-crypto/blob/master/src/util_helpers.asm" id="438">
      <title>rust-crypto/util_helpers.asm at master · DaGenix/rust-crypto</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/rustc/exploit-mitigations.html" id="439">
      <title>Exploit Mitigations - The rustc book#__#&lt;&lt;address-space layout randomization (ASLR)&gt;&gt; &lt;&lt;enables it by default&gt;&gt; &lt;&lt;readelf -h target/release/hello-rust | grep Type:&gt;&gt; &lt;&lt;DYN (Shared object file)&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://github.com/legendofmiracles/yas" id="440">
      <title>legendofmiracles/yas: yet another sudo</title>
    </bookmark>
    <bookmark href="https://www.reddit.com/r/rust/comments/l7t980/is_there_a_paranoid_mode_in_the_compiler/" id="441">
      <title>Is there a paranoid mode in the compiler? : rust#__#&lt;&lt;embedded / safety&gt;&gt; &lt;&lt;our TRUE is 0xAAAA and our FALSE 0x5555&gt;&gt; &lt;&lt;we dont write if(b) {this} else {that}#red&gt;&gt; &lt;&lt;we have if(b==TRUE) {this} else if(b==FALSE) {that} else {panic}#blue&gt;&gt; &lt;&lt;dirt cheap chip flies over the atlantic#red&gt;&gt; &lt;&lt;radiation and flip a bit or two#red&gt;&gt; &lt;&lt;if(GET_BOOL(b) {this}&gt;&gt; &lt;&lt;#define GET_BOOL(b) (b==TRUE)?1:(b==FALSE)?0:panic()&gt;&gt; &lt;&lt;but then panic must have a return type#red&gt;&gt; &lt;&lt;functions inside if are hard to read#red&gt;&gt; &lt;&lt;lint/misra complaints#red&gt;&gt; &lt;&lt;our enums&gt;&gt; &lt;&lt;handle every possible#red&gt;&gt; &lt;&lt;default: panic(); in every switch#green&gt;&gt; &lt;&lt;Numeric values that live &gt; 1 second#red&gt;&gt; &lt;&lt;placed in structs&gt;&gt; &lt;&lt;along with a copy of it#green&gt;&gt; &lt;&lt;verified when accessing it#green&gt;&gt; &lt;&lt;When an enum can only be 1 2 or 3, it makes sense for the compiler to emit a jump table without any checks for match, but if the memory contains a 42 this leads to undefined behavior.#red&gt;&gt; &lt;&lt;have to test that the ECC still works#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://blog.sunfishcode.online/introducing-cap-std/" id="442">
      <title>Introducing cap-std, a capability-based version of the Rust standard library · sunfishcode&apos;s blog#__#&lt;&lt;with potentially malicious content&gt;&gt; &lt;&lt;avoid accidentally accessing resources other than they intend#red&gt;&gt; &lt;&lt;without the need of a traditional process-wide sandbox#red&gt;&gt; &lt;&lt;can be easily embedded in larger applications#green&gt;&gt; &lt;&lt;path passed in is ../../home/me/.ssh/id_dsa.pub#red&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="84">
    <title>Streaming</title>
    <bookmark href="https://aur.archlinux.org/packages/gst-plugins-rs-git" id="443">
      <title>GStreamer AUR (en) - gst-plugins-rs-git</title>
    </bookmark>
    <bookmark href="https://github.com/ArroyoSystems/arroyo" id="444">
      <title>ArroyoSystems/arroyo: Distributed stream processing engine in Rust#__#Scott @Rust DC uses it&lt;&lt;stateful computations#green&gt;&gt; &lt;&lt;on streams&gt;&gt; &lt;&lt;Unlike traditional batch#red&gt;&gt; &lt;&lt;streaming engines&gt;&gt; &lt;&lt;on both bounded&gt;&gt; &lt;&lt;unbounded sources&gt;&gt; &lt;&lt;emitting results as soon as they are available&gt;&gt; &lt;&lt;ask complex questions#green&gt;&gt; &lt;&lt;high-volume#green&gt;&gt; &lt;&lt;real-time#green&gt;&gt; &lt;&lt;subsecond#green&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1417">
    <title>WASM &amp; front-end</title>
    <folder id="1514">
      <title>Dioxus</title>
      <bookmark href="https://github.com/david-wallace-croft/dioxus-prototype" id="1631">
        <title>david-wallace-croft/dioxus-prototype: Rust-based Dioxus web app example</title>
      </bookmark>
    </folder>
    <folder id="1515">
      <title>Javascript DOM</title>
      <bookmark href="https://www.reddit.com/r/rust/comments/b3fxh3/webdom_access_dom_from_rust_web_assembly_easily/" id="1632">
        <title>web-dom - Access DOM from Rust web assembly easily : rust</title>
      </bookmark>
      <bookmark href="https://hacks.mozilla.org/2020/07/firefox-79/" id="1633">
        <title>Firefox 79: The safe return of shared memory, new tooling, and platform updates - Mozilla Hacks - the Web developer blog</title>
      </bookmark>
      <bookmark href="https://rustwasm.github.io/docs/wasm-bindgen/" id="1634">
        <title>Introduction - The `wasm-bindgen` Guide</title>
      </bookmark>
      <bookmark href="https://github.com/web-dom/web-dom" id="1635">
        <title>web-dom/web-dom: Access DOM from Rust web assembly easily</title>
      </bookmark>
    </folder>
    <folder id="1516">
      <title>WASM in general</title>
      <bookmark href="https://github.com/bytecodealliance/cargo-component" id="1636">
        <title>bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.#__#&lt;&lt;cargo install --git https://github.com/bytecodealliance/cargo-component --locked cargo-component#green&gt;&gt; &lt;&lt;on crates.io is a nonfunctional placeholder#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/bytecodealliance/wit-bindgen" id="1637">
        <title>bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</title>
      </bookmark>
      <bookmark href="https://github.com/bytecodealliance/wasm-tools" id="1638">
        <title>bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</title>
      </bookmark>
      <bookmark href="https://dev.to/sendilkumarn/rust-and-webassembly-for-the-masses-memory-model-1jhd" id="1639">
        <title>Memory Model in WebAssembly - Javascript DOM</title>
      </bookmark>
      <bookmark href="https://component-model.bytecodealliance.org/creating-and-consuming/composing.html" id="1640">
        <title>Composing Components - The WebAssembly Component Model</title>
      </bookmark>
      <bookmark href="https://alexcrichton.github.io/bacon-exercises/" id="1641">
        <title>Component Exercises</title>
      </bookmark>
    </folder>
    <folder id="1517">
      <title>zOther</title>
      <bookmark href="https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/README.md" id="1642">
        <title>wasmtime/README.md at main · bytecodealliance/wasmtime</title>
      </bookmark>
      <bookmark href="https://github.com/Krzysztow/wasm-demo" id="1643">
        <title>GitHub - Krzysztow/wasm-demo: wasm-demo</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=906080" id="1644">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://github.com/leptos-rs/leptos" id="1645">
        <title>leptos-rs/leptos: Build fast web applications with Rust.#__#&lt;&lt;fine-grained reactivity#green&gt;&gt; &lt;&lt;view! {#green&gt;&gt; &lt;&lt;no virtual DOM overhead#red&gt;&gt; &lt;&lt;nightly@2#red&gt;&gt; &lt;&lt;nightly feature enables the function call syntax for accessing and setting signals#green&gt;&gt; &lt;&lt;as opposed to .get() and .set()#red&gt;&gt; &lt;&lt;cargo-leptos and&gt;&gt; &lt;&lt;templates for Actix5#green&gt;&gt; &lt;&lt;or Axum#green&gt;&gt; &lt;&lt;for native GUI&gt;&gt; &lt;&lt;Yew/Dioxus&gt;&gt; &lt;&lt;Sycamore#red&gt;&gt; &lt;&lt;like Solid,&gt;&gt; &lt;&lt;Leptos and Sycamore&gt;&gt; &lt;&lt;moving signals in closures&gt;&gt; &lt;&lt;making them Copy&gt;&gt; &lt;&lt;Sycamore does this by using bump allocation&gt;&gt; &lt;&lt;ie the lifetimes of its signals to its scopes&gt;&gt; &lt;&lt;arena allocation#blue&gt;&gt; &lt;&lt;ReadSignal&lt;T&gt;, WriteSignal&lt;T&gt;, and Memo&lt;T&gt; are actually wrappers for indices into an arena#blue&gt;&gt; &lt;&lt;both scopes and signals are both Copy and &apos;static#green&gt;&gt; &lt;&lt;moved easily into closures#green&gt;&gt; &lt;&lt;Leptos provides primitives that encourage HTML streaming and allow for easy async#green&gt;&gt; &lt;&lt;`value` and `set_value` are `Copy`, so it&apos;s super easy to move them into closures#green&gt;&gt; &lt;&lt;let (value, set_value) = create_signal(cx, initial_value);#green&gt;&gt; &lt;&lt;a reactive signal with the initial value&gt;&gt; &lt;&lt;let clear = move |_| set_value(0);#green&gt;&gt; &lt;&lt;let decrement = move |_| set_value.update(|value| *value -= 1);#green&gt;&gt; &lt;&lt;on:click=clear#green&gt;&gt; &lt;&lt;on:click=decrement#green&gt;&gt; &lt;&lt;Easy to use with Trunk (trunkrs.dev)#green&gt;&gt; &lt;&lt;or with a simple wasm-bindgen setup#green&gt;&gt; &lt;&lt;cx: Scope&gt;&gt; &lt;&lt;#[component]&gt;&gt; &lt;&lt;pub fn SimpleCounter#green&gt;&gt; &lt;&lt;mount_to_body(|cx| view! { cx,&gt;&gt; &lt;&lt;&lt;SimpleCounter initial_value=3 /&gt;#green&gt;&gt; &lt;&lt;Leptos uses a JSX-like template format (built on syn-rsx&gt;&gt; &lt;&lt;Dioxus uses Leptos server functions in its fullstack mode#blue&gt;&gt; &lt;&lt;but does not have the same &lt;Suspense&gt;-based support for things like streaming#red&gt;&gt; &lt;&lt;Leptos tends to prioritize holistic web#green&gt;&gt; &lt;&lt;streaming HTML rendering@1&gt;&gt; &lt;&lt;smaller WASM binary#green&gt;&gt; &lt;&lt;whereas Dioxus has an unparalleled experience when building desktop#green&gt;&gt; &lt;&lt;Leptos is simply much faster#green&gt;&gt; &lt;&lt;than Yew#red&gt;&gt; &lt;&lt;While Dioxus has a performant virtual DOM (VDOM), it still uses coarse-grained/component-scoped reactivity#red&gt;&gt; &lt;&lt;cargo-leptos#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://trunkrs.dev/" id="1646">
        <title>Trunk | Build, bundle &amp; ship your Rust WASM application to the web</title>
      </bookmark>
      <bookmark href="https://momori-nakano.hashnode.dev/deploying-a-rust-wasm-app-to-github-pages" id="1647">
        <title>Deploying a Rust WebAssembly (WASM) App to GitHub Pages#__#&lt;&lt;created earlier&gt;&gt; &lt;&lt;on GitHub@1&gt;&gt; &lt;&lt;[lib]&gt;&gt; &lt;&lt;crate-type = [&quot;cdylib&quot;, &quot;rlib&quot;]&gt;&gt; &lt;&lt;wasm-bindgen = &quot;0.2.91&quot;&gt;&gt; &lt;&lt;#[wasm_bindgen] attribute to a struct and impl block&gt;&gt; &lt;&lt;wasm-bindgen generates .wasm&gt;&gt; &lt;&lt;and glue JS#blue&gt;&gt; &lt;&lt;wasm-pack generates JS&gt;&gt; &lt;&lt;to be imported from JS using wasm-bindgen#blue&gt;&gt; &lt;&lt;wasm-pack can generate files suitable for bundlers like webpack&gt;&gt; &lt;&lt;cargo install wasm-pack#green&gt;&gt; &lt;&lt;wasm-pack build --target web --no-pack --out-dir ./www/pkg#green&gt;&gt; &lt;&lt;in the www/pkg&gt;&gt; &lt;&lt;lp.js: an interface file to be imported from other JavaScript&gt;&gt; &lt;&lt;lp_bg.wasm&gt;&gt; &lt;&lt;.ts.d includes type definitions&gt;&gt; &lt;&lt;--no-pack option stops the creation of package.json#red&gt;&gt; &lt;&lt;:root {#green&gt;&gt; &lt;&lt;&lt;script type=&quot;module&quot;#green&gt;&gt; &lt;&lt;import init, { Repl } from &quot;./pkg/lp.js&quot;;&gt;&gt; &lt;&lt;(async () =&gt; {&gt;&gt; &lt;&lt;await init();#green&gt;&gt; &lt;&lt;exec();#green&gt;&gt; &lt;&lt;function exec() {&gt;&gt; &lt;&lt;Repl.eval(text); // Use the Rust#green&gt;&gt; &lt;&lt;`&lt;pre&gt;${text}&lt;/pre&gt; =&gt; ${output}`#green&gt;&gt; &lt;&lt;another way to incorporate Rust WASM into JavaScript:#blue&gt;&gt; &lt;&lt;module bundlers&gt;&gt; &lt;&lt;While using webpack makes the process a little more complicated#red&gt;&gt; &lt;&lt;more practical#green&gt;&gt; &lt;&lt;wasm-pack build --target bundler --out-dir ./www/pkg&gt;&gt; &lt;&lt;cd www&gt;&gt; &lt;&lt;npm install ./pkg&gt;&gt; &lt;&lt;bundlers like webpack@1&gt;&gt; &lt;&lt;integrate multiple files into a single file#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://separator.floccus.org/?id=4954" id="1648">
        <title>-----</title>
      </bookmark>
      <bookmark href="https://extism.org/docs/integrate-into-your-codebase/rust-host-sdk/" id="1649">
        <title>Rust | Extism - make all software programmable. Extend from within.</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/1cwmyaw/multithreading_with_wasm_on_the_browser_is_it/" id="1956">
        <title>Multithreading with WASM on the Browser. Is it possible yet? : r/rust</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="1418">
    <title>WebServices</title>
    <folder id="1518">
      <title>Actix</title>
      <bookmark href="https://github.com/actix/actix-web" id="1650">
        <title>actix/actix-web: Actix Web is a powerful, pragmatic, and extremely fast web framework for Rust.</title>
      </bookmark>
    </folder>
    <folder id="1519">
      <title>Askama templates</title>
      <bookmark href="https://blog.logrocket.com/template-rendering-in-rust/" id="1651">
        <title>Template rendering in Rust - LogRocket Blog#__#&lt;&lt;Askama is based on the widely used Jinja&gt;&gt; &lt;&lt;Askama creates actual Rust code&gt;&gt; &lt;&lt;checked at compile time&gt;&gt; &lt;&lt;rendering is lightning fast&gt;&gt; &lt;&lt;full code for this example on GitHub&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/djc/askama/blob/main/testing/templates/for-range.html" id="1652">
        <title>askama/testing/templates/for-range.html at main · djc/askama</title>
      </bookmark>
      <bookmark href="https://github.com/djc/askama/blob/main/testing/templates/precedence-for.html" id="1653">
        <title>askama/testing/templates/precedence-for.html at main · djc/askama</title>
      </bookmark>
      <bookmark href="https://github.com/djc/askama/blob/main/testing/templates/for.html" id="1654">
        <title>askama/testing/templates/for.html at main · djc/askama</title>
      </bookmark>
      <bookmark href="https://djc.github.io/askama/" id="1655">
        <title>Askama - Askama#__#&lt;&lt;tweet#green&gt;&gt; &lt;&lt;performance#green&gt;&gt; &lt;&lt;Actix, Axum, Gotham, Mendes, Rocket, tide#green&gt;&gt; &lt;&lt;warp#green&gt;&gt; &lt;&lt;built-in#green&gt;&gt; &lt;&lt;Debugging@1#green&gt;&gt; &lt;&lt;produce UTF-8#green&gt;&gt; &lt;&lt;JetBrains&gt;&gt; &lt;&lt;Template inheritance#green&gt;&gt; &lt;&lt;include#green&gt;&gt; &lt;&lt;Macro#green&gt;&gt; &lt;&lt;Variables#green&gt;&gt; &lt;&lt;no mutability#red&gt;&gt; &lt;&lt;built-in filters#green&gt;&gt; &lt;&lt;use your own#green&gt;&gt; &lt;&lt;Whitespace suppressing with &apos;-&apos;#green&gt;&gt; &lt;&lt;Opt-out HTML escaping#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://djc.github.io/askama/creating_templates.html" id="1656">
        <title>Creating templates - Askama#__#&lt;&lt;#[template(path = &quot;hello.html&quot;)]@1#green&gt;&gt; &lt;&lt;source = &quot;{{ foo }}&quot;#green&gt;&gt; &lt;&lt;ext = &quot;txt&quot;): lets you specify the content type as a file extension&gt;&gt; &lt;&lt;to infer an escape mode@1#green&gt;&gt; &lt;&lt;Cannot be used together with path@1#red&gt;&gt; &lt;&lt;print = &quot;code&quot;&gt;&gt; &lt;&lt;syntax = &quot;foo&quot;&gt;&gt; &lt;&lt;for a parser defined in the configuration file&gt;&gt; &lt;&lt;default syntax , &quot;default&quot;, is the one provided by Askama&gt;&gt; &lt;&lt;config = &quot;config_file_path&quot;&gt;&gt; &lt;&lt;relative to your crate root&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://djc.github.io/askama/template_syntax.html" id="1657">
        <title>Template syntax - Askama#__#&lt;&lt;dot (.) to access variable&apos;s attributes&gt;&gt; &lt;&lt;methods&gt;&gt; &lt;&lt;crate::MAX_NB_USERS&gt;&gt; &lt;&lt;{{@2#green&gt;&gt; &lt;&lt;{% set value = 4 %}&gt;&gt; &lt;&lt;{% if&gt;&gt; &lt;&lt;{{ value&gt;&gt; &lt;&lt;declare variables&gt;&gt; &lt;&lt;assign values&gt;&gt; &lt;&lt;Assignments can&apos;t be imported by other templates#red&gt;&gt; &lt;&lt;-%}#green&gt;&gt; &lt;&lt;shadowing variables&gt;&gt; &lt;&lt;set can be used in place of let&gt;&gt; &lt;&lt;post-processed using filters&gt;&gt; &lt;&lt;optional extra arguments in parentheses&gt;&gt; &lt;&lt;{{ &quot;{:?}&quot;|format(name|escape) }}&gt;&gt; &lt;&lt;escape HTML&gt;&gt; &lt;&lt;own filters, simply have a module&gt;&gt; &lt;&lt;filters in scope&gt;&gt; &lt;&lt;context deriving a Template impl&gt;&gt; &lt;&lt;in case of name collision, the built in filters take precedence#red&gt;&gt; &lt;&lt;default, it preserves all whitespace in template#red&gt;&gt; &lt;&lt;except that a single trailing newline character is suppressed&gt;&gt; &lt;&lt;minus sign directly following a start delimiter#green&gt;&gt; &lt;&lt;or leading into an end delimiter&gt;&gt; &lt;&lt;to preserve whitespace characters on one side#green&gt;&gt; &lt;&lt;{#+ #}#green&gt;&gt; &lt;&lt;third possibility&gt;&gt; &lt;&lt;to suppress all whitespace characters except one&gt;&gt; &lt;&lt;use ~&gt;&gt; &lt;&lt;if one of the trimmed characters is a newline, then the only character remaining will be a newline#red&gt;&gt; &lt;&lt;also be defined by a configuration&gt;&gt; &lt;&lt;derive macro.&gt;&gt; &lt;&lt;global-to-local preference:&gt;&gt; &lt;&lt;askama.toml&gt;&gt; &lt;&lt;base template defines blocks&gt;&gt; &lt;&lt;child templates can override&gt;&gt; &lt;&lt;{% block&gt;&gt; &lt;&lt;{% endblock&gt;&gt; &lt;&lt;{% extends&gt;&gt; &lt;&lt;{% call#green&gt;&gt; &lt;&lt;escapes &lt;, &gt;, &amp;, &quot;, and &apos;&gt;&gt; security: cross site scripting prevention&lt;&lt;OWASP escaping&gt;&gt; &lt;&lt;safe filter to prevent escaping for a single expression&gt;&gt; &lt;&lt;escape (or e)&gt;&gt; &lt;&lt;escape a single expression in an unescaped context&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1520">
      <title>Axum</title>
      <bookmark href="https://github.com/tokio-rs/axum/discussions/555" id="1658">
        <title>Doc on how to write tests · Discussion #555 · tokio-rs/axum#__#&lt;&lt;axum-test-helper&gt;&gt; &lt;&lt;add it inside dev-dependencies#green&gt;&gt; &lt;&lt;instead of dependencies#red&gt;&gt; &lt;&lt;pgpool#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/axum-test-helper/0.1.0/axum_test_helper/" id="1659">
        <title>axum_test_helper - Rust</title>
      </bookmark>
      <bookmark href="https://github.com/tokio-rs/axum/blob/main/examples/testing/src/main.rs" id="1660">
        <title>axum/main.rs at main · tokio-rs/axum</title>
      </bookmark>
      <bookmark href="https://github.com/tokio-rs/axum/blob/main/examples/testing/Cargo.toml" id="1661">
        <title>axum/Cargo.toml at main · tokio-rs/axum</title>
      </bookmark>
      <bookmark href="https://github.com/tokio-rs/axum/tree/main/examples" id="1662">
        <title>axum/examples at main · tokio-rs/axum</title>
      </bookmark>
      <bookmark href="https://kerkour.com/rust-web-framework-2022#%2F=" id="1663">
        <title>Which Rust web framework to choose in 2022 (with code examples)</title>
      </bookmark>
      <bookmark href="https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md" id="1664">
        <title>axum/ECOSYSTEM.md at main · tokio-rs/axum</title>
      </bookmark>
      <bookmark href="https://docs.rs/axum/latest/axum/handler/index.html" id="1665">
        <title>axum::handler - Rust#__#&lt;&lt;Handler that buffers the request body&gt;&gt; &lt;&lt;async fn echo(body: Bytes) -&gt; Result&lt;String, StatusCode&gt;&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/axum/latest/axum/extract/struct.Multipart.html" id="1666">
        <title>Multipart in axum::extract - Rust#__#&lt;&lt;multipart/form-data&gt;&gt; &lt;&lt;commonly used with file uploads&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/axum/latest/axum/routing/fn.get.html" id="1667">
        <title>get in axum::routing - Rust#__#&lt;&lt;get routes will also be called for HEAD requests#red&gt;&gt; &lt;&lt;will have the response body removed&gt;&gt; &lt;&lt;add explicit HEAD routes afterwards#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://stackoverflow.com/questions/69415050/how-to-design-the-test-friendly-application-with-rust-axum" id="1830">
        <title>http - How to design the test-friendly application with Rust/Axum? - Stack Overflow</title>
      </bookmark>
      <bookmark href="https://docs.rs/axum/latest/axum/handler/trait.Handler.html" id="1831">
        <title>Handler in axum::handler - Rust#__#&lt;&lt;doesn’t tell you why your function doesn’t implement Handler#red&gt;&gt; &lt;&lt;improve the error with the debug_handler proc-macro#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/hyperium/hyper" id="1832">
        <title>hyperium/hyper: An HTTP library for Rust#__#&lt;&lt;fast and correct HTTP&gt;&gt; &lt;&lt;low-level&gt;&gt; &lt;&lt;axum&gt;&gt; &lt;&lt;warp0, the latter taking a more functional#green&gt;&gt; &lt;&lt;Both are built on top of this#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/tokio-rs/axum" id="1833">
        <title>tokio-rs/axum: Ergonomic and modular web framework built with Tokio, Tower, and Hyper#__#&lt;&lt;main branch has unpublished, breaking#red&gt;&gt; &lt;&lt;share middleware with applications&gt;&gt; &lt;&lt;hyper or tonic#green&gt;&gt; &lt;&lt;axum is a relatively thin layer on top of hyper&gt;&gt; &lt;&lt;very little overhead&gt;&gt; &lt;&lt;axum&apos;s performance is comparable to hyper#green&gt;&gt; &lt;&lt;100% safe Rust&gt;&gt; &lt;&lt;MSRV is 1.63&gt;&gt; &lt;&lt;See here for a list of community maintained crates and projects built with axum&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1521">
      <title>Hyper</title>
      <bookmark href="https://jfrog.com/blog/watch-out-for-dos-when-using-rusts-popular-hyper-package/" id="1668">
        <title>Potential DoS Vulnerability in Rust Hyper#__#&lt;&lt;size_hint@2&gt;&gt; &lt;&lt;response.body().size_hint().upper()&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1522">
      <title>Tower</title>
      <bookmark href="https://github.com/tower-rs/tower" id="1669">
        <title>tower-rs/tower: async fn(Request) -&gt; Result&lt;Response, Error&gt;#__#&lt;&lt;protocol agnostic&gt;&gt; &lt;&lt;request / response pattern#green&gt;&gt; &lt;&lt;If your protocol is entirely stream#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/tokio-tower/latest/tokio_tower/" id="1670">
        <title>tokio_tower - Rust</title>
      </bookmark>
      <bookmark href="https://docs.rs/axum/latest/axum/struct.Router.html" id="1671">
        <title>Router in axum - Rust#__#&lt;&lt;tower::Layer to the router.&gt;&gt; &lt;&lt;tower_http::services::ServeDir to serve static files&gt;&gt; &lt;&lt;tower_http::auth&gt;&gt; &lt;&lt;tower_http::trace::TraceLayer&gt;&gt;</title>
      </bookmark>
    </folder>
    <folder id="1523">
      <title>Warp (webserver)</title>
      <bookmark href="https://github.com/seanmonstar/warp" id="1672">
        <title>seanmonstar/warp: A super-easy, composable, web server framework for warp speeds.</title>
      </bookmark>
      <bookmark href="https://docs.rs/warp/latest/warp/macro.path.html" id="1673">
        <title>path in warp - Rust#__#&lt;&lt;path! macro automatically assumes the path should include an end() filter#red&gt;&gt; &lt;&lt;To build up a path filter prefix#green&gt;&gt; &lt;&lt;that the end() isn’t included&gt;&gt; &lt;&lt;use the / .. syntax#green&gt;&gt; &lt;&lt;let prefix = warp::path!(&quot;math&quot; / &quot;sum&quot; / ..);#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://dev.to/steadylearner/how-to-use-rust-warp-web-framework-2b4e" id="1674">
        <title>How to use Rust web framework Warp - DEV Community#__#&lt;&lt;5. Link them to end the API with macro#green&gt;&gt; &lt;&lt;return type of handler functions will almost always#green&gt;&gt; &lt;&lt;Result&lt;impl warp::Reply, warp::Rejection&gt;@1#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://users.rust-lang.org/t/how-do-i-create-a-warp-path-segment-from-a-user-provided-path/66140/4" id="1675">
        <title>How do I create a warp path segment from a user provided path? - help - The Rust Programming Language Forum#__#&lt;&lt;every call to and(..) creates a new type#red&gt;&gt; &lt;&lt;wraps the previous#red&gt;&gt; &lt;&lt;difficult error messages to follow#red&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://docs.rs/warp-reverse-proxy/latest/warp_reverse_proxy/" id="1676">
        <title>warp_reverse_proxy - Rust</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/lwb6px/rust_proxy_server_with_warp_and_hyper/" id="1677">
        <title>Reddit - Dive into anything</title>
      </bookmark>
      <bookmark href="https://www.appsloveworld.com/rust/41/redirect-or-show-html-with-warp-in-rust" id="1678">
        <title>redirect or show HTML with warp in rust?#__#&lt;&lt;warp::http::Response::builder()@1&gt;&gt; &lt;&lt;.header(&quot;Location&quot;, location)&gt;&gt; &lt;&lt;.status(final_status)&gt;&gt; &lt;&lt;.body(&quot;&quot;.to_string())&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.reddit.com/r/rust/comments/f53rgu/awaiting_closures_with_warp/" id="1679">
        <title>(5) Awaiting Closures With Warp : rust#__#&lt;&lt;Returning futures only#red&gt;&gt; &lt;&lt;with and_then#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/seanmonstar/warp/issues/594" id="1680">
        <title>Difference between and_then and map · Issue #594 · seanmonstar/warp#__#&lt;&lt;with and_then&gt;&gt; &lt;&lt;you don&apos;t need an async block#red&gt;&gt; &lt;&lt;can use futures::future::ok#green&gt;&gt; &lt;&lt;can return an async block#green&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/seanmonstar/warp/blob/master/examples/futures.rs" id="1681">
        <title>warp/examples/futures.rs at master · seanmonstar/warp</title>
      </bookmark>
    </folder>
    <folder id="1524">
      <title>zOther</title>
      <bookmark href="https://github.com/vancouver-rs/talks/tree/master/rocket" id="1682">
        <title>talks/rocket at master · vancouver-rs/talks</title>
      </bookmark>
      <bookmark href="https://seed-rs.org/" id="1683">
        <title>Seed</title>
      </bookmark>
      <bookmark href="https://medium.com/@KevinHoffman/streaming-grpc-with-rust-d978fece5ef6" id="1684">
        <title>Streaming gRPC with Rust. Lately I’ve been working on a side… | by Kevin Hoffman | Medium</title>
      </bookmark>
      <bookmark href="https://www.freecodecamp.org/news/building-powerful-graphql-servers-with-rust/" id="1685">
        <title>How to Build Powerful GraphQL Servers with Rust</title>
      </bookmark>
      <bookmark href="https://gist.github.com/mysteriouspants/3353edf16425f30fee53476b879f8901" id="1686">
        <title>rocket.md</title>
      </bookmark>
      <bookmark href="https://docs.rs/handlebars/latest/handlebars/" id="1687">
        <title>handlebars - Rust</title>
      </bookmark>
      <bookmark href="https://github.com/GREsau/okapi" id="1688">
        <title>GREsau/okapi: OpenAPI (AKA Swagger) document generation for Rust projects#__#&lt;&lt;Automated OpenAPI (AKA Swagger) document generation&gt;&gt; &lt;&lt;Rocket@1&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://www.lpalmieri.com/posts/2020-08-09-zero-to-production-3-how-to-bootstrap-a-new-rust-web-api-from-scratch/" id="1689">
        <title>How To Bootstrap A Rust Web API From Scratch | A learning journal</title>
      </bookmark>
      <bookmark href="https://www.lpalmieri.com/posts/2020-08-31-zero-to-production-3-5-html-forms-databases-integration-tests/#1-previously-on-zero-to-production" id="1690">
        <title>HTML forms, Databases, Integration tests | A learning journal</title>
      </bookmark>
      <bookmark href="https://kerkour.com/rust-web-framework-2022" id="1691">
        <title>Which Rust web framework to choose in 2022 (with code examples)#__#&lt;&lt;struct Hello {@2&gt;&gt; &lt;&lt;async fn index(item: Json&lt;Hello&gt;) -&gt;impl IntoResponse&gt;&gt; &lt;&lt;Json(item.message)&gt;&gt; &lt;&lt;both axum and actix-web to be more straightforward&gt;&gt; &lt;&lt;helpers to automatically extract typed body payloads&gt;&gt; &lt;&lt;post(index)&gt;&gt; &lt;&lt;.layer(layer_fn(|inner| MyMiddleware { inner }))&gt;&gt; &lt;&lt;struct State {}@2&gt;&gt; &lt;&lt;async fn handler(&gt;&gt; &lt;&lt;Extension(state): Extension&lt;Arc&lt;State&gt;&gt;&gt;&gt; &lt;&lt;let shared_state = Arc::new(State {});&gt;&gt; &lt;&lt;.layer(AddExtensionLayer::new(shared_state))&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://crates.io/crates/tonic" id="1834">
        <title>crates.io: Rust Package Registry#__#&lt;&lt;gRPC over HTTP/2&gt;&gt;</title>
      </bookmark>
      <bookmark href="https://github.com/Barre/privaxy/issues/63" id="1835">
        <title>Cloudflare TLS fingerprinting · Issue #63 · Barre/privaxy#__#&lt;&lt;OpenSSL is even harder#red&gt;&gt; &lt;&lt;I tried to fake TLS Fingerprint with OpenSSL in Python and failed miserably#red&gt;&gt; &lt;&lt;Go actually&gt;&gt; &lt;&lt;github.com/bogdanfinn/tls-client&gt;&gt; &lt;&lt;openssl can&apos;t do it, know this firsthand#red&gt;&gt; &lt;&lt;do it yourself with something like rustls#green&gt;&gt; &lt;&lt;or use boringssl#green&gt;&gt; &lt;&lt;that&apos;s chromium&apos;s tls handling#green&gt;&gt; &lt;&lt;gssvv/rust-boring-ssl-client#green&gt;&gt; &lt;&lt;lwthiker/curl-impersonate&gt;&gt;</title>
      </bookmark>
    </folder>
  </folder>
  <folder id="1419">
    <title>Why Rust</title>
    <bookmark href="https://ziglang.org/" id="1525">
      <title>The Zig Programming Language#__#Like Rust, but with pluggable scope/access verifier</title>
    </bookmark>
    <bookmark href="https://en.wikipedia.org/wiki/Rust_(programming_language)" id="1526">
      <title>Rust (programming language) - Wikipedia#__#&lt;&lt;programming in the large&gt;&gt; &lt;&lt;creating and maintaining boundaries&gt;&gt; &lt;&lt;preserve large-system integrity&gt;&gt; &lt;&lt;not perform implicit boxing#blue&gt;&gt; &lt;&lt;a generic function can be type-checked as soon as it is defined#blue&gt;&gt; &lt;&lt;contrast to C++ templates, which are fundamentally duck typed and cannot be checked until instantiated with concrete types#red&gt;&gt; &lt;&lt;C++ concepts address the same&gt;&gt; &lt;&lt;However, the implementation of Rust generics is similar to the typical implementation of C++ templates: a separate copy of the code#green&gt;&gt; &lt;&lt;called monomorphization&gt;&gt; &lt;&lt;contrasts with the type erasure scheme typically used in Java and Haskell#red&gt;&gt; &lt;&lt;benefit of monomorphization is optimized code for each specific use case#green&gt;&gt; &lt;&lt;Implementations and traits cannot define fields themselves#red&gt;&gt; &lt;&lt;only traits can provide inheritance#red&gt;&gt; &lt;&lt;replaces implementation inheritance with composition#red&gt;&gt; &lt;&lt;Operating systems@1&gt;&gt; &lt;&lt;As of January 2019, the OSes included: BlogOS, intermezzOS, QuiltOS, Redox, RustOS, Rux, Tefflin, and Tock.&gt;&gt; &lt;&lt;Stratis – a file system for Fedora&gt;&gt; &lt;&lt;microVMs&gt;&gt; &lt;&lt;Functions can be given generic parameters&gt;&gt; &lt;&lt;Within such a function, the generic value can only be used through those traits.#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://bitbucket.org/blog/why-rust" id="1527">
      <title>Why we chose Rust as our programming language#__#&lt;&lt;minimum real-time latency#green&gt;&gt; &lt;&lt;Memory (mb)#green&gt;&gt; &lt;&lt;SoC devices, use ARM-based CPUs and generally have 4+ cores#green&gt;&gt; &lt;&lt;Lua does not have native multithreading#red&gt;&gt; &lt;&lt;Rust, on the other hand, has built-in support for multi-threading&gt;&gt; &lt;&lt;avoids possible data race conditions#green&gt;&gt; &lt;&lt;concurrency and memory safety issues. These are the most complex and unpredictable classes of errors#blue&gt;&gt; &lt;&lt;writing tests within the program itself through its powerful libraries like cargo test#green&gt;&gt; &lt;&lt;Interpreter based languages tend to perform poorly in high concurrency &amp; low resource#red&gt;&gt; &lt;&lt;interpreter based languages may be better when you don’t have resource constraints and when high concurrency is not needed or is achieved using other mechanisms such as event loops#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/" id="1528">
      <title>Implications of Rewriting a Browser Component in Rust - Mozilla Hacks - the Web developer blog#__#&lt;&lt;73.9%) of these bugs would not have been possible&gt;&gt; &lt;&lt;the styles of children can be calculated independently—a perfect use-case for parallel computation.&gt;&gt; &lt;&lt;To speed up our automated tests, we temporarily turned off#red&gt;&gt; &lt;&lt;Rust’s powerful built-in data structures to unify the ordering and property name data&gt;&gt; &lt;&lt;Vec type in Rust is dynamically sized.&gt;&gt; &lt;&lt;allows us to avoid having to maintain two independent arrays.&gt;&gt;</title>
    </bookmark>
  </folder>
  <folder id="1420">
    <title>zOther</title>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch10-00-generics.html" id="1529">
      <title>Generic Types, Traits, and Lifetimes - The Rust Programming Language#__#&lt;&lt;stand-ins#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="http://play.org/links/rust" id="1530">
      <title>Rust (By Daniel Pezely, Vancouver)</title>
    </bookmark>
    <bookmark href="https://github.com/rust-lang-ru/book/releases" id="1531">
      <title>Releases · rust-lang-ru/book</title>
    </bookmark>
    <bookmark href="https://github.com/ProgrammingRust" id="1532">
      <title>Examples - Programming Rust, OReilly</title>
    </bookmark>
    <bookmark href="https://github.com/aureooms/memoize" id="1533">
      <title>aureooms/memoize: Cache executable calls - Unix &amp; Arch Manjaro</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch08-02-strings.html" id="1534">
      <title>Storing UTF-8 Encoded Text with Strings - The Rust Programming Language#__#&lt;&lt;OsString, OsStr, CString, and CStr#green&gt;&gt; &lt;&lt;See how those names all end in String or Str? They refer to owned and borrowed variants#green&gt;&gt; &lt;&lt;to_string method, which is available on any type that implements the Display#green&gt;&gt; &lt;&lt;let s1 = String::from(&quot;Hello, &quot;);&gt;&gt; &lt;&lt;let s3 = s1 + &amp;s2; // note s1 has been moved#red&gt;&gt; &lt;&lt;format!(&quot;{}-{}-{}&quot;, s1, s2, s3)#green&gt;&gt; &lt;&lt;Rust strings don’t support indexing#red&gt;&gt; &lt;&lt;bytes, scalar values, and grapheme clusters#green&gt;&gt; &lt;&lt;for c in &quot;नमस्ते&quot;.chars()#green&gt;&gt; &lt;&lt;for b in &quot;नमस्ते&quot;.bytes()&gt;&gt; &lt;&lt;Getting grapheme clusters from strings is complex, so this functionality is not provided by the standard library#red&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://doc.rust-lang.org/nightly/book/ch12-04-testing-the-librarys-functionality.html" id="1535">
      <title>Developing the Library’s Functionality with Test Driven Development - The Rust Programming Language#__#&lt;&lt;fn search&lt;&apos;a&gt;(query: &amp;str, contents: &amp;&apos;a str) -&gt; Vec&lt;&amp;&apos;a str&gt;@1#green&gt;&gt; &lt;&lt;for line in contents.lines() {#green&gt;&gt; &lt;&lt;let contents = &quot;\#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://www.zero2prod.com/?country=Ireland&amp;discount_code=VAT20" id="1536">
      <title>Zero To Production In Rust - An Introduction...</title>
    </bookmark>
    <bookmark href="http://downloads.codecoding.com/rust/" id="1537">
      <title>Programming Rust OReilly 2018</title>
    </bookmark>
    <bookmark href="https://github.com/pretzelhammer/rust-blog/blob/master/posts/learning-rust-in-2020.md" id="1538">
      <title>rust-blog/learning-rust-in-2020.md at master · pretzelhammer/rust-blog#__#&lt;&lt;HackerRank#red&gt;&gt; &lt;&lt;Project Euler#red&gt;&gt; &lt;&lt;LeetCode#red&gt;&gt; &lt;&lt;Codewars#red&gt;&gt; &lt;&lt;Rustlings#green&gt;&gt; &lt;&lt;Exercism#green&gt;&gt;</title>
    </bookmark>
    <bookmark href="https://lborb.github.io/book/" id="1795">
      <title>Introduction - The Little Book of Rust Books</title>
    </bookmark>
    <bookmark href="https://knurling.ferrous-systems.com/" id="1796">
      <title>Knurling-rs#__#Searching on crates.io for embedded is difficult. Knurlng/Ferrous Systems help. Ask Andreas Schmidt from Saar Rust.</title>
    </bookmark>
    <bookmark href="https://www.oreilly.com/catalog/errata.csp?isbn=0636920040385" id="1797">
      <title>Errata | O&apos;Reilly Media Programming Rust</title>
    </bookmark>
    <bookmark href="https://docs.microsoft.com/en-us/search/?terms=rust" id="1798">
      <title>Search | Microsoft Docs - Data mining</title>
    </bookmark>
    <bookmark href="https://ozbe.io/what-im-reading-2020-05-17/" id="1799">
      <title>What I&apos;m Reading - 2020-05-17 | ozbe</title>
    </bookmark>
    <bookmark href="https://riptutorial.com/ebook/rust" id="1800">
      <title>rust eBook</title>
    </bookmark>
    <bookmark href="https://www.youtube.com/c/MicrosoftReactor/search?query=rust" id="1801">
      <title>Microsoft Reactor - YouTube data mining</title>
    </bookmark>
  </folder>
</folder>
</xbel>